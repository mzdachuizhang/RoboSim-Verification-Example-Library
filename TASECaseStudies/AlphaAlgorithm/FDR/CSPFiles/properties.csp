transparent diamond
transparent sbisim

const_RSMC_MovementC_stm_ref0_waitt3 = 1

const_RSMC_MovementC_stm_ref0_cTurn180 = 1

const_RSMC_MovementC_stm_ref0_cRandom = 1

const_RCMovC_MovementC_stm_ref0_av = 1

const_RCMovC_MovementC_stm_ref0_MB = 3

const_RSMC_MovementC_stm_ref0_MB = 3

const_RSMC_MovementC_stm_ref0_av = 1

cycle_AgSw_AggregationSoftware_AggregationSoftware = 1

--MB = 3
--av = 180

include "main_assertionsV2.csp"

------------------------------------------------------------------------------------
--The communication behaviour should consist of a broadcast followed by a receive event.
------------------------------------------------------------------------------------

Communication_id = 1

Spec1 = let
Responds = 
( |~|x:AgSw_ID @ AgSwRS::AggregationSoftware::ctrl_ref1::stm_ref0::registerWrite.AgSwRS::AggregationSoftware::ctrl_ref1::stm_ref0::o_receive.(Communication_id,x) -> Responds ) |~| SKIP

Run = AgSwRS::AggregationSoftware::ctrl_ref1::stm_ref0::registerRead.AgSwRS::AggregationSoftware::ctrl_ref1::stm_ref0::i_broadcast.true?x:diff(AgSw_ID,{Communication_id}) -> AgSwRS::AggregationSoftware::ctrl_ref1::stm_ref0::registerWrite.AgSwRS::AggregationSoftware::ctrl_ref1::stm_ref0::o_receive!(x,Communication_id) -> Run |~| SKIP

Main = AgSwRS::AggregationSoftware::ctrl_ref1::stm_ref0::registerRead.AgSwRS::AggregationSoftware::ctrl_ref1::stm_ref0::i_broadcast.true.Communication_id -> (Responds|||Run); Main
within
Main

assert Spec1 [F= AgSwRS::AggregationSoftware::D__(1,1,1,1,4,1,1,1,1,1,2)\diff(Events,{|AgSwRS::AggregationSoftware::registerWrite.AgSwRS::AggregationSoftware::o_receive.(1,1),
AgSwRS::AggregationSoftware::registerRead.AgSwRS::AggregationSoftware::i_broadcast.true.Communication_id|})


-----------------------------------------------------------------------------------------------

assert AgSwRS::AggregationSoftware::D__(1,1,1,1,4,1,1,1,1,1,2):[deadlock-free[F]]

--------------------------------------------------------------------------------------------------------------
--Initially, and then after exactly RC time units, when a broadcast.Communication_id happens, then the events broadcast and receive are offered before RC time units elapse.
--------------------------------------------------------------------------------------------------------------


Communication_RC = 2
--Communication_id = 1
ID = {0,1}

SomeHappened(t) = t < Communication_RC & (AnyOther({tock}) ; SomeHappened(t+1))
		[]
		t == Communication_RC & NoEvent


AnyOther(E) = CHAOS(Events) [|E|> SKIP

NoEvent = AnyOther({|AgSwRS::AggregationSoftware::registerWrite.AgSwRS::AggregationSoftware::o_broadcast.Communication_id|}) ; BroadcastHappened(0)

BroadcastHappened(t) = (t < Communication_RC & (AgSwRS::AggregationSoftware::registerRead.AgSwRS::AggregationSoftware::i_broadcast.true ?x-> SomeHappened(t) 
				[] 
				AgSwRS::AggregationSoftware::registerRead.AgSwRS::AggregationSoftware::i_receive.true?x:{x|x <- {(Communication_id,x0) | x0 <- ID}} -> SomeHappened(t) 
				[] 
				tock -> BroadcastHappened(t+1)))
			[]
			t == Communication_RC & NoEvent



assert CHAOS({|AgSwRS::AggregationSoftware::registerWrite.AgSwRS::AggregationSoftware::o_move,
AgSwRS::AggregationSoftware::registerRead.AgSwRS::AggregationSoftware::i_obstacle,tock|}) [| {tock} |] NoEvent [FD= 
AgSwRS::AggregationSoftware::D__(1,1,1,1,4,1,1,1,1,1,2)

