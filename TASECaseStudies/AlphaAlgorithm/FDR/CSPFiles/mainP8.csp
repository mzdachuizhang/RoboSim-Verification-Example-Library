transparent diamond
transparent sbisim

include "AgSwR.csp"

--------------------------------------------------------------------------------------------------------------
--The behavior of communication should consist of a broadcast followed by a receive event.
--------------------------------------------------------------------------------------------------------------

AgSw_ID = {0,1}

Spec1 = let
Responds = 
( |~|x:AgSw_ID @ AgSwR::AggregationSoftware::ctrl_ref1::stm_ref0::registerWrite.AgSwR::AggregationSoftware::ctrl_ref1::stm_ref0::o_receiveO.(Communication_id,x) -> Responds ) |~| SKIP

Run = AgSwR::AggregationSoftware::ctrl_ref1::stm_ref0::registerRead.AgSwR::AggregationSoftware::ctrl_ref1::stm_ref0::i_broadcast.true?x:diff(AgSw_ID,{Communication_id}) -> AgSwR::AggregationSoftware::ctrl_ref1::stm_ref0::registerWrite.AgSwR::AggregationSoftware::ctrl_ref1::stm_ref0::o_receiveO!(x,Communication_id) -> Run |~| SKIP

Main = AgSwR::AggregationSoftware::ctrl_ref1::stm_ref0::registerWrite.AgSwR::AggregationSoftware::ctrl_ref1::stm_ref0::o_broadcastO.0 -> (Responds|||Run); Main

--Main = AgSwR::AggregationSoftware::ctrl_ref1::stm_ref0::registerRead.AgSwR::AggregationSoftware::ctrl_ref1::stm_ref0::i_broadcast.true.Communication_id -> (Responds|||Run); Main
within
Main

assert Spec1\{|AgSwR::AggregationSoftware::ctrl_ref1::stm_ref0::registerRead.
 AgSwR::AggregationSoftware::ctrl_ref1::stm_ref0::i_broadcast.
 true.1|} [F= AgSwR::AggregationSoftware::D__(1,1,1)\diff(Events,{|AgSwR::AggregationSoftware::registerWrite.AgSwR::AggregationSoftware::o_receiveO.(1,1),
AgSwR::AggregationSoftware::registerRead.AgSwR::AggregationSoftware::i_broadcast.true.Communication_id,
AgSwR::AggregationSoftware::ctrl_ref1::stm_ref0::registerWrite.AgSwR::AggregationSoftware::ctrl_ref1::stm_ref0::o_broadcastO.Communication_id|})
