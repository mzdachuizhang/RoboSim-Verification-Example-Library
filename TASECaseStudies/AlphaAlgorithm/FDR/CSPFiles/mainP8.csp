transparent diamond
transparent sbisim

include "AgSwR.csp"

--------------------------------------------------------------------------------------------------------------
--The behaviour of communication should consist of a broadcast followed by a receive event.
--------------------------------------------------------------------------------------------------------------

ID = {0,1}

Communication_id = 1

Spec1 = AgSwR::AggregationSoftware::ctrl_ref1::stm_ref0::registerRead.AgSwR::AggregationSoftware::ctrl_ref1::stm_ref0::i_broadcast.true?x:diff(ID,{Communication_id}) -> 
     AgSwR::AggregationSoftware::ctrl_ref1::stm_ref0::registerRead.AgSwR::AggregationSoftware::ctrl_ref1::stm_ref0::i_receive.true.(x,Communication_id) ->
     AgSwR::AggregationSoftware::ctrl_ref1::stm_ref0::registerWrite.AgSwR::AggregationSoftware::ctrl_ref1::stm_ref0::o_broadcastO.Communication_id ->
     AgSwR::AggregationSoftware::ctrl_ref1::stm_ref0::registerWrite.AgSwR::AggregationSoftware::ctrl_ref1::stm_ref0::o_receiveO.(x,Communication_id) -> Spec1
     
assert Spec1[F=AgSwR::AggregationSoftware::D__(1,1,1,1)\diff(Events,{|AgSwR::AggregationSoftware::ctrl_ref1::stm_ref0::registerRead.AgSwR::AggregationSoftware::ctrl_ref1::stm_ref0::i_broadcast.true.Communication_id,
AgSwR::AggregationSoftware::ctrl_ref1::stm_ref0::registerRead.AgSwR::AggregationSoftware::ctrl_ref1::stm_ref0::i_receive.true.(Communication_id,1),
AgSwR::AggregationSoftware::ctrl_ref1::stm_ref0::registerWrite.AgSwR::AggregationSoftware::ctrl_ref1::stm_ref0::o_broadcastO.Communication_id,
 AgSwR::AggregationSoftware::ctrl_ref1::stm_ref0::registerWrite.AgSwR::AggregationSoftware::ctrl_ref1::stm_ref0::o_receiveO.(0,1)|}) 
