-- generate --

-- generate nat
nametype core_nat = {calc_type_min(Union(
			{{1},{0..2},{0..2},{1},{1},{0},{0},{0},{1},{0},{0},{1},{1}}))..calc_type_max(Union({{1},{0..2},{0..2},{1},{1},{0},{0},{0},{1},{0},{0},{1},{1}}))} --{0..2}

-- generate const_RSCC_CommunicationC_stm_ref0_id
const_RSCC_CommunicationC_stm_ref0_id = 0

-- OPERATION CONSTANTS

-- BASIC TYPES

-- generate string
nametype core_string = LSeq(Char,2)

-- generate RSMov_move_BOUND
RSMov_move_BOUND = 2

-- MODULE CONSTANTS

-- CONTROLLER CONSTANTS

-- STATEMACHINE CONSTANTS

-- generate real
nametype core_real = {calc_type_min(Union(
			{{ -2..2},{ -2..2},{4},{ -2..2},{1},{0..2},{0..2},{ -2..2},{ -2..2},{ -2..2},{1},{1},{0},{0},{0},{1},{0},{0},{1},{1}}))..calc_type_max(Union({{ -2..2},{ -2..2},{4},{ -2..2},{1},{0..2},{0..2},{ -2..2},{ -2..2},{ -2..2},{1},{1},{0},{0},{0},{1},{0},{0},{1},{1}}))} -- { -2..2}

-- BASIC FUNCTIONS

-- generate int
nametype core_int = {calc_type_min(Union(
			{{1},{0..2},{0..2},{1},{1},{0},{0},{0},{1},{0},{0},{1},{1}}))..calc_type_max(Union({{1},{0..2},{0..2},{1},{1},{0},{0},{0},{1},{0},{0},{1},{1}}))} --{ -2..2}

-- generate -- OPERATION BOUNDS

-- generate const_RSC_Communication_id
const_RSC_Communication_id = 0

-- generate Div
Div(e1,e2,T) = if member(e1/e2,T) then e1/e2 else e1

-- generate cycle_AgSwR_AggregationSoftware_AggregationSoftware
cycle_AgSwR_AggregationSoftware_AggregationSoftware = 1

-- generate Neg
Neg(e1,T) = if member(-e1,T) then -e1 else e1

-- generate RSMov_random
RSMov_random() = 0
-- CYCLE DEFINITIONS

-- generate cycle_RSCC_CommunicationC_CommunicationC
cycle_RSCC_CommunicationC_CommunicationC = 1

-- generate boolean
nametype core_boolean = Bool

-- generate Mult
Mult(e1,e2,T) = if member(e1*e2,T) then e1*e2 else e1

-- generate RSMov_floor
RSMov_floor(x) = 0

-- generate cycle_RSMC_MovementC_MovementC
cycle_RSMC_MovementC_MovementC = 1

-- generate Modulus
Modulus(e1,e2,T) = if member(e1%e2,T) then e1%e2 else e1

-- generate cycle_RSC_Communication_Communication
cycle_RSC_Communication_Communication = 1

-- generate cycle_RSMov_Movement_Movement
cycle_RSMov_Movement_Movement = 1

-- generate ID
nametype RSC_ID = {0,1}

-- generate Plus
Plus(e1,e2,T) = if member(e1+e2,T) then e1+e2 else e1

-- generate Minus
Minus(e1,e2,T) = if member(e1-e2,T) then e1-e2 else e1

