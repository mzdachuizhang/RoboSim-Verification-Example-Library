module RSCC
exports


module CommunicationC
exports

	transparent diamond
	transparent sbisim
	transparent chase

	-- declaring channels
	-- allInputs = inputs_evars? false
	-- allOutputs = outputs_evars? false
	
	-- inputs, evars, rvars and outputs as calculated internally
	-- outputs = {
	--	(CommunicationC::broadcastO,stm_ref0::broadcastO),
	--	(CommunicationC::robots,stm_ref0::robots),
	--	(CommunicationC::receiveO,stm_ref0::receiveO)
	--	 }
	-- inputs = {
	--	(CommunicationC::receive,stm_ref0::receive),
	--	(CommunicationC::broadcast,stm_ref0::broadcast)
	--	 }
	-- evars = {}
	-- dvars = {}
	
	-- declaring registerRead/Write datatypes
	datatype RegisterDataInput = i_receive.Bool.{(x0__,x1__) | x0__ <- RSC_ID,x1__ <- RSC_ID}
		| i_broadcast.Bool.RSC_ID
	
	datatype RegisterDataOutput = o_broadcastO.RSC_ID
		| o_robots.core_nat
		| o_receiveO.{(x0__,x1__) | x0__ <- RSC_ID,x1__ <- RSC_ID}
		| o_receive.{(x0__,x1__) | x0__ <- RSC_ID,x1__ <- RSC_ID}
		| o_broadcast.RSC_ID
	
	
	nametype RegisterOutputs = {|
	o_broadcastO,
	o_robots,
	o_receiveO|}
	
	nametype RegisterInputs = {|
	i_receive,
	i_broadcast|}
	
	channel registerRead 	: RegisterDataInput
	channel registerWrite 	: RegisterDataOutput
	
	channel endexec, terminate
	
	
	-- declaring call and ret events for undefined operations
	
	
	
	-- (Rule 8) cycleController(...) : CSPProcess
	datatype SOutputEvents = SOutput_broadcastO
		| SOutput_robots
		| SOutput_receiveO
	
	DVarsEvents = {}
	
	EVarsEvents = {}
	
	cycleController(id__,cycle_RSCC_CommunicationC_CommunicationC,
			    const_RSCC_CommunicationC_stm_ref0_id) =
	let
				
		project_stm_ref0(stm_ref0::o_broadcastO.x__) = SOutput_broadcastO
		project_stm_ref0(stm_ref0::o_robots.x__) = SOutput_robots
		project_stm_ref0(stm_ref0::o_receiveO.x__) = SOutput_receiveO
	
		connected_stm_ref0(stm_ref0::o_broadcastO.x__) = true
		connected_stm_ref0(stm_ref0::o_robots.x__) = true
		connected_stm_ref0(stm_ref0::o_receiveO.x__) = true
		connected_stm_ref0(_) = false
	
		lift_stm_ref0(stm_ref0::o_broadcastO.x__) = o_broadcastO.x__
		lift_stm_ref0(stm_ref0::o_robots.x__) = o_robots.x__
		lift_stm_ref0(stm_ref0::o_receiveO.x__) = o_receiveO.x__
		
		CycleController =
			-- read inputs from the controller and pass to state machines
			(
			((registerRead.i_receive?x__ ->
				((stm_ref0::registerRead.stm_ref0::i_receive!x__ -> SKIP)))
				|||
			(registerRead.i_broadcast?x__ ->
				((stm_ref0::registerRead.stm_ref0::i_broadcast!x__ -> SKIP))))
			-- ensure state machines read the values being communicated via evars
					);
			-- synchronize on events related to evars to erase memory
			-- collect outputs, and monitor termination of the cycle, by all controllers
			(CollectOutputs(SOutputEvents) [| {endexec} |] Monitor);
			-- wait for the cycleDef period
			(wait(cycle_RSCC_CommunicationC_CommunicationC) [] terminate -> SKIP);
			-- recurse
			CycleController
			
									
		CollectOutputs(sout) =
			(stm_ref0::registerWrite?outp:{ outp | outc <- diff(sout,union(EVarsEvents,DVarsEvents)), outp <- stm_ref0::RegisterDataOutput, connected_stm_ref0(outp), project_stm_ref0(outp) == outc}
					-> registerWrite!lift_stm_ref0(outp)
						-> CollectOutputs(diff(sout,{project_stm_ref0(outp)}))
			[]
			endexec -> SKIP
			)
	
		Monitor = 
			(	 (stm_ref0::endexec -> SKIP)); endexec -> SKIP
	within
		CycleController
	
	-- (Rule 5) memoryComp(...) : CSPProcess
	memoryComp(id__,
			    const_RSCC_CommunicationC_stm_ref0_id) = (
		STOP)
	
	
	module stm_ref0
	exports
		-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
		external prioritise
		transparent wbisim
		transparent sbisim
		transparent dbisim
	
		-- flow channels
		channel internal__ : TIDS
		channel enteredV, enterV, exitV, exitedV : SIDS
		channel enter, entered: SIDS.SIDS
		channel exit,exited: SIDS.SIDS
		
		-- RoboSim channels
		channel endexec
		channel endexec__ : TIDS
		channel startexec
		channel terminate
		
		-- declaring registerRead/Write datatypes
		datatype RegisterDataInput = i_broadcast.Bool.RSC_ID
			| i_receive.Bool.{(x0__,x1__) | x0__ <- RSC_ID,x1__ <- RSC_ID}
		
		
		datatype RegisterDataOutput = o_receiveO.{(x0__,x1__) | x0__ <- RSC_ID,x1__ <- RSC_ID}
			| o_broadcastO.RSC_ID
			| o_robots.core_nat
		
		
		nametype RegisterOutputs = {|
		o_receiveO,
		o_broadcastO,
		o_robots|}
		
		nametype RegisterInputs = {|
		i_broadcast,
		i_receive|}
		
		channel registerRead 	: RegisterDataInput
		channel registerWrite 	: RegisterDataOutput
		
		-- variable channels
		channel get_x, set_x: {(x0__,x1__) | x0__ <- RSC_ID,x1__ <- RSC_ID}
		channel get_y, set_y: RSC_ID
		channel get_neighs, set_neighs: Set(RSC_ID)
		channel get_broadcast : Bool.RSC_ID
		channel get_receive : Bool.{(x0__,x1__) | x0__ <- RSC_ID,x1__ <- RSC_ID}
		
		-- local variable channels for defined operations that are required by the state machine
		
		-- declaring state machine events
		
		-- declaring call and ret events for undefined operations
		
		EndExecs = {| endexec__, endexec
		 |}
		
		Transitions = {| internal__
		 |}
		
	
		-- Only the undefined operations are declared here.
		-- If the state machine is in isolation, all required operations will be undefined.
		-- If it is in the context of a controller, the required operations not provided by the
		-- controller will be declared here, and the defined operations will be defined in the
		-- context of the Controller module, and therefore within scope of the state machien module.
		
		
		-- definition of functions used to expose flow channels
		ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
						   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
						   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
						   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
							 
		ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
		ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
		ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
		ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
		ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
					[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
					[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
					[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
		
		-- declaring identifiers of state and final states
		datatype SIDS = SID_Communication
		              | SID_Communication_SBroadcast
		              | SID_Communication_SReceive
		              | SID_Communication_NewCycle
		
		-- declaring identifiers of transitions
		datatype TIDS = NULLTRANSITION__
		              | TID_Communication_t0
		              | TID_Communication_t1
		              | TID_Communication_t2
		              | TID_Communication_t3
		              | TID_Communication_t4
		              | TID_Communication_t5
		              | TID_Communication_t6
		              | TID_Communication_t7
		              | TID_Communication_t8
		              | TID_Communication_t9
		
		-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
		
		ITIDS = {
			TID_Communication_t1,	TID_Communication_t2,	TID_Communication_t7
		}
		
		int_int = {|
			internal__.TID_Communication_t1,
			internal__.TID_Communication_t2,
			internal__.TID_Communication_t7
		|}
			
		
		internal_events = {|enter,entered,exit,exited|}
		
		-- declaring all states
		CS_Communication_SBroadcast_sync = {|
			enter.y____.x____, 
			entered.y____.x____, 
			exit.y____.x____, 
			exited.y____.x____,
			enter.x____.y____, 
			entered.x____.y____, 
			exit.x____.y____, 
			exited.x____.y____ |
			x____ <- {SID_Communication_SBroadcast,SID_Communication_SReceive,SID_Communication_NewCycle},
			y____ <- {SID_Communication_SBroadcast}
		|}
		
		
		Communication_SBroadcast_triggers = {|
			internal__.TID_Communication_t1,
			internal__.TID_Communication_t8,
			internal__.TID_Communication_t6,
			internal__.TID_Communication_t9,
			internal__.TID_Communication_t4,
			internal__.TID_Communication_t5,
			internal__.TID_Communication_t2,
			internal__.TID_Communication_t7,
			internal__.TID_Communication_t3
		|}
		
		State_Communication_SBroadcast(id__,
				    const_RSC_Communication_id) = let
			T_Communication_t1(id__,
					    const_RSC_Communication_id) = internal__!TID_Communication_t1 ->  exit.SID_Communication_SBroadcast.SID_Communication_SBroadcast -> SKIP;
								SKIP;exited.SID_Communication_SBroadcast.SID_Communication_SBroadcast -> SKIP;
								DoClockReset({clockReset.CLID_RCC});true & (set_neighs!{} -> SKIP);enter!SID_Communication_SBroadcast!SID_Communication_SReceive -> entered!SID_Communication_SBroadcast!SID_Communication_SReceive ->
								State_Communication_SBroadcast(id__,
										    const_RSC_Communication_id)
			State_Communication_SBroadcast_execute(id__,o____) = registerWrite.o_broadcastO.0 -> SKIP; 
				entered!o____!SID_Communication_SBroadcast ->
				(SKIP; STOP /\ (
					T_Communication_t1(id__,
							    const_RSC_Communication_id)
					[]
					internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Communication_t1,TID_Communication_t8,TID_Communication_t6,TID_Communication_t9,TID_Communication_t4,TID_Communication_t5,TID_Communication_t2,TID_Communication_t7,TID_Communication_t3}) -> exit?y____:diff(SIDS,{SID_Communication_SBroadcast})!SID_Communication_SBroadcast -> (
							SKIP;
							exited!y____!SID_Communication_SBroadcast -> SKIP);
							State_Communication_SBroadcast(id__,
									    const_RSC_Communication_id)
				))
		within
			enter?x____:diff(SIDS,{SID_Communication_SBroadcast})!SID_Communication_SBroadcast -> (State_Communication_SBroadcast_execute(id__,x____))
		
		CS_Communication_SReceive_sync = {|
			enter.y____.x____, 
			entered.y____.x____, 
			exit.y____.x____, 
			exited.y____.x____,
			enter.x____.y____, 
			entered.x____.y____, 
			exit.x____.y____, 
			exited.x____.y____ |
			x____ <- {SID_Communication_SBroadcast,SID_Communication_SReceive,SID_Communication_NewCycle},
			y____ <- {SID_Communication_SReceive}
		|}
		
		
		Communication_SReceive_triggers = {|
			internal__.TID_Communication_t8,
			internal__.TID_Communication_t6,
			internal__.TID_Communication_t1,
			internal__.TID_Communication_t9,
			internal__.TID_Communication_t4,
			internal__.TID_Communication_t5,
			internal__.TID_Communication_t2,
			internal__.TID_Communication_t7,
			internal__.TID_Communication_t3
		|}
		
		State_Communication_SReceive(id__,
				    const_RSC_Communication_id) = let
			T_Communication_t2(id__,
					    const_RSC_Communication_id) = internal__!TID_Communication_t2 ->  exit.SID_Communication_SReceive.SID_Communication_SReceive -> SKIP;
								SKIP;exited.SID_Communication_SReceive.SID_Communication_SReceive -> SKIP;
								J_Communication_j0(id__,
										    const_RSC_Communication_id)
			J_Communication_j2(id__,
					    const_RSC_Communication_id) = (
						(internal__!TID_Communication_t9 -> enter!SID_Communication_SReceive!SID_Communication_NewCycle -> entered!SID_Communication_SReceive!SID_Communication_NewCycle ->
						State_Communication_SReceive(id__,
								    const_RSC_Communication_id)
						)
						)
			J_Communication_j1(id__,
					    const_RSC_Communication_id) = (
						(internal__!TID_Communication_t5 -> get_broadcast?b__?x__ -> set_y!x__ -> SKIP
						;J_Communication_j2(id__,
								    const_RSC_Communication_id))[]
						(internal__!TID_Communication_t6 -> get_broadcast?b__?x__ -> set_y!x__ -> SKIP
						;get_y?y -> registerWrite.o_receiveO.(y,0) -> SKIP;J_Communication_j2(id__,
								    const_RSC_Communication_id))
						)
			J_Communication_j0(id__,
					    const_RSC_Communication_id) = (
						(internal__!TID_Communication_t3 -> get_receive?b__?x__ -> set_x!x__ -> SKIP
						;get_x?x -> get_neighs?neighs -> true & (set_neighs!set_toolkit_union(neighs,{tuple2_2(x)}) -> SKIP);J_Communication_j1(id__,
								    const_RSC_Communication_id))[]
						(internal__!TID_Communication_t4 -> get_receive?b__?x__ -> set_x!x__ -> SKIP
						;J_Communication_j1(id__,
								    const_RSC_Communication_id))[]
						(internal__!TID_Communication_t8 -> registerWrite.o_robots.1 -> SKIP;enter!SID_Communication_SReceive!SID_Communication_SBroadcast -> entered!SID_Communication_SReceive!SID_Communication_SBroadcast ->
						State_Communication_SReceive(id__,
								    const_RSC_Communication_id)
						)
						)
			State_Communication_SReceive_execute(id__,o____) = SKIP; 
				entered!o____!SID_Communication_SReceive ->
				(SKIP; STOP /\ (
					T_Communication_t2(id__,
							    const_RSC_Communication_id)
					[]
					internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Communication_t8,TID_Communication_t6,TID_Communication_t1,TID_Communication_t9,TID_Communication_t4,TID_Communication_t5,TID_Communication_t2,TID_Communication_t7,TID_Communication_t3}) -> exit?y____:diff(SIDS,{SID_Communication_SReceive})!SID_Communication_SReceive -> (
							SKIP;
							exited!y____!SID_Communication_SReceive -> SKIP);
							State_Communication_SReceive(id__,
									    const_RSC_Communication_id)
				))
		within
			enter?x____:diff(SIDS,{SID_Communication_SReceive})!SID_Communication_SReceive -> (State_Communication_SReceive_execute(id__,x____))
		
		CS_Communication_NewCycle_sync = {|
			enter.y____.x____, 
			entered.y____.x____, 
			exit.y____.x____, 
			exited.y____.x____,
			enter.x____.y____, 
			entered.x____.y____, 
			exit.x____.y____, 
			exited.x____.y____ |
			x____ <- {SID_Communication_SBroadcast,SID_Communication_SReceive,SID_Communication_NewCycle},
			y____ <- {SID_Communication_NewCycle}
		|}
		
		
		Communication_NewCycle_triggers = {|
			internal__.TID_Communication_t8,
			internal__.TID_Communication_t6,
			internal__.TID_Communication_t1,
			internal__.TID_Communication_t9,
			internal__.TID_Communication_t4,
			internal__.TID_Communication_t5,
			internal__.TID_Communication_t2,
			internal__.TID_Communication_t7,
			internal__.TID_Communication_t3
		|}
		
		State_Communication_NewCycle(id__,
				    const_RSC_Communication_id) = let
			T_Communication_t7(id__,
					    const_RSC_Communication_id) = endexec__.TID_Communication_t7 -> startexec ->  (exit.SID_Communication_NewCycle.SID_Communication_NewCycle -> SKIP;
								SKIP;exited.SID_Communication_NewCycle.SID_Communication_NewCycle -> SKIP;
								J_Communication_j0(id__,
										    const_RSC_Communication_id))
			J_Communication_j2(id__,
					    const_RSC_Communication_id) = (
						(internal__!TID_Communication_t9 -> enter!SID_Communication_NewCycle!SID_Communication_NewCycle -> State_Communication_NewCycle_execute(id__,SID_Communication_NewCycle)
						)
						)
			J_Communication_j1(id__,
					    const_RSC_Communication_id) = (
						(internal__!TID_Communication_t5 -> get_broadcast?b__?x__ -> set_y!x__ -> SKIP
						;J_Communication_j2(id__,
								    const_RSC_Communication_id))[]
						(internal__!TID_Communication_t6 -> get_broadcast?b__?x__ -> set_y!x__ -> SKIP
						;get_y?y -> registerWrite.o_receiveO.(y,0) -> SKIP;J_Communication_j2(id__,
								    const_RSC_Communication_id))
						)
			J_Communication_j0(id__,
					    const_RSC_Communication_id) = (
						(internal__!TID_Communication_t3 -> get_receive?b__?x__ -> set_x!x__ -> SKIP
						;get_x?x -> get_neighs?neighs -> true & (set_neighs!set_toolkit_union(neighs,{tuple2_2(x)}) -> SKIP);J_Communication_j1(id__,
								    const_RSC_Communication_id))[]
						(internal__!TID_Communication_t4 -> get_receive?b__?x__ -> set_x!x__ -> SKIP
						;J_Communication_j1(id__,
								    const_RSC_Communication_id))[]
						(internal__!TID_Communication_t8 -> registerWrite.o_robots.1 -> SKIP;enter!SID_Communication_NewCycle!SID_Communication_SBroadcast -> entered!SID_Communication_NewCycle!SID_Communication_SBroadcast ->
						State_Communication_NewCycle(id__,
								    const_RSC_Communication_id)
						)
						)
			State_Communication_NewCycle_execute(id__,o____) = SKIP; 
				entered!o____!SID_Communication_NewCycle ->
				(SKIP; STOP /\ (
					T_Communication_t7(id__,
							    const_RSC_Communication_id)
					[]
					internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Communication_t8,TID_Communication_t6,TID_Communication_t1,TID_Communication_t9,TID_Communication_t4,TID_Communication_t5,TID_Communication_t2,TID_Communication_t7,TID_Communication_t3}) -> exit?y____:diff(SIDS,{SID_Communication_NewCycle})!SID_Communication_NewCycle -> (
							SKIP;
							exited!y____!SID_Communication_NewCycle -> SKIP);
							State_Communication_NewCycle(id__,
									    const_RSC_Communication_id)
				))
		within
			enter?x____:diff(SIDS,{SID_Communication_NewCycle})!SID_Communication_NewCycle -> (State_Communication_NewCycle_execute(id__,x____))
		
		
		I_Communication_i0(id__,
				    const_RSC_Communication_id) = let
			T_Communication_t0(id__,
					    const_RSC_Communication_id) = internal__!TID_Communication_t0 -> enter!SID_Communication!SID_Communication_SBroadcast -> entered!SID_Communication!SID_Communication_SBroadcast ->
			SKIP
		within
			T_Communication_t0(id__,
					    const_RSC_Communication_id)
		
		
		State_Communication_SBroadcast_R(id__,
				    const_RSC_Communication_id) = 
			State_Communication_SBroadcast(id__,
					    const_RSC_Communication_id)
				[|diff(int_int,Communication_SBroadcast_triggers)|]
			SKIP
				 		
		State_Communication_SReceive_R(id__,
				    const_RSC_Communication_id) = 
			State_Communication_SReceive(id__,
					    const_RSC_Communication_id)
				[|diff(int_int,Communication_SReceive_triggers)|]
			SKIP
				 		
		State_Communication_NewCycle_R(id__,
				    const_RSC_Communication_id) = 
			State_Communication_NewCycle(id__,
					    const_RSC_Communication_id)
				[|diff(int_int,Communication_NewCycle_triggers)|]
			SKIP
				 		
			
		STM(id__,
				    const_RSC_Communication_id) = 
			let
				Ending = endexec -> (startexec -> Ending [] terminate -> SKIP)
			within
				startexec -> 
					(
						(
							(
							I_Communication_i0(id__,
									    const_RSC_Communication_id)
								[|
									{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
										x____ <- diff(SIDS,{SID_Communication_SBroadcast,SID_Communication_SReceive,SID_Communication_NewCycle}),
										y____ <- {SID_Communication_SBroadcast,SID_Communication_SReceive,SID_Communication_NewCycle}
								|}|]
							(
								State_Communication_SBroadcast_R(id__,
										    const_RSC_Communication_id)
									[|inter(CS_Communication_SBroadcast_sync,union(CS_Communication_SReceive_sync,CS_Communication_NewCycle_sync))|]
								(
									State_Communication_SReceive_R(id__,
											    const_RSC_Communication_id)
										[|inter(CS_Communication_SReceive_sync,CS_Communication_NewCycle_sync)|]
									State_Communication_NewCycle_R(id__,
											    const_RSC_Communication_id)
								)
							)
							) [|{|terminate|}|> SKIP
						) \ {|terminate|}
					) ; Ending
		
		-- optimized memory process
		channel getV_x: {(x0__,x1__) | x0__ <- RSC_ID,x1__ <- RSC_ID}
		channel getV_y: RSC_ID
		channel getV_neighs: Set(RSC_ID)
		channel getV_broadcast: Bool.RSC_ID
		channel getV_receive: Bool.{(x0__,x1__) | x0__ <- RSC_ID,x1__ <- RSC_ID}
		
		-- individual memory processes
		
			Memory_x(x__) = ( 
				get_x!x__ -> Memory_x(x__)
				[]
				getV_x!x__ -> Memory_x(x__)
				[]
				set_x?x__ -> Memory_x(x__)
			)
		
			Memory_y(x__) = ( 
				get_y!x__ -> Memory_y(x__)
				[]
				getV_y!x__ -> Memory_y(x__)
				[]
				set_y?x__ -> Memory_y(x__)
			)
		
			Memory_neighs(x__) = ( 
				get_neighs!x__ -> Memory_neighs(x__)
				[]
				getV_neighs!x__ -> Memory_neighs(x__)
				[]
				set_neighs?x__ -> Memory_neighs(x__)
			)
		
		Memory_WC_TID_Communication_t3_0(x__) = (
			getWC.WC_TID_Communication_t3_0_ID!x__ -> Memory_WC_TID_Communication_t3_0(x__)
			[]
			setWC.WC_TID_Communication_t3_0_ID?x__ -> Memory_WC_TID_Communication_t3_0(x__)
		)
		
		Memory_WC_TID_Communication_t4_0(x__) = (
			getWC.WC_TID_Communication_t4_0_ID!x__ -> Memory_WC_TID_Communication_t4_0(x__)
			[]
			setWC.WC_TID_Communication_t4_0_ID?x__ -> Memory_WC_TID_Communication_t4_0(x__)
		)
		
			Memory_broadcast(x__) = (
				get_broadcast!x__ -> Memory_broadcast(x__)
				[]
				getV_broadcast!x__ -> Memory_broadcast(x__)
				[]
				registerRead.i_broadcast?x__ -> Memory_broadcast(x__)
			)
		
			Memory_receive(x__) = (
				get_receive!x__ -> Memory_receive(x__)
				[]
				getV_receive!x__ -> Memory_receive(x__)
				[]
				registerRead.i_receive?x__ -> Memory_receive(x__)
			)
		
		-- processes that read variables and offer transitions
				
		MemoryTransitions(id__,
			 x,
			 y,
			 neighs,
			 WC_TID_Communication_t3_0,
			 WC_TID_Communication_t4_0,
			 const_RSC_Communication_id,
			 broadcast,
			 receive) = (
			startexec -> SKIP
		
			[]	internal__!TID_Communication_t0 -> SKIP
			[]
			internal__!TID_Communication_t1 -> SKIP
			[]
			internal__!TID_Communication_t2 -> SKIP
			[]
			((member(receive,{true.x | x <- {(x0__,x1__) | x0__ <- RSC_ID,x1__ <- RSC_ID}, ((tuple2_1(x)==const_RSC_Communication_id))}) and WC_TID_Communication_t3_0))&(internal__!TID_Communication_t3 -> SKIP)
			[]
			((not ((((((member(receive,{true.x | x <- {(x0__,x1__) | x0__ <- RSC_ID,x1__ <- RSC_ID}, ((tuple2_1(x)==const_RSC_Communication_id))})) and (WC_TID_Communication_t3_0))) or (WC_TID_Communication_t4_0))))))&(internal__!TID_Communication_t4 -> SKIP)
			[]
			((not ((((member(broadcast,{true.y | y <- RSC_ID})) and (WC_TID_Communication_t3_0))))))&(internal__!TID_Communication_t5 -> SKIP)
			[]
			((member(broadcast,{true.y | y <- RSC_ID}) and WC_TID_Communication_t3_0))&(internal__!TID_Communication_t6 -> SKIP)
			[]
			endexec__!TID_Communication_t7 -> SKIP
			[]
			(WC_TID_Communication_t4_0)&(internal__!TID_Communication_t8 -> SKIP)
			[]
			internal__!TID_Communication_t9 -> SKIP
		
		 	[]
		 	 	set_x?x__ -> SKIP
		 	[]
		 	set_y?x__ -> SKIP
		 	[]
		 	set_neighs?x__ -> SKIP
		
		 	[]
		 	 	setWC.WC_TID_Communication_t3_0_ID?x__ -> SKIP
		 	[]
		 	setWC.WC_TID_Communication_t4_0_ID?x__ -> SKIP
		 			 			 	
		 	)
		MemoryTransitions_Communication(id__,
			 const_RSC_Communication_id) =
			(
			getV_x?x ->	
			getV_y?y ->	
			getV_neighs?neighs ->	
			getWC.WC_TID_Communication_t3_0_ID?WC_TID_Communication_t3_0 ->	
			getWC.WC_TID_Communication_t4_0_ID?WC_TID_Communication_t4_0 ->	
			getV_broadcast?broadcast ->	
			getV_receive?receive ->
			 MemoryTransitions(id__,
			 	 x,
			 	 y,
			 	 neighs,
			 	 WC_TID_Communication_t3_0,
			 	 WC_TID_Communication_t4_0,
			 	 const_RSC_Communication_id,
			 	 broadcast,
			 	 receive);
			 MemoryTransitions_Communication(id__,
			 	 const_RSC_Communication_id)
			)
		
		-- synchronisation, hiding and process sets 
		MemoryVariablesProcesses_Communication = Union(
			{
				{
					Memory_x((0,0)),
					Memory_y(0),
					Memory_neighs({}),
					Memory_WC_TID_Communication_t3_0(false),
					Memory_WC_TID_Communication_t4_0(false),
					Memory_broadcast(false.0),
					Memory_receive(false.(0,0))
				}
			}
		)
		
		MemoryVariablesSyncSet = Union({
			{|
				getV_broadcast,
				setWC.WC_TID_Communication_t4_0_ID,
				setWC,
				getWC.WC_TID_Communication_t3_0_ID,
				getV_receive,
				getV_x,
				getV_y,
				getWC.WC_TID_Communication_t4_0_ID,
				getV_neighs,
				set_neighs,
				set_y,
				setWC.WC_TID_Communication_t3_0_ID,
				set_x
			|}	
		})
		
		MemoryVariablesHideSet = Union({
			{|
				getV_x,
				getV_broadcast,
				getV_y,
				getV_neighs,
				getWC,
				getV_receive
			|}
		})
		
		-- combined individual memory processes
		MemoryVariables = ||| P : MemoryVariablesProcesses_Communication @ P
		
		-- complete memory process
		MemoryN(id__,
			 const_RSC_Communication_id) = 
			(MemoryVariables 
			 [| MemoryVariablesSyncSet |] 
			 (	startexec -> wbisim(MemoryTransitions_Communication(id__,
			 	 const_RSC_Communication_id))
			 	[| union({|startexec|},union(Transitions,diff(EndExecs,{endexec}))) |]
			 	-- The following process is an equivalent way to specify that between endexec
			 	-- and startexec no events in the set Transitions are available, thus preventing
			 	-- the state machine from performing transitions in between. Note that there is
			 	-- no synchronisation on the single 'endexec' event itself, because this only
			 	-- arises from an action, and the memory does not interfere with events in
			 	-- actions.
			 	(let
			 		TransitionController = startexec -> (RUN(Transitions) 
			 											 /\ ([] e : EndExecs @ e -> TransitionController))
			 	within 
			 		TransitionController)
			 	
			 	-- It isn't part of MemoryTransitions_ itself, because such a process would need
			 	-- to permit updates to setWC events, emanating from processes controlling clocks.
			 	-- Currently the MemoryTransitions_ process of a software operation called 
			 	-- within this state machine is copied into this process. So to incorporate the
			 	-- control below in such a process would require either:
			 	--
			 	-- (1) knowing about the clocks of every state machine that could call it, which
			 	-- 	   is not compositional;
			 	-- (2) not copying the process, but generating the transition choices explicitly.
			 	--
			 )
			) \ MemoryVariablesHideSet
		
		-- optimised memory
		-- Sets of named elements identified according to transition conditions:
		-- {}
		-- {x,id,receive,WC_TID_Communication_t3_0,WC_TID_Communication_t4_0}
		-- {broadcast,WC_TID_Communication_t3_0}
		-- Summary of all identified named elements:
		-- {
		-- x
		-- y
		-- neighs
		-- id
		-- receive
		-- broadcast
		-- WC_TID_Communication_t3_0
		-- WC_TID_Communication_t4_0
		-- }
		
		-- Allocation plan:
		-- 0:{}
		--	=> {
		--		TID_Communication_t0,
		--		TID_Communication_t1,
		--		TID_Communication_t2,
		--		TID_Communication_t7,
		--		TID_Communication_t9}
		-- 2:{x,id,receive,WC_TID_Communication_t3_0,WC_TID_Communication_t4_0}
		--	=> {
		--		TID_Communication_t8,
		--		TID_Communication_t3,
		--		TID_Communication_t4}
		-- 1:{broadcast,WC_TID_Communication_t3_0}
		--	=> {
		--		TID_Communication_t5,
		--		TID_Communication_t6}
		
		-- Memory transition processes
		MemoryTransitions_opt_0(id__) =
		(
			let
				Update = Current(id__)
				Current(id__)
				 	   = 
				 	   internal__!TID_Communication_t0 -> Update
				 	   []
				 	   internal__!TID_Communication_t1 -> Update
				 	   []
				 	   internal__!TID_Communication_t2 -> Update
				 	   []
				 	   endexec__!TID_Communication_t7 -> Update
				 	   []
				 	   internal__!TID_Communication_t9 -> Update
				 	   	 []
				 	   	 startexec -> Update
			within
				Update
		)
		MemoryTransitions_opt_2(id__,
			 const_RSC_Communication_id) =
		(
			let
				Update = 
				get_x?x ->
				get_receive?receive ->
				getWC.WC_TID_Communication_t3_0_ID?WC_TID_Communication_t3_0 ->
				getWC.WC_TID_Communication_t4_0_ID?WC_TID_Communication_t4_0 ->
				Current(id__,
					 x,
					 receive,
					 WC_TID_Communication_t3_0,
					 WC_TID_Communication_t4_0)
				Current(id__,
					 x,
					 receive,
					 WC_TID_Communication_t3_0,
					 WC_TID_Communication_t4_0)
				 	   = 
				 	   (WC_TID_Communication_t4_0)&(internal__!TID_Communication_t8 -> Update)
				 	   []
				 	   ((member(receive,{true.x | x <- {(x0__,x1__) | x0__ <- RSC_ID,x1__ <- RSC_ID}, ((tuple2_1(x)==const_RSC_Communication_id))}) and WC_TID_Communication_t3_0))&(internal__!TID_Communication_t3 -> Update)
				 	   []
				 	   ((not ((((((member(receive,{true.x | x <- {(x0__,x1__) | x0__ <- RSC_ID,x1__ <- RSC_ID}, ((tuple2_1(x)==const_RSC_Communication_id))})) and (WC_TID_Communication_t3_0))) or (WC_TID_Communication_t4_0))))))&(internal__!TID_Communication_t4 -> Update)
				 	   	 []
				 	   	 startexec -> Update
				 	   	 
				 	   	 []
				 	   	 set_x?x__ -> Update
				 	   	 []
				 	   	 
				 	   	 setWC.WC_TID_Communication_t3_0_ID?x__ -> Update
				 	   	 []
				 	   	 
				 	   	 setWC.WC_TID_Communication_t4_0_ID?x__ -> Update
			within
				Update
		)
		MemoryTransitions_opt_1(id__) =
		(
			let
				Update = 
				get_broadcast?broadcast ->
				getWC.WC_TID_Communication_t3_0_ID?WC_TID_Communication_t3_0 ->
				Current(id__,
					 broadcast,
					 WC_TID_Communication_t3_0)
				Current(id__,
					 broadcast,
					 WC_TID_Communication_t3_0)
				 	   = 
				 	   ((not ((((member(broadcast,{true.y | y <- RSC_ID})) and (WC_TID_Communication_t3_0))))))&(internal__!TID_Communication_t5 -> Update)
				 	   []
				 	   ((member(broadcast,{true.y | y <- RSC_ID}) and WC_TID_Communication_t3_0))&(internal__!TID_Communication_t6 -> Update)
				 	   	 []
				 	   	 startexec -> Update
				 	   	 
				 	   	 []
				 	   	 setWC.WC_TID_Communication_t3_0_ID?x__ -> Update
			within
				Update
		)
		
		-- Memory cell processes
		Memory_opt_x(x__) = ( 
			get_x!x__ -> Memory_opt_x(x__)
			[]
			set_x?x__ -> Memory_opt_x(x__)
		)
		Memory_opt_y(x__) = ( 
			get_y!x__ -> Memory_opt_y(x__)
			[]
			set_y?x__ -> Memory_opt_y(x__)
		)
		Memory_opt_neighs(x__) = ( 
			get_neighs!x__ -> Memory_opt_neighs(x__)
			[]
			set_neighs?x__ -> Memory_opt_neighs(x__)
		)
		Memory_opt_receive(x__) = (
			get_receive!x__ -> Memory_opt_receive(x__)
			[]
			registerRead.i_receive?x__ -> Memory_opt_receive(x__)
		)
		Memory_opt_broadcast(x__) = (
			get_broadcast!x__ -> Memory_opt_broadcast(x__)
			[]
			registerRead.i_broadcast?x__ -> Memory_opt_broadcast(x__)
		)
		Memory_opt_WC_TID_Communication_t3_0(x__) = ( 
			getWC.WC_TID_Communication_t3_0_ID!x__ -> Memory_opt_WC_TID_Communication_t3_0(x__)
			[]
			setWC.WC_TID_Communication_t3_0_ID?x__ -> Memory_opt_WC_TID_Communication_t3_0(x__)
		)
		Memory_opt_WC_TID_Communication_t4_0(x__) = ( 
			getWC.WC_TID_Communication_t4_0_ID!x__ -> Memory_opt_WC_TID_Communication_t4_0(x__)
			[]
			setWC.WC_TID_Communication_t4_0_ID?x__ -> Memory_opt_WC_TID_Communication_t4_0(x__)
		)
		
		-- Composition of memory, StateMachine and Memory transition processes
		
		MemorySTM_opt(id__,cycle_RSC_Communication_Communication,
				    const_RSC_Communication_id) =
			dbisim(
			  sbisim(Memory_opt_x((0,0))
			      	[| {|get_x,set_x|} |] 
			      	dbisim(
			      	  sbisim(Memory_opt_receive(false.(0,0))
			      	      	[| {|registerRead.i_receive,get_receive|} |] 
			      	      	dbisim(
			      	      	  sbisim(Memory_opt_WC_TID_Communication_t3_0(false)
			      	      	      	[| {|getWC.WC_TID_Communication_t3_0_ID,setWC.WC_TID_Communication_t3_0_ID|} |] 
			      	      	      	dbisim(
			      	      	      	  sbisim(Memory_opt_WC_TID_Communication_t4_0(false)
			      	      	      	      	[| {|getWC.WC_TID_Communication_t4_0_ID,setWC.WC_TID_Communication_t4_0_ID|} |] 
			      	      	      	      	sbisim(	
			      	      	      	      	  dbisim(
			      	      	      	      	    sbisim(dbisim(
			      	      	      	      	      sbisim(Memory_opt_broadcast(false.0)
			      	      	      	      	          	[| {|registerRead.i_broadcast,get_broadcast|} |] 
			      	      	      	      	          	sbisim(	
			      	      	      	      	          	  dbisim(
			      	      	      	      	          	    sbisim(sbisim(	
			      	      	      	      	          	      dbisim(
			      	      	      	      	          	        sbisim(dbisim(sbisim(Memory_opt_y(0)
			      	      	      	      	          	              	[| {|set_y,get_y|} |] 
			      	      	      	      	          	              	dbisim(sbisim(Memory_opt_neighs({})
			      	      	      	      	          	              	      	[| {|get_neighs,set_neighs|} |] 
			      	      	      	      	          	              	      	STM_core(id__,cycle_RSC_Communication_Communication,
			      	      	      	      	          	              	      			    const_RSC_Communication_id)
			      	      	      	      	          	              	      	)\ {|get_neighs,set_neighs|}
			      	      	      	      	          	              	      )
			      	      	      	      	          	              	)\ {|set_y,get_y|}
			      	      	      	      	          	              )
			      	      	      	      	          	          	  [| union({|startexec|},{|internal__.TID_Communication_t2,internal__.TID_Communication_t9,internal__.TID_Communication_t1,internal__.TID_Communication_t0,endexec__.TID_Communication_t7|}) |]
			      	      	      	      	          	          	  MemoryTransitions_opt_0(id__)
			      	      	      	      	          	          	  )\{|internal__.TID_Communication_t2,internal__.TID_Communication_t9,internal__.TID_Communication_t1,internal__.TID_Communication_t0|})
			      	      	      	      	          	          	  [[ endexec__.TID_Communication_t7 <- endexec ]]
			      	      	      	      	          	          )
			      	      	      	      	          	      	  [| union({|startexec|},{|internal__.TID_Communication_t5,internal__.TID_Communication_t6,setWC.WC_TID_Communication_t3_0_ID|}) |]
			      	      	      	      	          	      	  MemoryTransitions_opt_1(id__)
			      	      	      	      	          	      	  )\{|internal__.TID_Communication_t5,internal__.TID_Communication_t6|})
			      	      	      	      	          	      )
			      	      	      	      	          	) \ {|get_broadcast|}
			      	      	      	      	          )
			      	      	      	      	      	  [| union({|startexec|},{|internal__.TID_Communication_t4,internal__.TID_Communication_t3,setWC.WC_TID_Communication_t4_0_ID,internal__.TID_Communication_t8,setWC.WC_TID_Communication_t3_0_ID,set_x|}) |]
			      	      	      	      	      	  MemoryTransitions_opt_2(id__,
			      	      	      	      	      	  	 const_RSC_Communication_id)
			      	      	      	      	      	  )\{|internal__.TID_Communication_t4,internal__.TID_Communication_t3,internal__.TID_Communication_t8|})
			      	      	      	      	      )
			      	      	      	      	) \ {|getWC.WC_TID_Communication_t4_0_ID,setWC.WC_TID_Communication_t4_0_ID|}
			      	      	      	      )
			      	      	      	) \ {|getWC.WC_TID_Communication_t3_0_ID,setWC.WC_TID_Communication_t3_0_ID|}
			      	      	      )
			      	      	) \ {|get_receive|}
			      	      )
			      	) \ {|get_x,set_x|}
			      )
		
		-- main process
		MachineMemorySyncSet = Union({
			union(
				union(
					{|get_x,set_x,
					get_y,set_y,
					get_neighs,set_neighs|},
					union({|get_broadcast,
					get_receive|},
						  {||}
						 )
				)
					
				,
				{|internal__.TID_Communication_t0,
				internal__.TID_Communication_t1,
				internal__.TID_Communication_t2,
				internal__.TID_Communication_t3,
				internal__.TID_Communication_t4,
				internal__.TID_Communication_t5,
				internal__.TID_Communication_t6,
				endexec__.TID_Communication_t7,
				internal__.TID_Communication_t8,
				internal__.TID_Communication_t9|}
			),
			{|deadline|},
			WCresets
		})
		
		MachineMemoryHidingSet = Union({
			union(
				{|get_x,set_x,
				get_y,set_y,
				get_neighs,set_neighs|},
				union({|get_broadcast,
				get_receive|},
					  {||})
			)
			,
			{|deadline|}
		})
		
		MachineInternalEvents = {|
			internal__
		|}
	
		STM_core(id__,cycle_RSC_Communication_Communication,
				    const_RSC_Communication_id) =
			sbisim(	
				dbisim(
				(wbisim(STM(id__,
						    const_RSC_Communication_id))
				[| union(WCsync,WCresets) |]
				Clocks(id__,
						    const_RSC_Communication_id))\WCresets
				)
				[| union({|startexec|},union(Transitions,EndExecs)) |]
				(let
					TransitionController = startexec -> (RUN(Transitions) 
						 /\ ([] e : EndExecs @ e -> TransitionController))
				within 
				TransitionController))
			[| {| endexec,endexec__
				,registerWrite,startexec,terminate,tock |} |]
			cycle(cycle_RSC_Communication_Communication)
		
		
		-- optimized main process
		AUX_opt(id__,cycle_RSC_Communication_Communication,
				    const_RSC_Communication_id) =
			prioritise(
			  dbisim(
				(MemorySTM_opt(id__,cycle_RSC_Communication_Communication,
						    const_RSC_Communication_id))
				\union(union(MachineMemoryHidingSet,MachineInternalEvents),{|startexec|}))
				[|{|terminate|}|>SKIP
			,<{},{tock}>)
		
		-- main process
		AUX(id__,cycle_RSC_Communication_Communication,
				    const_RSC_Communication_id) =
			prioritise(
				(
			 		(
			 			cycle(cycle_RSC_Communication_Communication)
			 			[| {| endexec,endexec__
			 					,registerRead
			 					,registerWrite,startexec,tock |} |]
			 			(MemoryN(id__,
			 					    const_RSC_Communication_id) 
			 	 		[| union(WCsets,WCsync) |] 
			 	 		Clocks(id__,
			 	 				    const_RSC_Communication_id)
			 			)\WCsets
			 		)
			 		[| union(MachineMemorySyncSet,{| startexec,endexec,endexec__
			 										 ,terminate |}) |]
			 		wbisim(STM(id__,
			 				    const_RSC_Communication_id))
				)[[ endexec__.x____ <- endexec | x____ <- TIDS ]]
			\union(union(MachineMemoryHidingSet,MachineInternalEvents),{|startexec|})
			[|{|terminate|}|>SKIP
			,<{},{tock}>)
		
		internal_(id__,cycle_RSC_Communication_Communication,
				    const_RSC_Communication_id) =
			prioritise(
						(
					 		(
					 			cycle(cycle_RSC_Communication_Communication)
					 			[| {| endexec,endexec__
					 					,registerRead
					 					,registerWrite,startexec,terminate,tock |} |]
					 			(MemoryN(id__,
					 					    const_RSC_Communication_id) 
					 	 		[| union(WCsets,WCsync) |] 
					 	 		Clocks(id__,
					 	 				    const_RSC_Communication_id)
					 			)\WCsets
					 		)
					 		[| union(MachineMemorySyncSet,{| startexec,endexec,endexec__
					 										  |}) |]
					 		wbisim(STM(id__,
					 				    const_RSC_Communication_id))
						)[[ endexec__.x____ <- endexec | x____ <- TIDS ]]
					\union(MachineMemoryHidingSet,{|startexec|})
					[|{|terminate|}|>SKIP
					,<Union({internal_events, ClockResets, {|internal__,terminate|}}),{tock}>)
		
		
	
		datatype SOutputEvents = SOutput_receiveO
			| SOutput_broadcastO
			| SOutput_robots
		
		cycle(cycle_RSC_Communication_Communication) =
			let
				project(o_receiveO.x__) = SOutput_receiveO
				project(o_broadcastO.x__) = SOutput_broadcastO
				project(o_robots.x__) = SOutput_robots
		
				Cycle =
					(registerRead.i_broadcast?x__ -> SKIP
						||| registerRead.i_receive?x__ -> SKIP);
					startexec -> CollectOutputs(SOutputEvents);
					(wait(cycle_RSC_Communication_Communication) [] terminate -> SKIP);
					Cycle
				
				CollectOutputs(sout) =
					(registerWrite?outp:{ outp | outc <- inter(sout,SOutputEvents), outp <- RegisterDataOutput,project(outp) == outc} -> CollectOutputs(diff(sout,{project(outp)}))
					[]
					endexec -> SKIP
					[]
					endexec__?x__ -> SKIP
		)
			within
				Cycle
				
		cycle_opt(cycle_RSC_Communication_Communication) =
			let
				project(o_receiveO.x__) = SOutput_receiveO
				project(o_broadcastO.x__) = SOutput_broadcastO
				project(o_robots.x__) = SOutput_robots
		
				Cycle =
					(registerRead.i_broadcast?x__ -> SKIP
						||| registerRead.i_receive?x__ -> SKIP);
					startexec -> CollectOutputs(SOutputEvents);
					(wait(cycle_RSC_Communication_Communication) [] terminate -> SKIP);
					Cycle
				
				CollectOutputs(sout) =
					(registerWrite?outp:{ outp | outc <- inter(sout,SOutputEvents), outp <- RegisterDataOutput,project(outp) == outc} -> CollectOutputs(diff(sout,{project(outp)}))
					[]
					endexec -> SKIP
					)
			within
				Cycle
	
		Timed(OneStep) {
			-- declare clocks
			datatype ClockSet = dummyC | CLID_RCC
			channel clockReset : ClockSet
	
			
			-- declare trigger deadlines channel
			channel deadline : TIDS.Signal
	
			-- compile clocks process
			
			-- set of strings that uniquely identify the waiting conditions, each of which is 
			-- used to synchronise with the Memory process to set the correspoding variable in
			-- the memory process.
			datatype setWC_identifierSet = dummyWC
			                             | WC_TID_Communication_t3_0_ID
			                             | WC_TID_Communication_t4_0_ID
			
			-- declaring getWC and setWC channel for updating memory variables related to clocks
			channel setWC : setWC_identifierSet.Bool
			channel getWC : setWC_identifierSet.Bool
			
			-- Set of pairs capturing waiting condition processes and their alphabet.
			-- It includes the corresponding set of the defined operations.
			WCset(id__,
					    const_RSC_Communication_id) = Union({
				{
				({|internal__.TID_Communication_t5,internal__.TID_Communication_t4,internal__.TID_Communication_t3,clockReset.CLID_RCC,internal__.TID_Communication_t6,setWC.WC_TID_Communication_t3_0_ID | x <- SIDS|},P_WC_TID_Communication_t3_0(id__,
						    const_RSC_Communication_id)),
				
				({|internal__.TID_Communication_t4,clockReset.CLID_RCC,internal__.TID_Communication_t8,setWC.WC_TID_Communication_t4_0_ID | x <- SIDS|},P_WC_TID_Communication_t4_0(id__,
						    const_RSC_Communication_id))
				}
				})
			
			-- Auxiliary function to rename the channel set for required clocks.
			
			-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
			-- It includes the corresponding set of the defined operations.
			WCsync = Union({
				{|internal__.TID_Communication_t5,
				internal__.TID_Communication_t4,
				internal__.TID_Communication_t3,
				internal__.TID_Communication_t8,
				internal__.TID_Communication_t6|}
				})
			-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
			-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
			WCresets = Union({
				{|clockReset.CLID_RCC | x <- SIDS |}
				})
			-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
			WCsets = Union({
				{|setWC|}
				})
			
			P_WC_TID_Communication_t3_0_reset(id__,
					    const_RSC_Communication_id) = clockReset.CLID_RCC -> setWC.WC_TID_Communication_t3_0_ID.true -> P_WC_TID_Communication_t3_0_monitor(id__,
					    const_RSC_Communication_id)
			
			P_WC_TID_Communication_t3_0_monitor(id__,
					    const_RSC_Communication_id) = (TimedInterrupt(RUN({|internal__.TID_Communication_t5,internal__.TID_Communication_t4,internal__.TID_Communication_t3,tock,internal__.TID_Communication_t6|}),2) ; setWC.WC_TID_Communication_t3_0_ID.false -> RUN({|internal__.TID_Communication_t5,internal__.TID_Communication_t4,internal__.TID_Communication_t3,tock,internal__.TID_Communication_t6|})) /\ P_WC_TID_Communication_t3_0_reset(id__,
					    const_RSC_Communication_id)
			
			P_WC_TID_Communication_t4_0_reset(id__,
					    const_RSC_Communication_id) = clockReset.CLID_RCC -> setWC.WC_TID_Communication_t4_0_ID.false -> P_WC_TID_Communication_t4_0_monitor(id__,
					    const_RSC_Communication_id)
			
			P_WC_TID_Communication_t4_0_monitor(id__,
					    const_RSC_Communication_id) = (TimedInterrupt(RUN({|internal__.TID_Communication_t4,internal__.TID_Communication_t8,tock|}),2) ; setWC.WC_TID_Communication_t4_0_ID.true -> RUN({|internal__.TID_Communication_t4,internal__.TID_Communication_t8,tock|})) /\ P_WC_TID_Communication_t4_0_reset(id__,
					    const_RSC_Communication_id)
			
			P_WC_TID_Communication_t3_0(id__,
					    const_RSC_Communication_id) = setWC.WC_TID_Communication_t3_0_ID.true -> P_WC_TID_Communication_t3_0_monitor(id__,
					    const_RSC_Communication_id)
			
			P_WC_TID_Communication_t4_0(id__,
					    const_RSC_Communication_id) = setWC.WC_TID_Communication_t4_0_ID.false -> P_WC_TID_Communication_t4_0_monitor(id__,
					    const_RSC_Communication_id)
			
			-- Clocks process
			Clocks(id__,
					    const_RSC_Communication_id) = || (alpha, P) : WCset(id__,
					    const_RSC_Communication_id) @ [alpha] wbisim(P)
	
			-- collects all clockResets including those of operations
			ClockResets = Union({
				{|clockReset|}
						})
	
			-- With no internal events visible
			Dunopt__(id__,cycle_RSC_Communication_Communication,
					    const_RSC_Communication_id) = timed_priority(AUX(id__,cycle_RSC_Communication_Communication,
					    const_RSC_Communication_id) \ union(internal_events,ClockResets))
	
			D__(id__,cycle_RSC_Communication_Communication,
					    const_RSC_Communication_id) = timed_priority(AUX_opt(id__,cycle_RSC_Communication_Communication,
					    const_RSC_Communication_id) \ union(internal_events,ClockResets))
	
			O__(id__,cycle_RSC_Communication_Communication,
					    const_RSC_Communication_id) = D__(id__,cycle_RSC_Communication_Communication,
					    const_RSC_Communication_id)
	
			-- With enter/entered/exit/exited events visible
			FVS__(id__,cycle_RSC_Communication_Communication,
					    const_RSC_Communication_id) = timed_priority(AUX(id__,cycle_RSC_Communication_Communication,
					    const_RSC_Communication_id) \ ClockResets)
	
			-- With enterV/enteredV/exitV/exitedV events visible
			VS__(id__,cycle_RSC_Communication_Communication,
					    const_RSC_Communication_id) = ShowV(timed_priority(AUX(id__,cycle_RSC_Communication_Communication,
					    const_RSC_Communication_id) \ ClockResets))
	
			-- With clock resets visible
			FVS_C__(id__,cycle_RSC_Communication_Communication,
					    const_RSC_Communication_id) = AUX(id__,cycle_RSC_Communication_Communication,
					    const_RSC_Communication_id)
			}
	endmodule
	
	-- (Rule 7) [[ c : Controller ]]_C : CSPProcess
	D__(id__,cycle_RSCC_CommunicationC_CommunicationC,
			    const_RSCC_CommunicationC_stm_ref0_id) =
		(
			(
				(
					(
					wbisim(cycleController(id__,cycle_RSCC_CommunicationC_CommunicationC,
							    const_RSCC_CommunicationC_stm_ref0_id))
				 	 [| Union({{||},
				 	 		  {||},
				 	 		  {||},
				 	 		  {||}}) |]
				 	memoryComp(id__,
				 			    const_RSCC_CommunicationC_stm_ref0_id)
				 	)\{||}
					[| {| 	terminate,tock,
							stm_ref0::endexec,stm_ref0::registerRead,stm_ref0::registerWrite|} |]
					-- (Rule 9) composeMachines(...) : CSPProcess
				 	((let
				 		cycle_RSC_Communication_Communication = cycle_RSCC_CommunicationC_CommunicationC
				 	within
				 		(stm_ref0::D__(id__,cycle_RSC_Communication_Communication,
				 				    const_RSC_Communication_id)
				 		\{| |})
				 		[[stm_ref0::terminate <- terminate]]
				 	)
				 	)
				) \ {|	stm_ref0::endexec,stm_ref0::registerRead,stm_ref0::registerWrite |}
			) [| {terminate} |> SKIP
		)

	O__(id__,cycle_RSCC_CommunicationC_CommunicationC,
			    const_RSCC_CommunicationC_stm_ref0_id) = D__(id__,cycle_RSCC_CommunicationC_CommunicationC,
			    const_RSCC_CommunicationC_stm_ref0_id)

endmodule



endmodule
