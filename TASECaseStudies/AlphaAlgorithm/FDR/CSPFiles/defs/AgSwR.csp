module AgSwR
exports

module AggregationSoftware
exports 

	transparent diamond
	transparent sbisim
	transparent chase
	
	-- declaring channels
	-- inputs, evars, rvars and outputs as calculated internally
	-- outputs = {
	--	(ePuck::move,ctrl_ref0::move),
	--	(ePuck::broadcastO,ctrl_ref1::broadcastO),
	--	(ePuck::receiveO,ctrl_ref1::receiveO)
	--	 }
	-- inputs = {
	--	(ePuck::receive,ctrl_ref1::receive),
	--	(ePuck::broadcast,ctrl_ref1::broadcast),
	--	(ePuck::obstacle,ctrl_ref0::obstacle)
	--	 }
	-- evars = {
	--	(ctrl_ref0::neighbours,ctrl_ref1::robots)
	--	 }
	-- rvars = {}
	
	-- declaring registerRead/Write datatypes
	
	datatype RegisterDataInput = i_receive.Bool.{(x0__,x1__) | x0__ <- RSC_ID,x1__ <- RSC_ID}
		| i_broadcast.Bool.RSC_ID
		| i_obstacle.Bool.RSMov_Position
	
	datatype RegisterDataOutput = o_move.core_real.core_real
		| o_broadcastO.RSC_ID
		| o_receiveO.{(x0__,x1__) | x0__ <- RSC_ID,x1__ <- RSC_ID}
	
	datatype RegisterDataEvars = e_neighbours
	
	nametype RegisterOutputs = {|
	o_move,
	o_broadcastO,
	o_receiveO|}
	
	nametype RegisterInputs = {|
	i_receive,
	i_broadcast,
	i_obstacle|}
	
	channel registerRead 	: RegisterDataInput
	channel registerWrite 	: RegisterDataOutput
	channel registerWriteE : RegisterDataEvars
	channel endexec
	
	-- declaring module termination channel
	channel terminate
	
	module ctrl_ref0
	exports
	
		transparent diamond
		transparent sbisim
		transparent chase
	
		-- declaring channels
		-- allInputs = inputs_evars? false
		-- allOutputs = outputs_evars? false
		
		-- inputs, evars, rvars and outputs as calculated internally
		-- outputs = {
		--	(ctrl_ref0::move,stm_ref0::move)
		--	 }
		-- inputs = {
		--	(ctrl_ref0::obstacle,stm_ref0::obstacle),
		--	(ctrl_ref0::neighbours,stm_ref0::neighbours)
		--	 }
		-- evars = {}
		-- dvars = {}
		
		-- declaring registerRead/Write datatypes
		datatype RegisterDataInput = i_obstacle.Bool.RSMov_Position
			| i_neighbours.Bool.core_nat
		
		datatype RegisterDataOutput = o_move.core_real.core_real
			| o_obstacle.RSMov_Position
			| o_neighbours.core_nat
		
		
		nametype RegisterOutputs = {|
		o_move|}
		
		nametype RegisterInputs = {|
		i_obstacle,
		i_neighbours|}
		
		channel registerRead 	: RegisterDataInput
		channel registerWrite 	: RegisterDataOutput
		
		channel endexec, terminate
		
		
		-- declaring call and ret events for undefined operations
		channel moveCall: core_real.core_real
		
		CALL__move(id__,
				    l,
				    a) =  EDeadline(moveCall.l.a,0)		
		
		
		-- (Rule 8) cycleController(...) : CSPProcess
		datatype SOutputEvents = SOutput_move
		
		DVarsEvents = {}
		
		EVarsEvents = {}
		
		cycleController(id__,cycle_RSMC_MovementC_MovementC,
				    const_RSMC_MovementC_stm_ref0_alpha) =
		let
					
			project_stm_ref0(stm_ref0::o_move.x__) = SOutput_move
		
			connected_stm_ref0(stm_ref0::o_move.x__) = true
			connected_stm_ref0(_) = false
		
			lift_stm_ref0(stm_ref0::o_move.x__) = o_move.x__
			
			CycleController =
				-- read inputs from the controller and pass to state machines
				(
				((registerRead.i_obstacle?x__ ->
					((stm_ref0::registerRead.stm_ref0::i_obstacle!x__ -> SKIP)))
					|||
				(registerRead.i_neighbours?x__ ->
					((stm_ref0::registerRead.stm_ref0::i_neighbours!x__ -> SKIP))))
				-- ensure state machines read the values being communicated via evars
						);
				-- synchronize on events related to evars to erase memory
				-- collect outputs, and monitor termination of the cycle, by all controllers
				(CollectOutputs(SOutputEvents) [| {endexec} |] Monitor);
				-- wait for the cycleDef period
				(wait(cycle_RSMC_MovementC_MovementC) [] terminate -> SKIP);
				-- recurse
				CycleController
				
										
			CollectOutputs(sout) =
				(stm_ref0::registerWrite?outp:{ outp | outc <- diff(sout,union(EVarsEvents,DVarsEvents)), outp <- stm_ref0::RegisterDataOutput, connected_stm_ref0(outp), project_stm_ref0(outp) == outc}
						-> registerWrite!lift_stm_ref0(outp)
							-> CollectOutputs(diff(sout,{project_stm_ref0(outp)}))
				[]
				endexec -> SKIP
				)
		
			Monitor = 
				(	 (stm_ref0::endexec -> SKIP)); endexec -> SKIP
		within
			CycleController
		
		-- (Rule 5) memoryComp(...) : CSPProcess
		memoryComp(id__,
				    const_RSMC_MovementC_stm_ref0_alpha) = (
			STOP)
		
		
		module stm_ref0
		exports
			-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
			external prioritise
			transparent wbisim
			transparent sbisim
			transparent dbisim
		
			-- flow channels
			channel internal__ : TIDS
			channel enteredV, enterV, exitV, exitedV : SIDS
			channel enter, entered: SIDS.SIDS
			channel exit,exited: SIDS.SIDS
			
			-- RoboSim channels
			channel endexec
			channel endexec__ : TIDS
			channel startexec
			channel terminate
			
			-- declaring registerRead/Write datatypes
			datatype RegisterDataInput = i_neighbours.Bool.core_nat
				| i_obstacle.Bool.RSMov_Position
			
			
			datatype RegisterDataOutput = o_move.core_real.core_real
			
			
			nametype RegisterOutputs = {|
			o_move|}
			
			nametype RegisterInputs = {|
			i_neighbours,
			i_obstacle|}
			
			channel registerRead 	: RegisterDataInput
			channel registerWrite 	: RegisterDataOutput
			
			-- variable channels
			channel get_n, set_n: core_nat
			channel get_p, set_p: RSMov_Position
			channel get_turned, set_turned: core_boolean
			channel get_obstacle : Bool.RSMov_Position
			channel get_neighbours : Bool.core_nat
			
			-- local variable channels for defined operations that are required by the state machine
			
			-- declaring state machine events
			
			-- declaring call and ret events for undefined operations
			channel moveCall, moveRet: core_real.core_real
			
			EndExecs = {| endexec__, endexec
			 |}
			
			Transitions = {| internal__
			 |}
			
		
			-- Only the undefined operations are declared here.
			-- If the state machine is in isolation, all required operations will be undefined.
			-- If it is in the context of a controller, the required operations not provided by the
			-- controller will be declared here, and the defined operations will be defined in the
			-- context of the Controller module, and therefore within scope of the state machien module.
			CALL__move(id__,
					    l,
					    a) = registerWrite.o_move.l.a -> SKIP
			
			
			
			-- definition of functions used to expose flow channels
			ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
							   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
							   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
							   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
								 
			ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
			ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
			ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
			ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
			ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
						[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
						[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
						[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
			
			-- declaring identifiers of state and final states
			datatype SIDS = SID_Movement
			              | SID_Movement_MovementAndAvoidance
			              | SID_Movement_MovementAndAvoidance_SMove
			              | SID_Movement_MovementAndAvoidance_Avoid
			              | SID_Movement_MovementAndAvoidance_DMove
			              | SID_Movement_MovementAndAvoidance_Wait
			              | SID_Movement_Turning
			              | SID_Movement_Turning_SInit
			              | SID_Movement_Turning_Turn180
			              | SID_Movement_Turning_RandomTurn
			              | SID_Movement_Turning_f0
			              | SID_Movement_Turning_WaitTurn180
			              | SID_Movement_Turning_WaitRandomTurn
			              | SID_Movement_InfoNeighbours
			
			-- declaring identifiers of transitions
			datatype TIDS = NULLTRANSITION__
			              | TID_Movement_MovementAndAvoidance_t0
			              | TID_Movement_MovementAndAvoidance_t1
			              | TID_Movement_MovementAndAvoidance_t2
			              | TID_Movement_MovementAndAvoidance_t3
			              | TID_Movement_MovementAndAvoidance_t4
			              | TID_Movement_MovementAndAvoidance_t5
			              | TID_Movement_MovementAndAvoidance_t6
			              | TID_Movement_MovementAndAvoidance_t7
			              | TID_Movement_MovementAndAvoidance_t8
			              | TID_Movement_Turning_t0
			              | TID_Movement_Turning_t1
			              | TID_Movement_Turning_t2
			              | TID_Movement_Turning_t3
			              | TID_Movement_Turning_t9
			              | TID_Movement_Turning_t10
			              | TID_Movement_Turning_t12
			              | TID_Movement_Turning_t13
			              | TID_Movement_Turning_t15
			              | TID_Movement_Turning_t16
			              | TID_Movement_Turning_t4
			              | TID_Movement_Turning_t5
			              | TID_Movement_t0
			              | TID_Movement_t1
			              | TID_Movement_t2
			              | TID_Movement_t4
			              | TID_Movement_t3
			              | TID_Movement_t5
			
			-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
			
			ITIDS = {
				TID_Movement_MovementAndAvoidance_t1,	TID_Movement_MovementAndAvoidance_t4,	TID_Movement_MovementAndAvoidance_t5,	TID_Movement_MovementAndAvoidance_t6,	TID_Movement_Turning_t1,	TID_Movement_Turning_t9,	TID_Movement_Turning_t10,	TID_Movement_Turning_t12,	TID_Movement_Turning_t13,	TID_Movement_Turning_t15,	TID_Movement_Turning_t16,	TID_Movement_t1,	TID_Movement_t2,	TID_Movement_t5
			}
			
			int_int = {|
				internal__.TID_Movement_MovementAndAvoidance_t1,
				internal__.TID_Movement_MovementAndAvoidance_t4,
				internal__.TID_Movement_MovementAndAvoidance_t5,
				internal__.TID_Movement_MovementAndAvoidance_t6,
				internal__.TID_Movement_Turning_t1,
				internal__.TID_Movement_Turning_t9,
				internal__.TID_Movement_Turning_t10,
				internal__.TID_Movement_Turning_t12,
				internal__.TID_Movement_Turning_t13,
				internal__.TID_Movement_Turning_t15,
				internal__.TID_Movement_Turning_t16,
				internal__.TID_Movement_t1,
				internal__.TID_Movement_t2,
				internal__.TID_Movement_t5
			|}
				
			
			internal_events = {|enter,entered,exit,exited|}
			
			-- declaring all states
			CS_Movement_MovementAndAvoidance_sync = {|
				enter.y____.x____, 
				entered.y____.x____, 
				exit.y____.x____, 
				exited.y____.x____,
				enter.x____.y____, 
				entered.x____.y____, 
				exit.x____.y____, 
				exited.x____.y____ |
				x____ <- {SID_Movement_MovementAndAvoidance,SID_Movement_Turning,SID_Movement_InfoNeighbours},
				y____ <- {SID_Movement_MovementAndAvoidance}
			|}
			
			Movement_MovementAndAvoidance_int_int = {|
				internal__.TID_Movement_MovementAndAvoidance_t1,
				internal__.TID_Movement_MovementAndAvoidance_t4,
				internal__.TID_Movement_MovementAndAvoidance_t5,
				internal__.TID_Movement_MovementAndAvoidance_t6
			|}
				
			
			Movement_MovementAndAvoidance_int_triggers = {|
				internal__.TID_Movement_MovementAndAvoidance_t0,
				internal__.TID_Movement_MovementAndAvoidance_t1,
				internal__.TID_Movement_MovementAndAvoidance_t2,
				internal__.TID_Movement_MovementAndAvoidance_t3,
				internal__.TID_Movement_MovementAndAvoidance_t4,
				internal__.TID_Movement_MovementAndAvoidance_t5,
				internal__.TID_Movement_MovementAndAvoidance_t6,
				internal__.TID_Movement_MovementAndAvoidance_t7,
				internal__.TID_Movement_MovementAndAvoidance_t8
			|}
			
			State_Movement_MovementAndAvoidance_SMove_R(id__,
					    const_RSMov_Movement_alpha) = 
				State_Movement_MovementAndAvoidance_SMove(id__,
						    const_RSMov_Movement_alpha)
			 		[|diff(Movement_MovementAndAvoidance_int_int,Movement_MovementAndAvoidance_SMove_triggers)|]
			 	SKIP
			 		
			State_Movement_MovementAndAvoidance_Avoid_R(id__,
					    const_RSMov_Movement_alpha) = 
				State_Movement_MovementAndAvoidance_Avoid(id__,
						    const_RSMov_Movement_alpha)
			 		[|diff(Movement_MovementAndAvoidance_int_int,Movement_MovementAndAvoidance_Avoid_triggers)|]
			 	SKIP
			 		
			State_Movement_MovementAndAvoidance_DMove_R(id__,
					    const_RSMov_Movement_alpha) = 
				State_Movement_MovementAndAvoidance_DMove(id__,
						    const_RSMov_Movement_alpha)
			 		[|diff(Movement_MovementAndAvoidance_int_int,Movement_MovementAndAvoidance_DMove_triggers)|]
			 	SKIP
			 		
			State_Movement_MovementAndAvoidance_Wait_R(id__,
					    const_RSMov_Movement_alpha) = 
				State_Movement_MovementAndAvoidance_Wait(id__,
						    const_RSMov_Movement_alpha)
			 		[|diff(Movement_MovementAndAvoidance_int_int,Movement_MovementAndAvoidance_Wait_triggers)|]
			 	SKIP
			 		
			State_Movement_MovementAndAvoidance(id__,
					    const_RSMov_Movement_alpha) = (
				State_Movement_MovementAndAvoidance_aux(id__,
						    const_RSMov_Movement_alpha)
					[|
						union(
							diff(int_int, Movement_MovementAndAvoidance_int_triggers),
							{|enter.x____.y____,
							  entered.x____.y____,
							  exit.x____.y____,
							  exited.x____.y____ |
							  x____ <- diff(SIDS,{SID_Movement_MovementAndAvoidance_SMove,SID_Movement_MovementAndAvoidance_Avoid,SID_Movement_MovementAndAvoidance_DMove,SID_Movement_MovementAndAvoidance_Wait}),
							  y____ <- {SID_Movement_MovementAndAvoidance_SMove,SID_Movement_MovementAndAvoidance_Avoid,SID_Movement_MovementAndAvoidance_DMove,SID_Movement_MovementAndAvoidance_Wait}
						    |}
						)
					|]
				(
					State_Movement_MovementAndAvoidance_SMove_R(id__,
							    const_RSMov_Movement_alpha)
						[|inter(CS_Movement_MovementAndAvoidance_SMove_sync,union(union(CS_Movement_MovementAndAvoidance_Avoid_sync,CS_Movement_MovementAndAvoidance_DMove_sync),CS_Movement_MovementAndAvoidance_Wait_sync))|]
					(
						State_Movement_MovementAndAvoidance_Avoid_R(id__,
								    const_RSMov_Movement_alpha)
							[|inter(CS_Movement_MovementAndAvoidance_Avoid_sync,union(CS_Movement_MovementAndAvoidance_DMove_sync,CS_Movement_MovementAndAvoidance_Wait_sync))|]
						(
							State_Movement_MovementAndAvoidance_DMove_R(id__,
									    const_RSMov_Movement_alpha)
								[|inter(CS_Movement_MovementAndAvoidance_DMove_sync,CS_Movement_MovementAndAvoidance_Wait_sync)|]
							State_Movement_MovementAndAvoidance_Wait_R(id__,
									    const_RSMov_Movement_alpha)
						)
					)
				)
			)
			
			Movement_MovementAndAvoidance_triggers = {|
				internal__.TID_Movement_t1,
				internal__.TID_Movement_MovementAndAvoidance_t8,
				internal__.TID_Movement_MovementAndAvoidance_t4,
				internal__.TID_Movement_MovementAndAvoidance_t2,
				internal__.TID_Movement_t3,
				internal__.TID_Movement_t2,
				internal__.TID_Movement_MovementAndAvoidance_t0,
				internal__.TID_Movement_MovementAndAvoidance_t5,
				internal__.TID_Movement_MovementAndAvoidance_t1,
				internal__.TID_Movement_MovementAndAvoidance_t6,
				internal__.TID_Movement_t4,
				internal__.TID_Movement_MovementAndAvoidance_t7,
				internal__.TID_Movement_t5,
				internal__.TID_Movement_MovementAndAvoidance_t3
			|}
			
			State_Movement_MovementAndAvoidance_aux(id__,
					    const_RSMov_Movement_alpha) = let
				T_Movement_t1(id__,
						    const_RSMov_Movement_alpha) = internal__!TID_Movement_t1 ->  exit.SID_Movement_MovementAndAvoidance.SID_Movement_MovementAndAvoidance -> SKIP;
									exit!SID_Movement_MovementAndAvoidance?z____:{SID_Movement_MovementAndAvoidance_SMove,SID_Movement_MovementAndAvoidance_Avoid,SID_Movement_MovementAndAvoidance_DMove,SID_Movement_MovementAndAvoidance_Wait} -> exited!SID_Movement_MovementAndAvoidance!z____ -> 
											SKIP;
									SKIP;exited.SID_Movement_MovementAndAvoidance.SID_Movement_MovementAndAvoidance -> SKIP;
									DoClockReset({clockReset.CLID_MBC});enter!SID_Movement_MovementAndAvoidance!SID_Movement_InfoNeighbours -> entered!SID_Movement_MovementAndAvoidance!SID_Movement_InfoNeighbours ->
									State_Movement_MovementAndAvoidance_aux(id__,
											    const_RSMov_Movement_alpha)
				State_Movement_MovementAndAvoidance_aux_execute(id__,o____) = SKIP; 
				I_Movement_MovementAndAvoidance_i0(id__,
						    const_RSMov_Movement_alpha);
					entered!o____!SID_Movement_MovementAndAvoidance ->
					(SKIP; STOP /\ (
						T_Movement_t1(id__,
								    const_RSMov_Movement_alpha)
						[]
						internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Movement_t1,TID_Movement_MovementAndAvoidance_t8,TID_Movement_MovementAndAvoidance_t4,TID_Movement_MovementAndAvoidance_t2,TID_Movement_t3,TID_Movement_t2,TID_Movement_MovementAndAvoidance_t0,TID_Movement_MovementAndAvoidance_t5,TID_Movement_MovementAndAvoidance_t1,TID_Movement_MovementAndAvoidance_t6,TID_Movement_t4,TID_Movement_MovementAndAvoidance_t7,TID_Movement_t5,TID_Movement_MovementAndAvoidance_t3}) -> exit?y____:diff(SIDS,{SID_Movement_MovementAndAvoidance})!SID_Movement_MovementAndAvoidance -> (
								exit!SID_Movement_MovementAndAvoidance?z____:{SID_Movement_MovementAndAvoidance_SMove,SID_Movement_MovementAndAvoidance_Avoid,SID_Movement_MovementAndAvoidance_DMove,SID_Movement_MovementAndAvoidance_Wait} -> exited!SID_Movement_MovementAndAvoidance!z____ -> 
										SKIP;
								SKIP;
								exited!y____!SID_Movement_MovementAndAvoidance -> SKIP);
								State_Movement_MovementAndAvoidance_aux(id__,
										    const_RSMov_Movement_alpha)
					))
			within
				enter?x____:diff(SIDS,{SID_Movement_MovementAndAvoidance})!SID_Movement_MovementAndAvoidance -> (State_Movement_MovementAndAvoidance_aux_execute(id__,x____))
			
			CS_Movement_MovementAndAvoidance_SMove_sync = {|
				enter.y____.x____, 
				entered.y____.x____, 
				exit.y____.x____, 
				exited.y____.x____,
				enter.x____.y____, 
				entered.x____.y____, 
				exit.x____.y____, 
				exited.x____.y____ |
				x____ <- {SID_Movement_MovementAndAvoidance_SMove,SID_Movement_MovementAndAvoidance_Avoid,SID_Movement_MovementAndAvoidance_DMove,SID_Movement_MovementAndAvoidance_Wait},
				y____ <- {SID_Movement_MovementAndAvoidance_SMove}
			|}
			
			
			Movement_MovementAndAvoidance_SMove_triggers = {|
				internal__.TID_Movement_MovementAndAvoidance_t5,
				internal__.TID_Movement_MovementAndAvoidance_t1,
				internal__.TID_Movement_MovementAndAvoidance_t6,
				internal__.TID_Movement_MovementAndAvoidance_t8,
				internal__.TID_Movement_MovementAndAvoidance_t4,
				internal__.TID_Movement_MovementAndAvoidance_t7,
				internal__.TID_Movement_MovementAndAvoidance_t2,
				internal__.TID_Movement_MovementAndAvoidance_t3
			|}
			
			State_Movement_MovementAndAvoidance_SMove(id__,
					    const_RSMov_Movement_alpha) = let
				T_Movement_MovementAndAvoidance_t1(id__,
						    const_RSMov_Movement_alpha) = internal__!TID_Movement_MovementAndAvoidance_t1 ->  exit.SID_Movement_MovementAndAvoidance_SMove.SID_Movement_MovementAndAvoidance_SMove -> SKIP;
									SKIP;exited.SID_Movement_MovementAndAvoidance_SMove.SID_Movement_MovementAndAvoidance_SMove -> SKIP;
									enter!SID_Movement_MovementAndAvoidance_SMove!SID_Movement_MovementAndAvoidance_DMove -> entered!SID_Movement_MovementAndAvoidance_SMove!SID_Movement_MovementAndAvoidance_DMove ->
									State_Movement_MovementAndAvoidance_SMove(id__,
											    const_RSMov_Movement_alpha)
				State_Movement_MovementAndAvoidance_SMove_execute(id__,o____) = true&CALL__move(
							id__,
							1,
							0
						); 
					entered!o____!SID_Movement_MovementAndAvoidance_SMove ->
					(SKIP; STOP /\ (
						T_Movement_MovementAndAvoidance_t1(id__,
								    const_RSMov_Movement_alpha)
						[]
						internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Movement_MovementAndAvoidance_t5,TID_Movement_MovementAndAvoidance_t1,TID_Movement_MovementAndAvoidance_t6,TID_Movement_MovementAndAvoidance_t8,TID_Movement_MovementAndAvoidance_t4,TID_Movement_MovementAndAvoidance_t7,TID_Movement_MovementAndAvoidance_t2,TID_Movement_MovementAndAvoidance_t3}) -> exit?y____:diff(SIDS,{SID_Movement_MovementAndAvoidance_SMove})!SID_Movement_MovementAndAvoidance_SMove -> (
								SKIP;
								exited!y____!SID_Movement_MovementAndAvoidance_SMove -> SKIP);
								State_Movement_MovementAndAvoidance_SMove(id__,
										    const_RSMov_Movement_alpha)
					))
			within
				enter?x____:diff(SIDS,{SID_Movement_MovementAndAvoidance_SMove})!SID_Movement_MovementAndAvoidance_SMove -> (State_Movement_MovementAndAvoidance_SMove_execute(id__,x____))
			
			CS_Movement_MovementAndAvoidance_Avoid_sync = {|
				enter.y____.x____, 
				entered.y____.x____, 
				exit.y____.x____, 
				exited.y____.x____,
				enter.x____.y____, 
				entered.x____.y____, 
				exit.x____.y____, 
				exited.x____.y____ |
				x____ <- {SID_Movement_MovementAndAvoidance_SMove,SID_Movement_MovementAndAvoidance_Avoid,SID_Movement_MovementAndAvoidance_DMove,SID_Movement_MovementAndAvoidance_Wait},
				y____ <- {SID_Movement_MovementAndAvoidance_Avoid}
			|}
			
			
			Movement_MovementAndAvoidance_Avoid_triggers = {|
				internal__.TID_Movement_MovementAndAvoidance_t5,
				internal__.TID_Movement_MovementAndAvoidance_t6,
				internal__.TID_Movement_MovementAndAvoidance_t1,
				internal__.TID_Movement_MovementAndAvoidance_t8,
				internal__.TID_Movement_MovementAndAvoidance_t4,
				internal__.TID_Movement_MovementAndAvoidance_t7,
				internal__.TID_Movement_MovementAndAvoidance_t2,
				internal__.TID_Movement_MovementAndAvoidance_t3
			|}
			
			State_Movement_MovementAndAvoidance_Avoid(id__,
					    const_RSMov_Movement_alpha) = let
				T_Movement_MovementAndAvoidance_t5(id__,
						    const_RSMov_Movement_alpha) = internal__!TID_Movement_MovementAndAvoidance_t5 ->  exit.SID_Movement_MovementAndAvoidance_Avoid.SID_Movement_MovementAndAvoidance_Avoid -> SKIP;
									SKIP;exited.SID_Movement_MovementAndAvoidance_Avoid.SID_Movement_MovementAndAvoidance_Avoid -> SKIP;
									enter!SID_Movement_MovementAndAvoidance_Avoid!SID_Movement_MovementAndAvoidance_Wait -> entered!SID_Movement_MovementAndAvoidance_Avoid!SID_Movement_MovementAndAvoidance_Wait ->
									State_Movement_MovementAndAvoidance_Avoid(id__,
											    const_RSMov_Movement_alpha)
				State_Movement_MovementAndAvoidance_Avoid_execute(id__,o____) = get_p?p -> true&(if ((p==RSMov_Position_left)) then (true&CALL__move(
							id__,
							0,
							0
						)) else (true&CALL__move(
							id__,
							1,
							0
						))); 
					entered!o____!SID_Movement_MovementAndAvoidance_Avoid ->
					(SKIP; STOP /\ (
						T_Movement_MovementAndAvoidance_t5(id__,
								    const_RSMov_Movement_alpha)
						[]
						internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Movement_MovementAndAvoidance_t5,TID_Movement_MovementAndAvoidance_t6,TID_Movement_MovementAndAvoidance_t1,TID_Movement_MovementAndAvoidance_t8,TID_Movement_MovementAndAvoidance_t4,TID_Movement_MovementAndAvoidance_t7,TID_Movement_MovementAndAvoidance_t2,TID_Movement_MovementAndAvoidance_t3}) -> exit?y____:diff(SIDS,{SID_Movement_MovementAndAvoidance_Avoid})!SID_Movement_MovementAndAvoidance_Avoid -> (
								SKIP;
								exited!y____!SID_Movement_MovementAndAvoidance_Avoid -> SKIP);
								State_Movement_MovementAndAvoidance_Avoid(id__,
										    const_RSMov_Movement_alpha)
					))
			within
				enter?x____:diff(SIDS,{SID_Movement_MovementAndAvoidance_Avoid})!SID_Movement_MovementAndAvoidance_Avoid -> (State_Movement_MovementAndAvoidance_Avoid_execute(id__,x____))
			
			CS_Movement_MovementAndAvoidance_DMove_sync = {|
				enter.y____.x____, 
				entered.y____.x____, 
				exit.y____.x____, 
				exited.y____.x____,
				enter.x____.y____, 
				entered.x____.y____, 
				exit.x____.y____, 
				exited.x____.y____ |
				x____ <- {SID_Movement_MovementAndAvoidance_SMove,SID_Movement_MovementAndAvoidance_Avoid,SID_Movement_MovementAndAvoidance_DMove,SID_Movement_MovementAndAvoidance_Wait},
				y____ <- {SID_Movement_MovementAndAvoidance_DMove}
			|}
			
			
			Movement_MovementAndAvoidance_DMove_triggers = {|
				internal__.TID_Movement_MovementAndAvoidance_t5,
				internal__.TID_Movement_MovementAndAvoidance_t6,
				internal__.TID_Movement_MovementAndAvoidance_t1,
				internal__.TID_Movement_MovementAndAvoidance_t8,
				internal__.TID_Movement_MovementAndAvoidance_t4,
				internal__.TID_Movement_MovementAndAvoidance_t7,
				internal__.TID_Movement_MovementAndAvoidance_t2,
				internal__.TID_Movement_MovementAndAvoidance_t3
			|}
			
			State_Movement_MovementAndAvoidance_DMove(id__,
					    const_RSMov_Movement_alpha) = let
				T_Movement_MovementAndAvoidance_t4(id__,
						    const_RSMov_Movement_alpha) = endexec__.TID_Movement_MovementAndAvoidance_t4 -> startexec ->  (exit.SID_Movement_MovementAndAvoidance_DMove.SID_Movement_MovementAndAvoidance_DMove -> SKIP;
									SKIP;exited.SID_Movement_MovementAndAvoidance_DMove.SID_Movement_MovementAndAvoidance_DMove -> SKIP;
									J_Movement_MovementAndAvoidance_j0(id__,
											    const_RSMov_Movement_alpha))
				J_Movement_MovementAndAvoidance_j0(id__,
						    const_RSMov_Movement_alpha) = (
							(internal__!TID_Movement_MovementAndAvoidance_t2 -> enter!SID_Movement_MovementAndAvoidance_DMove!SID_Movement_MovementAndAvoidance_DMove -> State_Movement_MovementAndAvoidance_DMove_execute(id__,SID_Movement_MovementAndAvoidance_DMove)
							)[]
							(internal__!TID_Movement_MovementAndAvoidance_t3 -> get_obstacle?b__?x__ -> set_p!x__ -> SKIP
							;enter!SID_Movement_MovementAndAvoidance_DMove!SID_Movement_MovementAndAvoidance_Avoid -> entered!SID_Movement_MovementAndAvoidance_DMove!SID_Movement_MovementAndAvoidance_Avoid ->
							State_Movement_MovementAndAvoidance_DMove(id__,
									    const_RSMov_Movement_alpha)
							)
							)
				State_Movement_MovementAndAvoidance_DMove_execute(id__,o____) = SKIP; 
					entered!o____!SID_Movement_MovementAndAvoidance_DMove ->
					(SKIP; STOP /\ (
						T_Movement_MovementAndAvoidance_t4(id__,
								    const_RSMov_Movement_alpha)
						[]
						internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Movement_MovementAndAvoidance_t5,TID_Movement_MovementAndAvoidance_t6,TID_Movement_MovementAndAvoidance_t1,TID_Movement_MovementAndAvoidance_t8,TID_Movement_MovementAndAvoidance_t4,TID_Movement_MovementAndAvoidance_t7,TID_Movement_MovementAndAvoidance_t2,TID_Movement_MovementAndAvoidance_t3}) -> exit?y____:diff(SIDS,{SID_Movement_MovementAndAvoidance_DMove})!SID_Movement_MovementAndAvoidance_DMove -> (
								SKIP;
								exited!y____!SID_Movement_MovementAndAvoidance_DMove -> SKIP);
								State_Movement_MovementAndAvoidance_DMove(id__,
										    const_RSMov_Movement_alpha)
					))
			within
				enter?x____:diff(SIDS,{SID_Movement_MovementAndAvoidance_DMove})!SID_Movement_MovementAndAvoidance_DMove -> (State_Movement_MovementAndAvoidance_DMove_execute(id__,x____))
			
			CS_Movement_MovementAndAvoidance_Wait_sync = {|
				enter.y____.x____, 
				entered.y____.x____, 
				exit.y____.x____, 
				exited.y____.x____,
				enter.x____.y____, 
				entered.x____.y____, 
				exit.x____.y____, 
				exited.x____.y____ |
				x____ <- {SID_Movement_MovementAndAvoidance_SMove,SID_Movement_MovementAndAvoidance_Avoid,SID_Movement_MovementAndAvoidance_DMove,SID_Movement_MovementAndAvoidance_Wait},
				y____ <- {SID_Movement_MovementAndAvoidance_Wait}
			|}
			
			
			Movement_MovementAndAvoidance_Wait_triggers = {|
				internal__.TID_Movement_MovementAndAvoidance_t5,
				internal__.TID_Movement_MovementAndAvoidance_t6,
				internal__.TID_Movement_MovementAndAvoidance_t1,
				internal__.TID_Movement_MovementAndAvoidance_t8,
				internal__.TID_Movement_MovementAndAvoidance_t4,
				internal__.TID_Movement_MovementAndAvoidance_t7,
				internal__.TID_Movement_MovementAndAvoidance_t2,
				internal__.TID_Movement_MovementAndAvoidance_t3
			|}
			
			State_Movement_MovementAndAvoidance_Wait(id__,
					    const_RSMov_Movement_alpha) = let
				T_Movement_MovementAndAvoidance_t6(id__,
						    const_RSMov_Movement_alpha) = endexec__.TID_Movement_MovementAndAvoidance_t6 -> startexec ->  (exit.SID_Movement_MovementAndAvoidance_Wait.SID_Movement_MovementAndAvoidance_Wait -> SKIP;
									SKIP;exited.SID_Movement_MovementAndAvoidance_Wait.SID_Movement_MovementAndAvoidance_Wait -> SKIP;
									J_Movement_MovementAndAvoidance_j1(id__,
											    const_RSMov_Movement_alpha))
				J_Movement_MovementAndAvoidance_j1(id__,
						    const_RSMov_Movement_alpha) = (
							(internal__!TID_Movement_MovementAndAvoidance_t7 -> enter!SID_Movement_MovementAndAvoidance_Wait!SID_Movement_MovementAndAvoidance_Wait -> State_Movement_MovementAndAvoidance_Wait_execute(id__,SID_Movement_MovementAndAvoidance_Wait)
							)[]
							(internal__!TID_Movement_MovementAndAvoidance_t8 -> enter!SID_Movement_MovementAndAvoidance_Wait!SID_Movement_MovementAndAvoidance_SMove -> entered!SID_Movement_MovementAndAvoidance_Wait!SID_Movement_MovementAndAvoidance_SMove ->
							State_Movement_MovementAndAvoidance_Wait(id__,
									    const_RSMov_Movement_alpha)
							)
							)
				State_Movement_MovementAndAvoidance_Wait_execute(id__,o____) = SKIP; 
					entered!o____!SID_Movement_MovementAndAvoidance_Wait ->
					(SKIP; STOP /\ (
						T_Movement_MovementAndAvoidance_t6(id__,
								    const_RSMov_Movement_alpha)
						[]
						internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Movement_MovementAndAvoidance_t5,TID_Movement_MovementAndAvoidance_t6,TID_Movement_MovementAndAvoidance_t1,TID_Movement_MovementAndAvoidance_t8,TID_Movement_MovementAndAvoidance_t4,TID_Movement_MovementAndAvoidance_t7,TID_Movement_MovementAndAvoidance_t2,TID_Movement_MovementAndAvoidance_t3}) -> exit?y____:diff(SIDS,{SID_Movement_MovementAndAvoidance_Wait})!SID_Movement_MovementAndAvoidance_Wait -> (
								SKIP;
								exited!y____!SID_Movement_MovementAndAvoidance_Wait -> SKIP);
								State_Movement_MovementAndAvoidance_Wait(id__,
										    const_RSMov_Movement_alpha)
					))
			within
				enter?x____:diff(SIDS,{SID_Movement_MovementAndAvoidance_Wait})!SID_Movement_MovementAndAvoidance_Wait -> (State_Movement_MovementAndAvoidance_Wait_execute(id__,x____))
			
			CS_Movement_Turning_sync = {|
				enter.y____.x____, 
				entered.y____.x____, 
				exit.y____.x____, 
				exited.y____.x____,
				enter.x____.y____, 
				entered.x____.y____, 
				exit.x____.y____, 
				exited.x____.y____ |
				x____ <- {SID_Movement_MovementAndAvoidance,SID_Movement_Turning,SID_Movement_InfoNeighbours},
				y____ <- {SID_Movement_Turning}
			|}
			
			Movement_Turning_int_int = {|
				internal__.TID_Movement_Turning_t1,
				internal__.TID_Movement_Turning_t9,
				internal__.TID_Movement_Turning_t10,
				internal__.TID_Movement_Turning_t12,
				internal__.TID_Movement_Turning_t13,
				internal__.TID_Movement_Turning_t15,
				internal__.TID_Movement_Turning_t16
			|}
				
			
			Movement_Turning_int_triggers = {|
				internal__.TID_Movement_Turning_t0,
				internal__.TID_Movement_Turning_t1,
				internal__.TID_Movement_Turning_t2,
				internal__.TID_Movement_Turning_t3,
				internal__.TID_Movement_Turning_t9,
				internal__.TID_Movement_Turning_t10,
				internal__.TID_Movement_Turning_t12,
				internal__.TID_Movement_Turning_t13,
				internal__.TID_Movement_Turning_t15,
				internal__.TID_Movement_Turning_t16,
				internal__.TID_Movement_Turning_t4,
				internal__.TID_Movement_Turning_t5
			|}
			
			State_Movement_Turning_SInit_R(id__,
					    const_RSMov_Movement_alpha) = 
				State_Movement_Turning_SInit(id__,
						    const_RSMov_Movement_alpha)
			 		[|diff(Movement_Turning_int_int,Movement_Turning_SInit_triggers)|]
			 	SKIP
			 		
			State_Movement_Turning_Turn180_R(id__,
					    const_RSMov_Movement_alpha) = 
				State_Movement_Turning_Turn180(id__,
						    const_RSMov_Movement_alpha)
			 		[|diff(Movement_Turning_int_int,Movement_Turning_Turn180_triggers)|]
			 	SKIP
			 		
			State_Movement_Turning_RandomTurn_R(id__,
					    const_RSMov_Movement_alpha) = 
				State_Movement_Turning_RandomTurn(id__,
						    const_RSMov_Movement_alpha)
			 		[|diff(Movement_Turning_int_int,Movement_Turning_RandomTurn_triggers)|]
			 	SKIP
			 		
			State_Movement_Turning_f0_R(id__,
					    const_RSMov_Movement_alpha) = 
				State_Movement_Turning_f0(id__,
						    const_RSMov_Movement_alpha)
			 		[|diff(Movement_Turning_int_int,Movement_Turning_f0_triggers)|]
			 	SKIP
			 		
			State_Movement_Turning_WaitTurn180_R(id__,
					    const_RSMov_Movement_alpha) = 
				State_Movement_Turning_WaitTurn180(id__,
						    const_RSMov_Movement_alpha)
			 		[|diff(Movement_Turning_int_int,Movement_Turning_WaitTurn180_triggers)|]
			 	SKIP
			 		
			State_Movement_Turning_WaitRandomTurn_R(id__,
					    const_RSMov_Movement_alpha) = 
				State_Movement_Turning_WaitRandomTurn(id__,
						    const_RSMov_Movement_alpha)
			 		[|diff(Movement_Turning_int_int,Movement_Turning_WaitRandomTurn_triggers)|]
			 	SKIP
			 		
			State_Movement_Turning(id__,
					    const_RSMov_Movement_alpha) = (
				State_Movement_Turning_aux(id__,
						    const_RSMov_Movement_alpha)
					[|
						union(
							diff(int_int, Movement_Turning_int_triggers),
							{|enter.x____.y____,
							  entered.x____.y____,
							  exit.x____.y____,
							  exited.x____.y____ |
							  x____ <- diff(SIDS,{SID_Movement_Turning_SInit,SID_Movement_Turning_Turn180,SID_Movement_Turning_RandomTurn,SID_Movement_Turning_f0,SID_Movement_Turning_WaitTurn180,SID_Movement_Turning_WaitRandomTurn}),
							  y____ <- {SID_Movement_Turning_SInit,SID_Movement_Turning_Turn180,SID_Movement_Turning_RandomTurn,SID_Movement_Turning_f0,SID_Movement_Turning_WaitTurn180,SID_Movement_Turning_WaitRandomTurn}
						    |}
						)
					|]
				(
					State_Movement_Turning_SInit_R(id__,
							    const_RSMov_Movement_alpha)
						[|inter(CS_Movement_Turning_SInit_sync,union(union(union(union(CS_Movement_Turning_Turn180_sync,CS_Movement_Turning_RandomTurn_sync),CS_Movement_Turning_f0_sync),CS_Movement_Turning_WaitTurn180_sync),CS_Movement_Turning_WaitRandomTurn_sync))|]
					(
						State_Movement_Turning_Turn180_R(id__,
								    const_RSMov_Movement_alpha)
							[|inter(CS_Movement_Turning_Turn180_sync,union(union(union(CS_Movement_Turning_RandomTurn_sync,CS_Movement_Turning_f0_sync),CS_Movement_Turning_WaitTurn180_sync),CS_Movement_Turning_WaitRandomTurn_sync))|]
						(
							State_Movement_Turning_RandomTurn_R(id__,
									    const_RSMov_Movement_alpha)
								[|inter(CS_Movement_Turning_RandomTurn_sync,union(union(CS_Movement_Turning_f0_sync,CS_Movement_Turning_WaitTurn180_sync),CS_Movement_Turning_WaitRandomTurn_sync))|]
							(
								State_Movement_Turning_f0_R(id__,
										    const_RSMov_Movement_alpha)
									[|inter(CS_Movement_Turning_f0_sync,union(CS_Movement_Turning_WaitTurn180_sync,CS_Movement_Turning_WaitRandomTurn_sync))|]
								(
									State_Movement_Turning_WaitTurn180_R(id__,
											    const_RSMov_Movement_alpha)
										[|inter(CS_Movement_Turning_WaitTurn180_sync,CS_Movement_Turning_WaitRandomTurn_sync)|]
									State_Movement_Turning_WaitRandomTurn_R(id__,
											    const_RSMov_Movement_alpha)
								)
							)
						)
					)
				)
			)
			
			Movement_Turning_triggers = {|
				internal__.TID_Movement_t1,
				internal__.TID_Movement_Turning_t0,
				internal__.TID_Movement_Turning_t3,
				internal__.TID_Movement_Turning_t1,
				internal__.TID_Movement_Turning_t12,
				internal__.TID_Movement_Turning_t2,
				internal__.TID_Movement_t3,
				internal__.TID_Movement_t2,
				internal__.TID_Movement_Turning_t13,
				internal__.TID_Movement_Turning_t4,
				internal__.TID_Movement_Turning_t9,
				internal__.TID_Movement_t4,
				internal__.TID_Movement_t5,
				internal__.TID_Movement_Turning_t16,
				internal__.TID_Movement_Turning_t5,
				internal__.TID_Movement_Turning_t10,
				internal__.TID_Movement_Turning_t15
			|}
			
			State_Movement_Turning_aux(id__,
					    const_RSMov_Movement_alpha) = let
				T_Movement_t2(id__,
						    const_RSMov_Movement_alpha) = internal__!TID_Movement_t2 ->  exit.SID_Movement_Turning.SID_Movement_Turning -> SKIP;
									exit!SID_Movement_Turning?z____:{SID_Movement_Turning_SInit,SID_Movement_Turning_Turn180,SID_Movement_Turning_RandomTurn,SID_Movement_Turning_f0,SID_Movement_Turning_WaitTurn180,SID_Movement_Turning_WaitRandomTurn} -> exited!SID_Movement_Turning!z____ -> 
											SKIP;
									SKIP;exited.SID_Movement_Turning.SID_Movement_Turning -> SKIP;
									enter!SID_Movement_Turning!SID_Movement_MovementAndAvoidance -> entered!SID_Movement_Turning!SID_Movement_MovementAndAvoidance ->
									State_Movement_Turning_aux(id__,
											    const_RSMov_Movement_alpha)
				State_Movement_Turning_aux_execute(id__,o____) = true & (set_turned!false -> SKIP); 
				I_Movement_Turning_i0(id__,
						    const_RSMov_Movement_alpha);
					entered!o____!SID_Movement_Turning ->
					(SKIP; STOP /\ (
						T_Movement_t2(id__,
								    const_RSMov_Movement_alpha)
						[]
						internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Movement_t1,TID_Movement_Turning_t0,TID_Movement_Turning_t3,TID_Movement_Turning_t1,TID_Movement_Turning_t12,TID_Movement_Turning_t2,TID_Movement_t3,TID_Movement_t2,TID_Movement_Turning_t13,TID_Movement_Turning_t4,TID_Movement_Turning_t9,TID_Movement_t4,TID_Movement_t5,TID_Movement_Turning_t16,TID_Movement_Turning_t5,TID_Movement_Turning_t10,TID_Movement_Turning_t15}) -> exit?y____:diff(SIDS,{SID_Movement_Turning})!SID_Movement_Turning -> (
								exit!SID_Movement_Turning?z____:{SID_Movement_Turning_SInit,SID_Movement_Turning_Turn180,SID_Movement_Turning_RandomTurn,SID_Movement_Turning_f0,SID_Movement_Turning_WaitTurn180,SID_Movement_Turning_WaitRandomTurn} -> exited!SID_Movement_Turning!z____ -> 
										SKIP;
								SKIP;
								exited!y____!SID_Movement_Turning -> SKIP);
								State_Movement_Turning_aux(id__,
										    const_RSMov_Movement_alpha)
					))
			within
				enter?x____:diff(SIDS,{SID_Movement_Turning})!SID_Movement_Turning -> (State_Movement_Turning_aux_execute(id__,x____))
			
			CS_Movement_Turning_SInit_sync = {|
				enter.y____.x____, 
				entered.y____.x____, 
				exit.y____.x____, 
				exited.y____.x____,
				enter.x____.y____, 
				entered.x____.y____, 
				exit.x____.y____, 
				exited.x____.y____ |
				x____ <- {SID_Movement_Turning_SInit,SID_Movement_Turning_Turn180,SID_Movement_Turning_RandomTurn,SID_Movement_Turning_f0,SID_Movement_Turning_WaitTurn180,SID_Movement_Turning_WaitRandomTurn},
				y____ <- {SID_Movement_Turning_SInit}
			|}
			
			
			Movement_Turning_SInit_triggers = {|
				internal__.TID_Movement_Turning_t3,
				internal__.TID_Movement_Turning_t1,
				internal__.TID_Movement_Turning_t12,
				internal__.TID_Movement_Turning_t2,
				internal__.TID_Movement_Turning_t4,
				internal__.TID_Movement_Turning_t13,
				internal__.TID_Movement_Turning_t5,
				internal__.TID_Movement_Turning_t16,
				internal__.TID_Movement_Turning_t9,
				internal__.TID_Movement_Turning_t10,
				internal__.TID_Movement_Turning_t15
			|}
			
			State_Movement_Turning_SInit(id__,
					    const_RSMov_Movement_alpha) = let
				T_Movement_Turning_t1(id__,
						    const_RSMov_Movement_alpha) = internal__!TID_Movement_Turning_t1 ->  exit.SID_Movement_Turning_SInit.SID_Movement_Turning_SInit -> SKIP;
									SKIP;exited.SID_Movement_Turning_SInit.SID_Movement_Turning_SInit -> SKIP;
									J_Movement_Turning_j0(id__,
											    const_RSMov_Movement_alpha)
				J_Movement_Turning_j0(id__,
						    const_RSMov_Movement_alpha) = (
							(internal__!TID_Movement_Turning_t2 -> enter!SID_Movement_Turning_SInit!SID_Movement_Turning_Turn180 -> entered!SID_Movement_Turning_SInit!SID_Movement_Turning_Turn180 ->
							State_Movement_Turning_SInit(id__,
									    const_RSMov_Movement_alpha)
							)[]
							(internal__!TID_Movement_Turning_t3 -> enter!SID_Movement_Turning_SInit!SID_Movement_Turning_RandomTurn -> entered!SID_Movement_Turning_SInit!SID_Movement_Turning_RandomTurn ->
							State_Movement_Turning_SInit(id__,
									    const_RSMov_Movement_alpha)
							)
							)
				State_Movement_Turning_SInit_execute(id__,o____) = SKIP; 
					entered!o____!SID_Movement_Turning_SInit ->
					(SKIP; STOP /\ (
						T_Movement_Turning_t1(id__,
								    const_RSMov_Movement_alpha)
						[]
						internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Movement_Turning_t3,TID_Movement_Turning_t1,TID_Movement_Turning_t12,TID_Movement_Turning_t2,TID_Movement_Turning_t4,TID_Movement_Turning_t13,TID_Movement_Turning_t5,TID_Movement_Turning_t16,TID_Movement_Turning_t9,TID_Movement_Turning_t10,TID_Movement_Turning_t15}) -> exit?y____:diff(SIDS,{SID_Movement_Turning_SInit})!SID_Movement_Turning_SInit -> (
								SKIP;
								exited!y____!SID_Movement_Turning_SInit -> SKIP);
								State_Movement_Turning_SInit(id__,
										    const_RSMov_Movement_alpha)
					))
			within
				enter?x____:diff(SIDS,{SID_Movement_Turning_SInit})!SID_Movement_Turning_SInit -> (State_Movement_Turning_SInit_execute(id__,x____))
			
			CS_Movement_Turning_Turn180_sync = {|
				enter.y____.x____, 
				entered.y____.x____, 
				exit.y____.x____, 
				exited.y____.x____,
				enter.x____.y____, 
				entered.x____.y____, 
				exit.x____.y____, 
				exited.x____.y____ |
				x____ <- {SID_Movement_Turning_SInit,SID_Movement_Turning_Turn180,SID_Movement_Turning_RandomTurn,SID_Movement_Turning_f0,SID_Movement_Turning_WaitTurn180,SID_Movement_Turning_WaitRandomTurn},
				y____ <- {SID_Movement_Turning_Turn180}
			|}
			
			
			Movement_Turning_Turn180_triggers = {|
				internal__.TID_Movement_Turning_t12,
				internal__.TID_Movement_Turning_t4,
				internal__.TID_Movement_Turning_t13,
				internal__.TID_Movement_Turning_t9
			|}
			
			State_Movement_Turning_Turn180(id__,
					    const_RSMov_Movement_alpha) = let
				T_Movement_Turning_t9(id__,
						    const_RSMov_Movement_alpha) = internal__!TID_Movement_Turning_t9 ->  exit.SID_Movement_Turning_Turn180.SID_Movement_Turning_Turn180 -> SKIP;
									SKIP;exited.SID_Movement_Turning_Turn180.SID_Movement_Turning_Turn180 -> SKIP;
									J_Movement_Turning_j1(id__,
											    const_RSMov_Movement_alpha)
				J_Movement_Turning_j1(id__,
						    const_RSMov_Movement_alpha) = (
							(internal__!TID_Movement_Turning_t4 -> endexec -> startexec -> SKIP;enter!SID_Movement_Turning_Turn180!SID_Movement_Turning_WaitTurn180 -> entered!SID_Movement_Turning_Turn180!SID_Movement_Turning_WaitTurn180 ->
							State_Movement_Turning_Turn180(id__,
									    const_RSMov_Movement_alpha)
							)
							)
				State_Movement_Turning_Turn180_execute(id__,o____) = true&CALL__move(
							id__,
							0,
							1
						); 
					entered!o____!SID_Movement_Turning_Turn180 ->
					(SKIP; STOP /\ (
						T_Movement_Turning_t9(id__,
								    const_RSMov_Movement_alpha)
						[]
						internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Movement_Turning_t12,TID_Movement_Turning_t4,TID_Movement_Turning_t13,TID_Movement_Turning_t9}) -> exit?y____:diff(SIDS,{SID_Movement_Turning_Turn180})!SID_Movement_Turning_Turn180 -> (
								SKIP;
								exited!y____!SID_Movement_Turning_Turn180 -> SKIP);
								State_Movement_Turning_Turn180(id__,
										    const_RSMov_Movement_alpha)
					))
			within
				enter?x____:diff(SIDS,{SID_Movement_Turning_Turn180})!SID_Movement_Turning_Turn180 -> (State_Movement_Turning_Turn180_execute(id__,x____))
			
			CS_Movement_Turning_RandomTurn_sync = {|
				enter.y____.x____, 
				entered.y____.x____, 
				exit.y____.x____, 
				exited.y____.x____,
				enter.x____.y____, 
				entered.x____.y____, 
				exit.x____.y____, 
				exited.x____.y____ |
				x____ <- {SID_Movement_Turning_SInit,SID_Movement_Turning_Turn180,SID_Movement_Turning_RandomTurn,SID_Movement_Turning_f0,SID_Movement_Turning_WaitTurn180,SID_Movement_Turning_WaitRandomTurn},
				y____ <- {SID_Movement_Turning_RandomTurn}
			|}
			
			
			Movement_Turning_RandomTurn_triggers = {|
				internal__.TID_Movement_Turning_t5,
				internal__.TID_Movement_Turning_t16,
				internal__.TID_Movement_Turning_t10,
				internal__.TID_Movement_Turning_t15
			|}
			
			State_Movement_Turning_RandomTurn(id__,
					    const_RSMov_Movement_alpha) = let
				T_Movement_Turning_t10(id__,
						    const_RSMov_Movement_alpha) = internal__!TID_Movement_Turning_t10 ->  exit.SID_Movement_Turning_RandomTurn.SID_Movement_Turning_RandomTurn -> SKIP;
									SKIP;exited.SID_Movement_Turning_RandomTurn.SID_Movement_Turning_RandomTurn -> SKIP;
									J_Movement_Turning_j2(id__,
											    const_RSMov_Movement_alpha)
				J_Movement_Turning_j2(id__,
						    const_RSMov_Movement_alpha) = (
							(internal__!TID_Movement_Turning_t5 -> endexec -> startexec -> SKIP;enter!SID_Movement_Turning_RandomTurn!SID_Movement_Turning_WaitRandomTurn -> entered!SID_Movement_Turning_RandomTurn!SID_Movement_Turning_WaitRandomTurn ->
							State_Movement_Turning_RandomTurn(id__,
									    const_RSMov_Movement_alpha)
							)
							)
				State_Movement_Turning_RandomTurn_execute(id__,o____) = true&CALL__move(
							id__,
							0,
							1
						); 
					entered!o____!SID_Movement_Turning_RandomTurn ->
					(SKIP; STOP /\ (
						T_Movement_Turning_t10(id__,
								    const_RSMov_Movement_alpha)
						[]
						internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Movement_Turning_t5,TID_Movement_Turning_t16,TID_Movement_Turning_t10,TID_Movement_Turning_t15}) -> exit?y____:diff(SIDS,{SID_Movement_Turning_RandomTurn})!SID_Movement_Turning_RandomTurn -> (
								SKIP;
								exited!y____!SID_Movement_Turning_RandomTurn -> SKIP);
								State_Movement_Turning_RandomTurn(id__,
										    const_RSMov_Movement_alpha)
					))
			within
				enter?x____:diff(SIDS,{SID_Movement_Turning_RandomTurn})!SID_Movement_Turning_RandomTurn -> (State_Movement_Turning_RandomTurn_execute(id__,x____))
			
			CS_Movement_Turning_f0_sync = {|
				enter.y____.x____, 
				entered.y____.x____, 
				exit.y____.x____, 
				exited.y____.x____,
				enter.x____.y____, 
				entered.x____.y____, 
				exit.x____.y____, 
				exited.x____.y____ |
				x____ <- {SID_Movement_Turning_SInit,SID_Movement_Turning_Turn180,SID_Movement_Turning_RandomTurn,SID_Movement_Turning_f0,SID_Movement_Turning_WaitTurn180,SID_Movement_Turning_WaitRandomTurn},
				y____ <- {SID_Movement_Turning_f0}
			|}
			
			
			Movement_Turning_f0_triggers = {|
			|}
			
			State_Movement_Turning_f0(id__,
					    const_RSMov_Movement_alpha) = let
				State_Movement_Turning_f0_execute(id__,o____) = SKIP; 
					entered!o____!SID_Movement_Turning_f0 ->
					(SKIP; STOP /\ (
						internal__?x____:diff(ITIDS,{NULLTRANSITION__}) -> exit?y____:diff(SIDS,{SID_Movement_Turning_f0})!SID_Movement_Turning_f0 -> (
								SKIP;
								exited!y____!SID_Movement_Turning_f0 -> SKIP);
								State_Movement_Turning_f0(id__,
										    const_RSMov_Movement_alpha)
					))
			within
				enter?x____:diff(SIDS,{SID_Movement_Turning_f0})!SID_Movement_Turning_f0 -> (State_Movement_Turning_f0_execute(id__,x____))
			
			CS_Movement_Turning_WaitTurn180_sync = {|
				enter.y____.x____, 
				entered.y____.x____, 
				exit.y____.x____, 
				exited.y____.x____,
				enter.x____.y____, 
				entered.x____.y____, 
				exit.x____.y____, 
				exited.x____.y____ |
				x____ <- {SID_Movement_Turning_SInit,SID_Movement_Turning_Turn180,SID_Movement_Turning_RandomTurn,SID_Movement_Turning_f0,SID_Movement_Turning_WaitTurn180,SID_Movement_Turning_WaitRandomTurn},
				y____ <- {SID_Movement_Turning_WaitTurn180}
			|}
			
			
			Movement_Turning_WaitTurn180_triggers = {|
				internal__.TID_Movement_Turning_t12,
				internal__.TID_Movement_Turning_t13,
				internal__.TID_Movement_Turning_t4
			|}
			
			State_Movement_Turning_WaitTurn180(id__,
					    const_RSMov_Movement_alpha) = let
				T_Movement_Turning_t12(id__,
						    const_RSMov_Movement_alpha) = internal__!TID_Movement_Turning_t12 ->  exit.SID_Movement_Turning_WaitTurn180.SID_Movement_Turning_WaitTurn180 -> SKIP;
									SKIP;exited.SID_Movement_Turning_WaitTurn180.SID_Movement_Turning_WaitTurn180 -> SKIP;
									true & (set_turned!true -> SKIP);enter!SID_Movement_Turning_WaitTurn180!SID_Movement_Turning_f0 -> entered!SID_Movement_Turning_WaitTurn180!SID_Movement_Turning_f0 ->
									State_Movement_Turning_WaitTurn180(id__,
											    const_RSMov_Movement_alpha)
				T_Movement_Turning_t13(id__,
						    const_RSMov_Movement_alpha) = internal__!TID_Movement_Turning_t13 ->  exit.SID_Movement_Turning_WaitTurn180.SID_Movement_Turning_WaitTurn180 -> SKIP;
									SKIP;exited.SID_Movement_Turning_WaitTurn180.SID_Movement_Turning_WaitTurn180 -> SKIP;
									J_Movement_Turning_j1(id__,
											    const_RSMov_Movement_alpha)
				J_Movement_Turning_j1(id__,
						    const_RSMov_Movement_alpha) = (
							(internal__!TID_Movement_Turning_t4 -> endexec -> startexec -> SKIP;enter!SID_Movement_Turning_WaitTurn180!SID_Movement_Turning_WaitTurn180 -> State_Movement_Turning_WaitTurn180_execute(id__,SID_Movement_Turning_WaitTurn180)
							)
							)
				State_Movement_Turning_WaitTurn180_execute(id__,o____) = SKIP; 
					entered!o____!SID_Movement_Turning_WaitTurn180 ->
					(SKIP; STOP /\ (
						T_Movement_Turning_t12(id__,
								    const_RSMov_Movement_alpha)[]
						T_Movement_Turning_t13(id__,
								    const_RSMov_Movement_alpha)
						[]
						internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Movement_Turning_t12,TID_Movement_Turning_t13,TID_Movement_Turning_t4}) -> exit?y____:diff(SIDS,{SID_Movement_Turning_WaitTurn180})!SID_Movement_Turning_WaitTurn180 -> (
								SKIP;
								exited!y____!SID_Movement_Turning_WaitTurn180 -> SKIP);
								State_Movement_Turning_WaitTurn180(id__,
										    const_RSMov_Movement_alpha)
					))
			within
				enter?x____:diff(SIDS,{SID_Movement_Turning_WaitTurn180})!SID_Movement_Turning_WaitTurn180 -> (State_Movement_Turning_WaitTurn180_execute(id__,x____))
			
			CS_Movement_Turning_WaitRandomTurn_sync = {|
				enter.y____.x____, 
				entered.y____.x____, 
				exit.y____.x____, 
				exited.y____.x____,
				enter.x____.y____, 
				entered.x____.y____, 
				exit.x____.y____, 
				exited.x____.y____ |
				x____ <- {SID_Movement_Turning_SInit,SID_Movement_Turning_Turn180,SID_Movement_Turning_RandomTurn,SID_Movement_Turning_f0,SID_Movement_Turning_WaitTurn180,SID_Movement_Turning_WaitRandomTurn},
				y____ <- {SID_Movement_Turning_WaitRandomTurn}
			|}
			
			
			Movement_Turning_WaitRandomTurn_triggers = {|
				internal__.TID_Movement_Turning_t16,
				internal__.TID_Movement_Turning_t5,
				internal__.TID_Movement_Turning_t15
			|}
			
			State_Movement_Turning_WaitRandomTurn(id__,
					    const_RSMov_Movement_alpha) = let
				T_Movement_Turning_t15(id__,
						    const_RSMov_Movement_alpha) = internal__!TID_Movement_Turning_t15 ->  exit.SID_Movement_Turning_WaitRandomTurn.SID_Movement_Turning_WaitRandomTurn -> SKIP;
									SKIP;exited.SID_Movement_Turning_WaitRandomTurn.SID_Movement_Turning_WaitRandomTurn -> SKIP;
									J_Movement_Turning_j2(id__,
											    const_RSMov_Movement_alpha)
				T_Movement_Turning_t16(id__,
						    const_RSMov_Movement_alpha) = internal__!TID_Movement_Turning_t16 ->  exit.SID_Movement_Turning_WaitRandomTurn.SID_Movement_Turning_WaitRandomTurn -> SKIP;
									SKIP;exited.SID_Movement_Turning_WaitRandomTurn.SID_Movement_Turning_WaitRandomTurn -> SKIP;
									true & (set_turned!true -> SKIP);enter!SID_Movement_Turning_WaitRandomTurn!SID_Movement_Turning_f0 -> entered!SID_Movement_Turning_WaitRandomTurn!SID_Movement_Turning_f0 ->
									State_Movement_Turning_WaitRandomTurn(id__,
											    const_RSMov_Movement_alpha)
				J_Movement_Turning_j2(id__,
						    const_RSMov_Movement_alpha) = (
							(internal__!TID_Movement_Turning_t5 -> endexec -> startexec -> SKIP;enter!SID_Movement_Turning_WaitRandomTurn!SID_Movement_Turning_WaitRandomTurn -> State_Movement_Turning_WaitRandomTurn_execute(id__,SID_Movement_Turning_WaitRandomTurn)
							)
							)
				State_Movement_Turning_WaitRandomTurn_execute(id__,o____) = SKIP; 
					entered!o____!SID_Movement_Turning_WaitRandomTurn ->
					(SKIP; STOP /\ (
						T_Movement_Turning_t15(id__,
								    const_RSMov_Movement_alpha)[]
						T_Movement_Turning_t16(id__,
								    const_RSMov_Movement_alpha)
						[]
						internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Movement_Turning_t16,TID_Movement_Turning_t5,TID_Movement_Turning_t15}) -> exit?y____:diff(SIDS,{SID_Movement_Turning_WaitRandomTurn})!SID_Movement_Turning_WaitRandomTurn -> (
								SKIP;
								exited!y____!SID_Movement_Turning_WaitRandomTurn -> SKIP);
								State_Movement_Turning_WaitRandomTurn(id__,
										    const_RSMov_Movement_alpha)
					))
			within
				enter?x____:diff(SIDS,{SID_Movement_Turning_WaitRandomTurn})!SID_Movement_Turning_WaitRandomTurn -> (State_Movement_Turning_WaitRandomTurn_execute(id__,x____))
			
			CS_Movement_InfoNeighbours_sync = {|
				enter.y____.x____, 
				entered.y____.x____, 
				exit.y____.x____, 
				exited.y____.x____,
				enter.x____.y____, 
				entered.x____.y____, 
				exit.x____.y____, 
				exited.x____.y____ |
				x____ <- {SID_Movement_MovementAndAvoidance,SID_Movement_Turning,SID_Movement_InfoNeighbours},
				y____ <- {SID_Movement_InfoNeighbours}
			|}
			
			
			Movement_InfoNeighbours_triggers = {|
				internal__.TID_Movement_t1,
				internal__.TID_Movement_t4,
				internal__.TID_Movement_t5,
				internal__.TID_Movement_t3,
				internal__.TID_Movement_t2
			|}
			
			State_Movement_InfoNeighbours(id__,
					    const_RSMov_Movement_alpha) = let
				T_Movement_t5(id__,
						    const_RSMov_Movement_alpha) = endexec__.TID_Movement_t5 -> startexec ->  (exit.SID_Movement_InfoNeighbours.SID_Movement_InfoNeighbours -> SKIP;
									SKIP;exited.SID_Movement_InfoNeighbours.SID_Movement_InfoNeighbours -> SKIP;
									J_Movement_j0(id__,
											    const_RSMov_Movement_alpha))
				J_Movement_j0(id__,
						    const_RSMov_Movement_alpha) = (
							(internal__!TID_Movement_t4 -> get_neighbours?b__?x__ -> set_n!x__ -> SKIP
							;enter!SID_Movement_InfoNeighbours!SID_Movement_Turning -> entered!SID_Movement_InfoNeighbours!SID_Movement_Turning ->
							State_Movement_InfoNeighbours(id__,
									    const_RSMov_Movement_alpha)
							)[]
							(internal__!TID_Movement_t3 -> enter!SID_Movement_InfoNeighbours!SID_Movement_InfoNeighbours -> State_Movement_InfoNeighbours_execute(id__,SID_Movement_InfoNeighbours)
							)
							)
				State_Movement_InfoNeighbours_execute(id__,o____) = SKIP; 
					entered!o____!SID_Movement_InfoNeighbours ->
					(SKIP; STOP /\ (
						T_Movement_t5(id__,
								    const_RSMov_Movement_alpha)
						[]
						internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Movement_t1,TID_Movement_t4,TID_Movement_t5,TID_Movement_t3,TID_Movement_t2}) -> exit?y____:diff(SIDS,{SID_Movement_InfoNeighbours})!SID_Movement_InfoNeighbours -> (
								SKIP;
								exited!y____!SID_Movement_InfoNeighbours -> SKIP);
								State_Movement_InfoNeighbours(id__,
										    const_RSMov_Movement_alpha)
					))
			within
				enter?x____:diff(SIDS,{SID_Movement_InfoNeighbours})!SID_Movement_InfoNeighbours -> (State_Movement_InfoNeighbours_execute(id__,x____))
			
			
			I_Movement_MovementAndAvoidance_i0(id__,
					    const_RSMov_Movement_alpha) = let
				T_Movement_MovementAndAvoidance_t0(id__,
						    const_RSMov_Movement_alpha) = internal__!TID_Movement_MovementAndAvoidance_t0 -> DoClockReset({clockReset.CLID_MBC});enter!SID_Movement_MovementAndAvoidance!SID_Movement_MovementAndAvoidance_SMove -> entered!SID_Movement_MovementAndAvoidance!SID_Movement_MovementAndAvoidance_SMove ->
				SKIP
			within
				T_Movement_MovementAndAvoidance_t0(id__,
						    const_RSMov_Movement_alpha)
			
			I_Movement_i0(id__,
					    const_RSMov_Movement_alpha) = let
				T_Movement_t0(id__,
						    const_RSMov_Movement_alpha) = internal__!TID_Movement_t0 -> enter!SID_Movement!SID_Movement_MovementAndAvoidance -> entered!SID_Movement!SID_Movement_MovementAndAvoidance ->
				SKIP
			within
				T_Movement_t0(id__,
						    const_RSMov_Movement_alpha)
			
			I_Movement_Turning_i0(id__,
					    const_RSMov_Movement_alpha) = let
				T_Movement_Turning_t0(id__,
						    const_RSMov_Movement_alpha) = internal__!TID_Movement_Turning_t0 -> enter!SID_Movement_Turning!SID_Movement_Turning_SInit -> entered!SID_Movement_Turning!SID_Movement_Turning_SInit ->
				SKIP
			within
				T_Movement_Turning_t0(id__,
						    const_RSMov_Movement_alpha)
			
			
			State_Movement_MovementAndAvoidance_R(id__,
					    const_RSMov_Movement_alpha) = 
				State_Movement_MovementAndAvoidance(id__,
						    const_RSMov_Movement_alpha)
					[|diff(int_int,Movement_MovementAndAvoidance_triggers)|]
				SKIP
					 		
			State_Movement_Turning_R(id__,
					    const_RSMov_Movement_alpha) = 
				State_Movement_Turning(id__,
						    const_RSMov_Movement_alpha)
					[|diff(int_int,Movement_Turning_triggers)|]
				SKIP
					 		
			State_Movement_InfoNeighbours_R(id__,
					    const_RSMov_Movement_alpha) = 
				State_Movement_InfoNeighbours(id__,
						    const_RSMov_Movement_alpha)
					[|diff(int_int,Movement_InfoNeighbours_triggers)|]
				SKIP
					 		
				
			STM(id__,
					    const_RSMov_Movement_alpha) = 
				let
					Ending = endexec -> (startexec -> Ending [] terminate -> SKIP)
				within
					startexec -> 
						(
							(
								(
								I_Movement_i0(id__,
										    const_RSMov_Movement_alpha)
									[|
										{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
											x____ <- diff(SIDS,{SID_Movement_MovementAndAvoidance,SID_Movement_Turning,SID_Movement_InfoNeighbours}),
											y____ <- {SID_Movement_MovementAndAvoidance,SID_Movement_Turning,SID_Movement_InfoNeighbours}
									|}|]
								(
									State_Movement_MovementAndAvoidance_R(id__,
											    const_RSMov_Movement_alpha)
										[|inter(CS_Movement_MovementAndAvoidance_sync,union(CS_Movement_Turning_sync,CS_Movement_InfoNeighbours_sync))|]
									(
										State_Movement_Turning_R(id__,
												    const_RSMov_Movement_alpha)
											[|inter(CS_Movement_Turning_sync,CS_Movement_InfoNeighbours_sync)|]
										State_Movement_InfoNeighbours_R(id__,
												    const_RSMov_Movement_alpha)
									)
								)
								) [|{|terminate|}|> SKIP
							) \ {|terminate|}
						) ; Ending
			
			-- optimized memory process
			channel getV_n: core_nat
			channel getV_p: RSMov_Position
			channel getV_turned: core_boolean
			channel getV_obstacle: Bool.RSMov_Position
			channel getV_neighbours: Bool.core_nat
			
			-- individual memory processes
			
				Memory_n(x__) = ( 
					get_n!x__ -> Memory_n(x__)
					[]
					getV_n!x__ -> Memory_n(x__)
					[]
					set_n?x__ -> Memory_n(x__)
				)
			
				Memory_p(x__) = ( 
					get_p!x__ -> Memory_p(x__)
					[]
					getV_p!x__ -> Memory_p(x__)
					[]
					set_p?x__ -> Memory_p(x__)
				)
			
				Memory_turned(x__) = ( 
					get_turned!x__ -> Memory_turned(x__)
					[]
					getV_turned!x__ -> Memory_turned(x__)
					[]
					set_turned?x__ -> Memory_turned(x__)
				)
			
			Memory_WC_TID_Movement_MovementAndAvoidance_t7_0(x__) = (
				getWC.WC_TID_Movement_MovementAndAvoidance_t7_0_ID!x__ -> Memory_WC_TID_Movement_MovementAndAvoidance_t7_0(x__)
				[]
				setWC.WC_TID_Movement_MovementAndAvoidance_t7_0_ID?x__ -> Memory_WC_TID_Movement_MovementAndAvoidance_t7_0(x__)
			)
			
			Memory_WC_TID_Movement_t1_0(x__) = (
				getWC.WC_TID_Movement_t1_0_ID!x__ -> Memory_WC_TID_Movement_t1_0(x__)
				[]
				setWC.WC_TID_Movement_t1_0_ID?x__ -> Memory_WC_TID_Movement_t1_0(x__)
			)
			
			Memory_WC_TID_Movement_MovementAndAvoidance_t2_0(x__) = (
				getWC.WC_TID_Movement_MovementAndAvoidance_t2_0_ID!x__ -> Memory_WC_TID_Movement_MovementAndAvoidance_t2_0(x__)
				[]
				setWC.WC_TID_Movement_MovementAndAvoidance_t2_0_ID?x__ -> Memory_WC_TID_Movement_MovementAndAvoidance_t2_0(x__)
			)
			
			Memory_WC_TID_Movement_MovementAndAvoidance_t8_0(x__) = (
				getWC.WC_TID_Movement_MovementAndAvoidance_t8_0_ID!x__ -> Memory_WC_TID_Movement_MovementAndAvoidance_t8_0(x__)
				[]
				setWC.WC_TID_Movement_MovementAndAvoidance_t8_0_ID?x__ -> Memory_WC_TID_Movement_MovementAndAvoidance_t8_0(x__)
			)
			
				Memory_obstacle(x__) = (
					get_obstacle!x__ -> Memory_obstacle(x__)
					[]
					getV_obstacle!x__ -> Memory_obstacle(x__)
					[]
					registerRead.i_obstacle?x__ -> Memory_obstacle(x__)
				)
			
				Memory_neighbours(x__) = (
					get_neighbours!x__ -> Memory_neighbours(x__)
					[]
					getV_neighbours!x__ -> Memory_neighbours(x__)
					[]
					registerRead.i_neighbours?x__ -> Memory_neighbours(x__)
				)
			
			-- processes that read variables and offer transitions
					
			MemoryTransitions(id__,
				 n,
				 p,
				 turned,
				 WC_TID_Movement_MovementAndAvoidance_t7_0,
				 WC_TID_Movement_t1_0,
				 WC_TID_Movement_MovementAndAvoidance_t2_0,
				 WC_TID_Movement_MovementAndAvoidance_t8_0,
				 const_RSMov_Movement_alpha,
				 obstacle,
				 neighbours) = (
				startexec -> SKIP
			
				[]	internal__!TID_Movement_MovementAndAvoidance_t0 -> SKIP
				[]
				internal__!TID_Movement_MovementAndAvoidance_t1 -> SKIP
				[]
				((not (((member(obstacle,{true.x__ | x__ <- RSMov_Position}) and (WC_TID_Movement_MovementAndAvoidance_t2_0))))))&(internal__!TID_Movement_MovementAndAvoidance_t2 -> SKIP)
				[]
				((member(obstacle,{true.p | p <- RSMov_Position}) and WC_TID_Movement_MovementAndAvoidance_t2_0))&(internal__!TID_Movement_MovementAndAvoidance_t3 -> SKIP)
				[]
				endexec__!TID_Movement_MovementAndAvoidance_t4 -> SKIP
				[]
				internal__!TID_Movement_MovementAndAvoidance_t5 -> SKIP
				[]
				endexec__!TID_Movement_MovementAndAvoidance_t6 -> SKIP
				[]
				(WC_TID_Movement_MovementAndAvoidance_t7_0)&(internal__!TID_Movement_MovementAndAvoidance_t7 -> SKIP)
				[]
				(WC_TID_Movement_MovementAndAvoidance_t8_0)&(internal__!TID_Movement_MovementAndAvoidance_t8 -> SKIP)
				[]
				internal__!TID_Movement_Turning_t0 -> SKIP
				[]
				internal__!TID_Movement_Turning_t1 -> SKIP
				[]
				((n>const_RSMov_Movement_alpha))&(internal__!TID_Movement_Turning_t2 -> SKIP)
				[]
				((n<=const_RSMov_Movement_alpha))&(internal__!TID_Movement_Turning_t3 -> SKIP)
				[]
				internal__!TID_Movement_Turning_t9 -> SKIP
				[]
				internal__!TID_Movement_Turning_t10 -> SKIP
				[]
				(WC_TID_Movement_MovementAndAvoidance_t8_0)&(internal__!TID_Movement_Turning_t12 -> SKIP)
				[]
				(WC_TID_Movement_MovementAndAvoidance_t7_0)&(internal__!TID_Movement_Turning_t13 -> SKIP)
				[]
				(WC_TID_Movement_MovementAndAvoidance_t7_0)&(internal__!TID_Movement_Turning_t15 -> SKIP)
				[]
				(WC_TID_Movement_MovementAndAvoidance_t8_0)&(internal__!TID_Movement_Turning_t16 -> SKIP)
				[]
				internal__!TID_Movement_Turning_t4 -> SKIP
				[]
				internal__!TID_Movement_Turning_t5 -> SKIP
				[]
				internal__!TID_Movement_t0 -> SKIP
				[]
				(WC_TID_Movement_t1_0)&(internal__!TID_Movement_t1 -> SKIP)
				[]
				(turned)&(internal__!TID_Movement_t2 -> SKIP)
				[]
				(member(neighbours,{true.n | n <- core_nat}))&(internal__!TID_Movement_t4 -> SKIP)
				[]
				((not (member(neighbours,{true.x__ | x__ <- core_nat}))))&(internal__!TID_Movement_t3 -> SKIP)
				[]
				endexec__!TID_Movement_t5 -> SKIP
			
			 	[]
			 	 	set_n?x__ -> SKIP
			 	[]
			 	set_p?x__ -> SKIP
			 	[]
			 	set_turned?x__ -> SKIP
			
			 	[]
			 	 	setWC.WC_TID_Movement_MovementAndAvoidance_t7_0_ID?x__ -> SKIP
			 	[]
			 	setWC.WC_TID_Movement_t1_0_ID?x__ -> SKIP
			 	[]
			 	setWC.WC_TID_Movement_MovementAndAvoidance_t2_0_ID?x__ -> SKIP
			 	[]
			 	setWC.WC_TID_Movement_MovementAndAvoidance_t8_0_ID?x__ -> SKIP
			 			 			 	
			 	)
			MemoryTransitions_Movement(id__,
				 const_RSMov_Movement_alpha) =
				(
				getV_n?n ->	
				getV_p?p ->	
				getV_turned?turned ->	
				getWC.WC_TID_Movement_MovementAndAvoidance_t7_0_ID?WC_TID_Movement_MovementAndAvoidance_t7_0 ->	
				getWC.WC_TID_Movement_t1_0_ID?WC_TID_Movement_t1_0 ->	
				getWC.WC_TID_Movement_MovementAndAvoidance_t2_0_ID?WC_TID_Movement_MovementAndAvoidance_t2_0 ->	
				getWC.WC_TID_Movement_MovementAndAvoidance_t8_0_ID?WC_TID_Movement_MovementAndAvoidance_t8_0 ->	
				getV_obstacle?obstacle ->	
				getV_neighbours?neighbours ->
				 MemoryTransitions(id__,
				 	 n,
				 	 p,
				 	 turned,
				 	 WC_TID_Movement_MovementAndAvoidance_t7_0,
				 	 WC_TID_Movement_t1_0,
				 	 WC_TID_Movement_MovementAndAvoidance_t2_0,
				 	 WC_TID_Movement_MovementAndAvoidance_t8_0,
				 	 const_RSMov_Movement_alpha,
				 	 obstacle,
				 	 neighbours);
				 MemoryTransitions_Movement(id__,
				 	 const_RSMov_Movement_alpha)
				)
			
			-- synchronisation, hiding and process sets 
			MemoryVariablesProcesses_Movement = Union(
				{
					{
						Memory_n(0),
						Memory_p(RSMov_Position_left),
						Memory_turned(true),
						Memory_WC_TID_Movement_MovementAndAvoidance_t7_0(false),
						Memory_WC_TID_Movement_t1_0(false),
						Memory_WC_TID_Movement_MovementAndAvoidance_t2_0(false),
						Memory_WC_TID_Movement_MovementAndAvoidance_t8_0(false),
						Memory_obstacle(false.RSMov_Position_left),
						Memory_neighbours(false.0)
					}
				}
			)
			
			MemoryVariablesSyncSet = Union({
				{|
					getV_neighbours,
					getV_n,
					getWC.WC_TID_Movement_MovementAndAvoidance_t2_0_ID,
					setWC,
					setWC.WC_TID_Movement_MovementAndAvoidance_t2_0_ID,
					getWC.WC_TID_Movement_MovementAndAvoidance_t7_0_ID,
					getWC.WC_TID_Movement_MovementAndAvoidance_t8_0_ID,
					setWC.WC_TID_Movement_MovementAndAvoidance_t8_0_ID,
					getWC.WC_TID_Movement_t1_0_ID,
					set_n,
					getV_turned,
					set_p,
					set_turned,
					setWC.WC_TID_Movement_MovementAndAvoidance_t7_0_ID,
					getV_p,
					setWC.WC_TID_Movement_t1_0_ID,
					getV_obstacle
				|}	
			})
			
			MemoryVariablesHideSet = Union({
				{|
					getV_neighbours,
					getV_turned,
					getV_n,
					getV_p,
					getWC,
					getV_obstacle
				|}
			})
			
			-- combined individual memory processes
			MemoryVariables = ||| P : MemoryVariablesProcesses_Movement @ P
			
			-- complete memory process
			MemoryN(id__,
				 const_RSMov_Movement_alpha) = 
				(MemoryVariables 
				 [| MemoryVariablesSyncSet |] 
				 (	startexec -> wbisim(MemoryTransitions_Movement(id__,
				 	 const_RSMov_Movement_alpha))
				 	[| union({|startexec|},union(Transitions,diff(EndExecs,{endexec}))) |]
				 	-- The following process is an equivalent way to specify that between endexec
				 	-- and startexec no events in the set Transitions are available, thus preventing
				 	-- the state machine from performing transitions in between. Note that there is
				 	-- no synchronisation on the single 'endexec' event itself, because this only
				 	-- arises from an action, and the memory does not interfere with events in
				 	-- actions.
				 	(let
				 		TransitionController = startexec -> (RUN(Transitions) 
				 											 /\ ([] e : EndExecs @ e -> TransitionController))
				 	within 
				 		TransitionController)
				 	
				 	-- It isn't part of MemoryTransitions_ itself, because such a process would need
				 	-- to permit updates to setWC events, emanating from processes controlling clocks.
				 	-- Currently the MemoryTransitions_ process of a software operation called 
				 	-- within this state machine is copied into this process. So to incorporate the
				 	-- control below in such a process would require either:
				 	--
				 	-- (1) knowing about the clocks of every state machine that could call it, which
				 	-- 	   is not compositional;
				 	-- (2) not copying the process, but generating the transition choices explicitly.
				 	--
				 )
				) \ MemoryVariablesHideSet
			
			-- optimised memory
			-- Sets of named elements identified according to transition conditions:
			-- {}
			-- {WC_TID_Movement_MovementAndAvoidance_t8_0}
			-- {turned}
			-- {n,alpha}
			-- {WC_TID_Movement_t1_0}
			-- {obstacle,WC_TID_Movement_MovementAndAvoidance_t2_0}
			-- {neighbours}
			-- {WC_TID_Movement_MovementAndAvoidance_t7_0}
			-- Summary of all identified named elements:
			-- {
			-- WC_TID_Movement_MovementAndAvoidance_t8_0
			-- n
			-- turned
			-- alpha
			-- WC_TID_Movement_t1_0
			-- p
			-- obstacle
			-- neighbours
			-- WC_TID_Movement_MovementAndAvoidance_t2_0
			-- WC_TID_Movement_MovementAndAvoidance_t7_0
			-- }
			
			-- Allocation plan:
			-- 0:{}
			--	=> {
			--		TID_Movement_Turning_t10,
			--		TID_Movement_Turning_t9,
			--		TID_Movement_Turning_t4,
			--		TID_Movement_Turning_t1,
			--		TID_Movement_Turning_t0,
			--		TID_Movement_MovementAndAvoidance_t5,
			--		TID_Movement_MovementAndAvoidance_t0,
			--		TID_Movement_Turning_t5,
			--		TID_Movement_MovementAndAvoidance_t4,
			--		TID_Movement_t0,
			--		TID_Movement_t5,
			--		TID_Movement_MovementAndAvoidance_t6,
			--		TID_Movement_MovementAndAvoidance_t1}
			-- 1:{WC_TID_Movement_MovementAndAvoidance_t8_0}
			--	=> {
			--		TID_Movement_Turning_t12,
			--		TID_Movement_Turning_t16,
			--		TID_Movement_MovementAndAvoidance_t8}
			-- 2:{turned}
			--	=> {
			--		TID_Movement_t2}
			-- 6:{n,alpha}
			--	=> {
			--		TID_Movement_Turning_t3,
			--		TID_Movement_Turning_t2}
			-- 3:{WC_TID_Movement_t1_0}
			--	=> {
			--		TID_Movement_t1}
			-- 7:{obstacle,WC_TID_Movement_MovementAndAvoidance_t2_0}
			--	=> {
			--		TID_Movement_MovementAndAvoidance_t3,
			--		TID_Movement_MovementAndAvoidance_t2}
			-- 4:{neighbours}
			--	=> {
			--		TID_Movement_t4,
			--		TID_Movement_t3}
			-- 5:{WC_TID_Movement_MovementAndAvoidance_t7_0}
			--	=> {
			--		TID_Movement_Turning_t13,
			--		TID_Movement_Turning_t15,
			--		TID_Movement_MovementAndAvoidance_t7}
			
			-- Memory transition processes
			MemoryTransitions_opt_0(id__) =
			(
				let
					Update = Current(id__)
					Current(id__)
					 	   = 
					 	   internal__!TID_Movement_Turning_t10 -> Update
					 	   []
					 	   internal__!TID_Movement_Turning_t9 -> Update
					 	   []
					 	   internal__!TID_Movement_Turning_t4 -> Update
					 	   []
					 	   internal__!TID_Movement_Turning_t1 -> Update
					 	   []
					 	   internal__!TID_Movement_Turning_t0 -> Update
					 	   []
					 	   internal__!TID_Movement_MovementAndAvoidance_t5 -> Update
					 	   []
					 	   internal__!TID_Movement_MovementAndAvoidance_t0 -> Update
					 	   []
					 	   internal__!TID_Movement_Turning_t5 -> Update
					 	   []
					 	   endexec__!TID_Movement_MovementAndAvoidance_t4 -> Update
					 	   []
					 	   internal__!TID_Movement_t0 -> Update
					 	   []
					 	   endexec__!TID_Movement_t5 -> Update
					 	   []
					 	   endexec__!TID_Movement_MovementAndAvoidance_t6 -> Update
					 	   []
					 	   internal__!TID_Movement_MovementAndAvoidance_t1 -> Update
					 	   	 []
					 	   	 startexec -> Update
				within
					Update
			)
			MemoryTransitions_opt_1(id__) =
			(
				let
					Update = 
					getWC.WC_TID_Movement_MovementAndAvoidance_t8_0_ID?WC_TID_Movement_MovementAndAvoidance_t8_0 ->
					Current(id__,
						 WC_TID_Movement_MovementAndAvoidance_t8_0)
					Current(id__,
						 WC_TID_Movement_MovementAndAvoidance_t8_0)
					 	   = 
					 	   (WC_TID_Movement_MovementAndAvoidance_t8_0)&(internal__!TID_Movement_Turning_t12 -> Update)
					 	   []
					 	   (WC_TID_Movement_MovementAndAvoidance_t8_0)&(internal__!TID_Movement_Turning_t16 -> Update)
					 	   []
					 	   (WC_TID_Movement_MovementAndAvoidance_t8_0)&(internal__!TID_Movement_MovementAndAvoidance_t8 -> Update)
					 	   	 []
					 	   	 startexec -> Update
					 	   	 
					 	   	 []
					 	   	 setWC.WC_TID_Movement_MovementAndAvoidance_t8_0_ID?x__ -> Update
				within
					Update
			)
			MemoryTransitions_opt_2(id__) =
			(
				let
					Update = 
					get_turned?turned ->
					Current(id__,
						 turned)
					Current(id__,
						 turned)
					 	   = 
					 	   (turned)&(internal__!TID_Movement_t2 -> Update)
					 	   	 []
					 	   	 startexec -> Update
					 	   	 
					 	   	 []
					 	   	 set_turned?x__ -> Update
				within
					Update
			)
			MemoryTransitions_opt_6(id__,
				 const_RSMov_Movement_alpha) =
			(
				let
					Update = 
					get_n?n ->
					Current(id__,
						 n)
					Current(id__,
						 n)
					 	   = 
					 	   ((n<=const_RSMov_Movement_alpha))&(internal__!TID_Movement_Turning_t3 -> Update)
					 	   []
					 	   ((n>const_RSMov_Movement_alpha))&(internal__!TID_Movement_Turning_t2 -> Update)
					 	   	 []
					 	   	 startexec -> Update
					 	   	 
					 	   	 []
					 	   	 set_n?x__ -> Update
				within
					Update
			)
			MemoryTransitions_opt_3(id__) =
			(
				let
					Update = 
					getWC.WC_TID_Movement_t1_0_ID?WC_TID_Movement_t1_0 ->
					Current(id__,
						 WC_TID_Movement_t1_0)
					Current(id__,
						 WC_TID_Movement_t1_0)
					 	   = 
					 	   (WC_TID_Movement_t1_0)&(internal__!TID_Movement_t1 -> Update)
					 	   	 []
					 	   	 startexec -> Update
					 	   	 
					 	   	 []
					 	   	 setWC.WC_TID_Movement_t1_0_ID?x__ -> Update
				within
					Update
			)
			MemoryTransitions_opt_7(id__) =
			(
				let
					Update = 
					get_obstacle?obstacle ->
					getWC.WC_TID_Movement_MovementAndAvoidance_t2_0_ID?WC_TID_Movement_MovementAndAvoidance_t2_0 ->
					Current(id__,
						 obstacle,
						 WC_TID_Movement_MovementAndAvoidance_t2_0)
					Current(id__,
						 obstacle,
						 WC_TID_Movement_MovementAndAvoidance_t2_0)
					 	   = 
					 	   ((member(obstacle,{true.p | p <- RSMov_Position}) and WC_TID_Movement_MovementAndAvoidance_t2_0))&(internal__!TID_Movement_MovementAndAvoidance_t3 -> Update)
					 	   []
					 	   ((not (((member(obstacle,{true.x__ | x__ <- RSMov_Position}) and (WC_TID_Movement_MovementAndAvoidance_t2_0))))))&(internal__!TID_Movement_MovementAndAvoidance_t2 -> Update)
					 	   	 []
					 	   	 startexec -> Update
					 	   	 
					 	   	 []
					 	   	 setWC.WC_TID_Movement_MovementAndAvoidance_t2_0_ID?x__ -> Update
				within
					Update
			)
			MemoryTransitions_opt_4(id__) =
			(
				let
					Update = 
					get_neighbours?neighbours ->
					Current(id__,
						 neighbours)
					Current(id__,
						 neighbours)
					 	   = 
					 	   (member(neighbours,{true.n | n <- core_nat}))&(internal__!TID_Movement_t4 -> Update)
					 	   []
					 	   ((not (member(neighbours,{true.x__ | x__ <- core_nat}))))&(internal__!TID_Movement_t3 -> Update)
					 	   	 []
					 	   	 startexec -> Update
				within
					Update
			)
			MemoryTransitions_opt_5(id__) =
			(
				let
					Update = 
					getWC.WC_TID_Movement_MovementAndAvoidance_t7_0_ID?WC_TID_Movement_MovementAndAvoidance_t7_0 ->
					Current(id__,
						 WC_TID_Movement_MovementAndAvoidance_t7_0)
					Current(id__,
						 WC_TID_Movement_MovementAndAvoidance_t7_0)
					 	   = 
					 	   (WC_TID_Movement_MovementAndAvoidance_t7_0)&(internal__!TID_Movement_Turning_t13 -> Update)
					 	   []
					 	   (WC_TID_Movement_MovementAndAvoidance_t7_0)&(internal__!TID_Movement_Turning_t15 -> Update)
					 	   []
					 	   (WC_TID_Movement_MovementAndAvoidance_t7_0)&(internal__!TID_Movement_MovementAndAvoidance_t7 -> Update)
					 	   	 []
					 	   	 startexec -> Update
					 	   	 
					 	   	 []
					 	   	 setWC.WC_TID_Movement_MovementAndAvoidance_t7_0_ID?x__ -> Update
				within
					Update
			)
			
			-- Memory cell processes
			Memory_opt_WC_TID_Movement_MovementAndAvoidance_t8_0(x__) = ( 
				getWC.WC_TID_Movement_MovementAndAvoidance_t8_0_ID!x__ -> Memory_opt_WC_TID_Movement_MovementAndAvoidance_t8_0(x__)
				[]
				setWC.WC_TID_Movement_MovementAndAvoidance_t8_0_ID?x__ -> Memory_opt_WC_TID_Movement_MovementAndAvoidance_t8_0(x__)
			)
			Memory_opt_n(x__) = ( 
				get_n!x__ -> Memory_opt_n(x__)
				[]
				set_n?x__ -> Memory_opt_n(x__)
			)
			Memory_opt_turned(x__) = ( 
				get_turned!x__ -> Memory_opt_turned(x__)
				[]
				set_turned?x__ -> Memory_opt_turned(x__)
			)
			Memory_opt_WC_TID_Movement_t1_0(x__) = ( 
				getWC.WC_TID_Movement_t1_0_ID!x__ -> Memory_opt_WC_TID_Movement_t1_0(x__)
				[]
				setWC.WC_TID_Movement_t1_0_ID?x__ -> Memory_opt_WC_TID_Movement_t1_0(x__)
			)
			Memory_opt_p(x__) = ( 
				get_p!x__ -> Memory_opt_p(x__)
				[]
				set_p?x__ -> Memory_opt_p(x__)
			)
			Memory_opt_obstacle(x__) = (
				get_obstacle!x__ -> Memory_opt_obstacle(x__)
				[]
				registerRead.i_obstacle?x__ -> Memory_opt_obstacle(x__)
			)
			Memory_opt_neighbours(x__) = (
				get_neighbours!x__ -> Memory_opt_neighbours(x__)
				[]
				registerRead.i_neighbours?x__ -> Memory_opt_neighbours(x__)
			)
			Memory_opt_WC_TID_Movement_MovementAndAvoidance_t2_0(x__) = ( 
				getWC.WC_TID_Movement_MovementAndAvoidance_t2_0_ID!x__ -> Memory_opt_WC_TID_Movement_MovementAndAvoidance_t2_0(x__)
				[]
				setWC.WC_TID_Movement_MovementAndAvoidance_t2_0_ID?x__ -> Memory_opt_WC_TID_Movement_MovementAndAvoidance_t2_0(x__)
			)
			Memory_opt_WC_TID_Movement_MovementAndAvoidance_t7_0(x__) = ( 
				getWC.WC_TID_Movement_MovementAndAvoidance_t7_0_ID!x__ -> Memory_opt_WC_TID_Movement_MovementAndAvoidance_t7_0(x__)
				[]
				setWC.WC_TID_Movement_MovementAndAvoidance_t7_0_ID?x__ -> Memory_opt_WC_TID_Movement_MovementAndAvoidance_t7_0(x__)
			)
			
			-- Composition of memory, StateMachine and Memory transition processes
			
			MemorySTM_opt(id__,cycle_RSMov_Movement_Movement,
					    const_RSMov_Movement_alpha) =
				dbisim(
				  sbisim(Memory_opt_WC_TID_Movement_MovementAndAvoidance_t8_0(false)
				      	[| {|setWC.WC_TID_Movement_MovementAndAvoidance_t8_0_ID,getWC.WC_TID_Movement_MovementAndAvoidance_t8_0_ID|} |] 
				      	sbisim(	
				      	  dbisim(
				      	    sbisim(dbisim(
				      	      sbisim(Memory_opt_turned(true)
				      	          	[| {|set_turned,get_turned|} |] 
				      	          	sbisim(	
				      	          	  dbisim(
				      	          	    sbisim(dbisim(
				      	          	      sbisim(Memory_opt_n(0)
				      	          	          	[| {|set_n,get_n|} |] 
				      	          	          	sbisim(	
				      	          	          	  dbisim(
				      	          	          	    sbisim(dbisim(
				      	          	          	      sbisim(Memory_opt_WC_TID_Movement_t1_0(false)
				      	          	          	          	[| {|getWC.WC_TID_Movement_t1_0_ID,setWC.WC_TID_Movement_t1_0_ID|} |] 
				      	          	          	          	sbisim(	
				      	          	          	          	  dbisim(
				      	          	          	          	    sbisim(dbisim(
				      	          	          	          	      sbisim(Memory_opt_obstacle(false.RSMov_Position_left)
				      	          	          	          	          	[| {|get_obstacle,registerRead.i_obstacle|} |] 
				      	          	          	          	          	dbisim(
				      	          	          	          	          	  sbisim(Memory_opt_WC_TID_Movement_MovementAndAvoidance_t2_0(false)
				      	          	          	          	          	      	[| {|getWC.WC_TID_Movement_MovementAndAvoidance_t2_0_ID,setWC.WC_TID_Movement_MovementAndAvoidance_t2_0_ID|} |] 
				      	          	          	          	          	      	sbisim(	
				      	          	          	          	          	      	  dbisim(
				      	          	          	          	          	      	    sbisim(dbisim(
				      	          	          	          	          	      	      sbisim(Memory_opt_neighbours(false.0)
				      	          	          	          	          	      	          	[| {|registerRead.i_neighbours,get_neighbours|} |] 
				      	          	          	          	          	      	          	sbisim(	
				      	          	          	          	          	      	          	  dbisim(
				      	          	          	          	          	      	          	    sbisim(dbisim(
				      	          	          	          	          	      	          	      sbisim(Memory_opt_WC_TID_Movement_MovementAndAvoidance_t7_0(false)
				      	          	          	          	          	      	          	          	[| {|setWC.WC_TID_Movement_MovementAndAvoidance_t7_0_ID,getWC.WC_TID_Movement_MovementAndAvoidance_t7_0_ID|} |] 
				      	          	          	          	          	      	          	          	sbisim(	
				      	          	          	          	          	      	          	          	  dbisim(
				      	          	          	          	          	      	          	          	    sbisim(sbisim(	
				      	          	          	          	          	      	          	          	      dbisim(
				      	          	          	          	          	      	          	          	        sbisim(dbisim(sbisim(Memory_opt_p(RSMov_Position_left)
				      	          	          	          	          	      	          	          	              	[| {|set_p,get_p|} |] 
				      	          	          	          	          	      	          	          	              	STM_core(id__,cycle_RSMov_Movement_Movement,
				      	          	          	          	          	      	          	          	              			    const_RSMov_Movement_alpha)
				      	          	          	          	          	      	          	          	              	)\ {|set_p,get_p|}
				      	          	          	          	          	      	          	          	              )
				      	          	          	          	          	      	          	          	          	  [| union({|startexec|},{|internal__.TID_Movement_Turning_t9,internal__.TID_Movement_Turning_t5,internal__.TID_Movement_Turning_t4,internal__.TID_Movement_Turning_t1,internal__.TID_Movement_Turning_t0,internal__.TID_Movement_MovementAndAvoidance_t5,internal__.TID_Movement_Turning_t10,internal__.TID_Movement_t0,internal__.TID_Movement_MovementAndAvoidance_t0,internal__.TID_Movement_MovementAndAvoidance_t1,endexec__.TID_Movement_MovementAndAvoidance_t4,endexec__.TID_Movement_t5,endexec__.TID_Movement_MovementAndAvoidance_t6|}) |]
				      	          	          	          	          	      	          	          	          	  MemoryTransitions_opt_0(id__)
				      	          	          	          	          	      	          	          	          	  )\{|internal__.TID_Movement_Turning_t9,internal__.TID_Movement_Turning_t5,internal__.TID_Movement_Turning_t4,internal__.TID_Movement_Turning_t1,internal__.TID_Movement_Turning_t0,internal__.TID_Movement_MovementAndAvoidance_t5,internal__.TID_Movement_Turning_t10,internal__.TID_Movement_t0,internal__.TID_Movement_MovementAndAvoidance_t0,internal__.TID_Movement_MovementAndAvoidance_t1|})
				      	          	          	          	          	      	          	          	          	  [[ endexec__.TID_Movement_MovementAndAvoidance_t4 <- endexec ]]
				      	          	          	          	          	      	          	          	          	  [[ endexec__.TID_Movement_t5 <- endexec ]]
				      	          	          	          	          	      	          	          	          	  [[ endexec__.TID_Movement_MovementAndAvoidance_t6 <- endexec ]]
				      	          	          	          	          	      	          	          	          )
				      	          	          	          	          	      	          	          	      	  [| union({|startexec|},{|setWC.WC_TID_Movement_MovementAndAvoidance_t7_0_ID,internal__.TID_Movement_Turning_t15,internal__.TID_Movement_MovementAndAvoidance_t7,internal__.TID_Movement_Turning_t13|}) |]
				      	          	          	          	          	      	          	          	      	  MemoryTransitions_opt_5(id__)
				      	          	          	          	          	      	          	          	      	  )\{|internal__.TID_Movement_Turning_t15,internal__.TID_Movement_MovementAndAvoidance_t7,internal__.TID_Movement_Turning_t13|})
				      	          	          	          	          	      	          	          	      )
				      	          	          	          	          	      	          	          	) \ {|setWC.WC_TID_Movement_MovementAndAvoidance_t7_0_ID,getWC.WC_TID_Movement_MovementAndAvoidance_t7_0_ID|}
				      	          	          	          	          	      	          	          )
				      	          	          	          	          	      	          	      	  [| union({|startexec|},{|internal__.TID_Movement_t3,internal__.TID_Movement_t4|}) |]
				      	          	          	          	          	      	          	      	  MemoryTransitions_opt_4(id__)
				      	          	          	          	          	      	          	      	  )\{|internal__.TID_Movement_t3,internal__.TID_Movement_t4|})
				      	          	          	          	          	      	          	      )
				      	          	          	          	          	      	          	) \ {|get_neighbours|}
				      	          	          	          	          	      	          )
				      	          	          	          	          	      	      	  [| union({|startexec|},{|setWC.WC_TID_Movement_MovementAndAvoidance_t2_0_ID,internal__.TID_Movement_MovementAndAvoidance_t2,internal__.TID_Movement_MovementAndAvoidance_t3|}) |]
				      	          	          	          	          	      	      	  MemoryTransitions_opt_7(id__)
				      	          	          	          	          	      	      	  )\{|internal__.TID_Movement_MovementAndAvoidance_t2,internal__.TID_Movement_MovementAndAvoidance_t3|})
				      	          	          	          	          	      	      )
				      	          	          	          	          	      	) \ {|getWC.WC_TID_Movement_MovementAndAvoidance_t2_0_ID,setWC.WC_TID_Movement_MovementAndAvoidance_t2_0_ID|}
				      	          	          	          	          	      )
				      	          	          	          	          	) \ {|get_obstacle|}
				      	          	          	          	          )
				      	          	          	          	      	  [| union({|startexec|},{|setWC.WC_TID_Movement_t1_0_ID,internal__.TID_Movement_t1|}) |]
				      	          	          	          	      	  MemoryTransitions_opt_3(id__)
				      	          	          	          	      	  )\{|internal__.TID_Movement_t1|})
				      	          	          	          	      )
				      	          	          	          	) \ {|getWC.WC_TID_Movement_t1_0_ID,setWC.WC_TID_Movement_t1_0_ID|}
				      	          	          	          )
				      	          	          	      	  [| union({|startexec|},{|set_n,internal__.TID_Movement_Turning_t3,internal__.TID_Movement_Turning_t2|}) |]
				      	          	          	      	  MemoryTransitions_opt_6(id__,
				      	          	          	      	  	 const_RSMov_Movement_alpha)
				      	          	          	      	  )\{|internal__.TID_Movement_Turning_t3,internal__.TID_Movement_Turning_t2|})
				      	          	          	      )
				      	          	          	) \ {|set_n,get_n|}
				      	          	          )
				      	          	      	  [| union({|startexec|},{|set_turned,internal__.TID_Movement_t2|}) |]
				      	          	      	  MemoryTransitions_opt_2(id__)
				      	          	      	  )\{|internal__.TID_Movement_t2|})
				      	          	      )
				      	          	) \ {|set_turned,get_turned|}
				      	          )
				      	      	  [| union({|startexec|},{|setWC.WC_TID_Movement_MovementAndAvoidance_t8_0_ID,internal__.TID_Movement_Turning_t16,internal__.TID_Movement_MovementAndAvoidance_t8,internal__.TID_Movement_Turning_t12|}) |]
				      	      	  MemoryTransitions_opt_1(id__)
				      	      	  )\{|internal__.TID_Movement_Turning_t16,internal__.TID_Movement_MovementAndAvoidance_t8,internal__.TID_Movement_Turning_t12|})
				      	      )
				      	) \ {|setWC.WC_TID_Movement_MovementAndAvoidance_t8_0_ID,getWC.WC_TID_Movement_MovementAndAvoidance_t8_0_ID|}
				      )
			
			-- main process
			MachineMemorySyncSet = Union({
				union(
					union(
						{|get_n,set_n,
						get_p,set_p,
						get_turned,set_turned|},
						union({|get_obstacle,
						get_neighbours|},
							  {||}
							 )
					)
						
					,
					{|internal__.TID_Movement_MovementAndAvoidance_t0,
					internal__.TID_Movement_MovementAndAvoidance_t1,
					internal__.TID_Movement_MovementAndAvoidance_t2,
					internal__.TID_Movement_MovementAndAvoidance_t3,
					endexec__.TID_Movement_MovementAndAvoidance_t4,
					internal__.TID_Movement_MovementAndAvoidance_t5,
					endexec__.TID_Movement_MovementAndAvoidance_t6,
					internal__.TID_Movement_MovementAndAvoidance_t7,
					internal__.TID_Movement_MovementAndAvoidance_t8,
					internal__.TID_Movement_Turning_t0,
					internal__.TID_Movement_Turning_t1,
					internal__.TID_Movement_Turning_t2,
					internal__.TID_Movement_Turning_t3,
					internal__.TID_Movement_Turning_t9,
					internal__.TID_Movement_Turning_t10,
					internal__.TID_Movement_Turning_t12,
					internal__.TID_Movement_Turning_t13,
					internal__.TID_Movement_Turning_t15,
					internal__.TID_Movement_Turning_t16,
					internal__.TID_Movement_Turning_t4,
					internal__.TID_Movement_Turning_t5,
					internal__.TID_Movement_t0,
					internal__.TID_Movement_t1,
					internal__.TID_Movement_t2,
					internal__.TID_Movement_t4,
					internal__.TID_Movement_t3,
					endexec__.TID_Movement_t5|}
				),
				{|deadline|},
				WCresets
			})
			
			MachineMemoryHidingSet = Union({
				union(
					{|get_n,set_n,
					get_p,set_p,
					get_turned,set_turned|},
					union({|get_obstacle,
					get_neighbours|},
						  {||})
				)
				,
				{|deadline|}
			})
			
			MachineInternalEvents = {|
				internal__
			|}
		
			STM_core(id__,cycle_RSMov_Movement_Movement,
					    const_RSMov_Movement_alpha) =
				sbisim(	
					dbisim(
					(wbisim(STM(id__,
							    const_RSMov_Movement_alpha))
					[| union(WCsync,WCresets) |]
					Clocks(id__,
							    const_RSMov_Movement_alpha))\WCresets
					)
					[| union({|startexec|},union(Transitions,EndExecs)) |]
					(let
						TransitionController = startexec -> (RUN(Transitions) 
							 /\ ([] e : EndExecs @ e -> TransitionController))
					within 
					TransitionController))
				[| {| endexec,endexec__
					,registerWrite,startexec,terminate,tock |} |]
				cycle(cycle_RSMov_Movement_Movement)
			
			
			-- optimized main process
			AUX_opt(id__,cycle_RSMov_Movement_Movement,
					    const_RSMov_Movement_alpha) =
				prioritise(
				  dbisim(
					(MemorySTM_opt(id__,cycle_RSMov_Movement_Movement,
							    const_RSMov_Movement_alpha))
					\union(union(MachineMemoryHidingSet,MachineInternalEvents),{|startexec|}))
					[|{|terminate|}|>SKIP
				,<{},{tock}>)
			
			-- main process
			AUX(id__,cycle_RSMov_Movement_Movement,
					    const_RSMov_Movement_alpha) =
				prioritise(
					(
				 		(
				 			cycle(cycle_RSMov_Movement_Movement)
				 			[| {| endexec,endexec__
				 					,registerRead
				 					,registerWrite,startexec,tock |} |]
				 			(MemoryN(id__,
				 					    const_RSMov_Movement_alpha) 
				 	 		[| union(WCsets,WCsync) |] 
				 	 		Clocks(id__,
				 	 				    const_RSMov_Movement_alpha)
				 			)\WCsets
				 		)
				 		[| union(MachineMemorySyncSet,{| startexec,endexec,endexec__
				 										 ,terminate |}) |]
				 		wbisim(STM(id__,
				 				    const_RSMov_Movement_alpha))
					)[[ endexec__.x____ <- endexec | x____ <- TIDS ]]
				\union(union(MachineMemoryHidingSet,MachineInternalEvents),{|startexec|})
				[|{|terminate|}|>SKIP
				,<{},{tock}>)
			
			internal_(id__,cycle_RSMov_Movement_Movement,
					    const_RSMov_Movement_alpha) =
				prioritise(
							(
						 		(
						 			cycle(cycle_RSMov_Movement_Movement)
						 			[| {| endexec,endexec__
						 					,registerRead
						 					,registerWrite,startexec,terminate,tock |} |]
						 			(MemoryN(id__,
						 					    const_RSMov_Movement_alpha) 
						 	 		[| union(WCsets,WCsync) |] 
						 	 		Clocks(id__,
						 	 				    const_RSMov_Movement_alpha)
						 			)\WCsets
						 		)
						 		[| union(MachineMemorySyncSet,{| startexec,endexec,endexec__
						 										  |}) |]
						 		wbisim(STM(id__,
						 				    const_RSMov_Movement_alpha))
							)[[ endexec__.x____ <- endexec | x____ <- TIDS ]]
						\union(MachineMemoryHidingSet,{|startexec|})
						[|{|terminate|}|>SKIP
						,<Union({internal_events, ClockResets, {|internal__,terminate|}}),{tock}>)
			
			
		
			datatype SOutputEvents = SOutput_move
			
			cycle(cycle_RSMov_Movement_Movement) =
				let
					project(o_move.x__) = SOutput_move
			
					Cycle =
						(registerRead.i_neighbours?x__ -> SKIP
							||| registerRead.i_obstacle?x__ -> SKIP);
						startexec -> CollectOutputs(SOutputEvents);
						(wait(cycle_RSMov_Movement_Movement) [] terminate -> SKIP);
						Cycle
					
					CollectOutputs(sout) =
						(registerWrite?outp:{ outp | outc <- inter(sout,SOutputEvents), outp <- RegisterDataOutput,project(outp) == outc} -> CollectOutputs(diff(sout,{project(outp)}))
						[]
						endexec -> SKIP
						[]
						endexec__?x__ -> SKIP
			)
				within
					Cycle
					
			cycle_opt(cycle_RSMov_Movement_Movement) =
				let
					project(o_move.x__) = SOutput_move
			
					Cycle =
						(registerRead.i_neighbours?x__ -> SKIP
							||| registerRead.i_obstacle?x__ -> SKIP);
						startexec -> CollectOutputs(SOutputEvents);
						(wait(cycle_RSMov_Movement_Movement) [] terminate -> SKIP);
						Cycle
					
					CollectOutputs(sout) =
						(registerWrite?outp:{ outp | outc <- inter(sout,SOutputEvents), outp <- RegisterDataOutput,project(outp) == outc} -> CollectOutputs(diff(sout,{project(outp)}))
						[]
						endexec -> SKIP
						)
				within
					Cycle
		
			Timed(OneStep) {
				-- declare clocks
				datatype ClockSet = dummyC | CLID_MBC
				channel clockReset : ClockSet
		
				
				-- declare trigger deadlines channel
				channel deadline : TIDS.Signal
		
				-- compile clocks process
				
				-- set of strings that uniquely identify the waiting conditions, each of which is 
				-- used to synchronise with the Memory process to set the correspoding variable in
				-- the memory process.
				datatype setWC_identifierSet = dummyWC
				                             | WC_TID_Movement_MovementAndAvoidance_t8_0_ID
				                             | WC_TID_Movement_MovementAndAvoidance_t7_0_ID
				                             | WC_TID_Movement_t1_0_ID
				                             | WC_TID_Movement_MovementAndAvoidance_t2_0_ID
				
				-- declaring getWC and setWC channel for updating memory variables related to clocks
				channel setWC : setWC_identifierSet.Bool
				channel getWC : setWC_identifierSet.Bool
				
				-- Set of pairs capturing waiting condition processes and their alphabet.
				-- It includes the corresponding set of the defined operations.
				WCset(id__,
						    const_RSMov_Movement_alpha) = Union({
					{
					({|clockReset.CLID_MBC,setWC.WC_TID_Movement_MovementAndAvoidance_t7_0_ID,internal__.TID_Movement_MovementAndAvoidance_t7,internal__.TID_Movement_Turning_t15,internal__.TID_Movement_Turning_t13 | x <- SIDS|},P_WC_TID_Movement_MovementAndAvoidance_t7_0(id__,
							    const_RSMov_Movement_alpha)),
					
					({|clockReset.CLID_MBC,internal__.TID_Movement_t1,setWC.WC_TID_Movement_t1_0_ID | x <- SIDS|},P_WC_TID_Movement_t1_0(id__,
							    const_RSMov_Movement_alpha)),
					
					({|clockReset.CLID_MBC,setWC.WC_TID_Movement_MovementAndAvoidance_t2_0_ID,internal__.TID_Movement_MovementAndAvoidance_t2,internal__.TID_Movement_MovementAndAvoidance_t3 | x <- SIDS|},P_WC_TID_Movement_MovementAndAvoidance_t2_0(id__,
							    const_RSMov_Movement_alpha)),
					
					({|clockReset.CLID_MBC,setWC.WC_TID_Movement_MovementAndAvoidance_t8_0_ID,internal__.TID_Movement_MovementAndAvoidance_t8,internal__.TID_Movement_Turning_t16,internal__.TID_Movement_Turning_t12 | x <- SIDS|},P_WC_TID_Movement_MovementAndAvoidance_t8_0(id__,
							    const_RSMov_Movement_alpha))
					}
					})
				
				-- Auxiliary function to rename the channel set for required clocks.
				
				-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
				-- It includes the corresponding set of the defined operations.
				WCsync = Union({
					{|internal__.TID_Movement_MovementAndAvoidance_t8,
					internal__.TID_Movement_Turning_t16,
					internal__.TID_Movement_MovementAndAvoidance_t7,
					internal__.TID_Movement_Turning_t15,
					internal__.TID_Movement_t1,
					internal__.TID_Movement_Turning_t12,
					internal__.TID_Movement_Turning_t13,
					internal__.TID_Movement_MovementAndAvoidance_t2,
					internal__.TID_Movement_MovementAndAvoidance_t3|}
					})
				-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
				-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
				WCresets = Union({
					{|clockReset.CLID_MBC | x <- SIDS |}
					})
				-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
				WCsets = Union({
					{|setWC|}
					})
				
				P_WC_TID_Movement_MovementAndAvoidance_t7_0_reset(id__,
						    const_RSMov_Movement_alpha) = clockReset.CLID_MBC -> setWC.WC_TID_Movement_MovementAndAvoidance_t7_0_ID.true -> P_WC_TID_Movement_MovementAndAvoidance_t7_0_monitor(id__,
						    const_RSMov_Movement_alpha)
				
				P_WC_TID_Movement_MovementAndAvoidance_t7_0_monitor(id__,
						    const_RSMov_Movement_alpha) = (TimedInterrupt(RUN({|tock,internal__.TID_Movement_MovementAndAvoidance_t7,internal__.TID_Movement_Turning_t15,internal__.TID_Movement_Turning_t13|}),1) ; setWC.WC_TID_Movement_MovementAndAvoidance_t7_0_ID.false -> RUN({|tock,internal__.TID_Movement_MovementAndAvoidance_t7,internal__.TID_Movement_Turning_t15,internal__.TID_Movement_Turning_t13|})) /\ P_WC_TID_Movement_MovementAndAvoidance_t7_0_reset(id__,
						    const_RSMov_Movement_alpha)
				
				P_WC_TID_Movement_t1_0_reset(id__,
						    const_RSMov_Movement_alpha) = clockReset.CLID_MBC -> setWC.WC_TID_Movement_t1_0_ID.false -> P_WC_TID_Movement_t1_0_monitor(id__,
						    const_RSMov_Movement_alpha)
				
				P_WC_TID_Movement_t1_0_monitor(id__,
						    const_RSMov_Movement_alpha) = (TimedInterrupt(RUN({|tock,internal__.TID_Movement_t1|}),4) ; setWC.WC_TID_Movement_t1_0_ID.true -> RUN({|tock,internal__.TID_Movement_t1|})) /\ P_WC_TID_Movement_t1_0_reset(id__,
						    const_RSMov_Movement_alpha)
				
				P_WC_TID_Movement_MovementAndAvoidance_t2_0_reset(id__,
						    const_RSMov_Movement_alpha) = clockReset.CLID_MBC -> setWC.WC_TID_Movement_MovementAndAvoidance_t2_0_ID.true -> P_WC_TID_Movement_MovementAndAvoidance_t2_0_monitor(id__,
						    const_RSMov_Movement_alpha)
				
				P_WC_TID_Movement_MovementAndAvoidance_t2_0_monitor(id__,
						    const_RSMov_Movement_alpha) = (TimedInterrupt(RUN({|tock,internal__.TID_Movement_MovementAndAvoidance_t2,internal__.TID_Movement_MovementAndAvoidance_t3|}),2) ; setWC.WC_TID_Movement_MovementAndAvoidance_t2_0_ID.false -> RUN({|tock,internal__.TID_Movement_MovementAndAvoidance_t2,internal__.TID_Movement_MovementAndAvoidance_t3|})) /\ P_WC_TID_Movement_MovementAndAvoidance_t2_0_reset(id__,
						    const_RSMov_Movement_alpha)
				
				P_WC_TID_Movement_MovementAndAvoidance_t8_0_reset(id__,
						    const_RSMov_Movement_alpha) = clockReset.CLID_MBC -> setWC.WC_TID_Movement_MovementAndAvoidance_t8_0_ID.false -> P_WC_TID_Movement_MovementAndAvoidance_t8_0_monitor(id__,
						    const_RSMov_Movement_alpha)
				
				P_WC_TID_Movement_MovementAndAvoidance_t8_0_monitor(id__,
						    const_RSMov_Movement_alpha) = (TimedInterrupt(RUN({|tock,internal__.TID_Movement_MovementAndAvoidance_t8,internal__.TID_Movement_Turning_t16,internal__.TID_Movement_Turning_t12|}),1) ; setWC.WC_TID_Movement_MovementAndAvoidance_t8_0_ID.true -> RUN({|tock,internal__.TID_Movement_MovementAndAvoidance_t8,internal__.TID_Movement_Turning_t16,internal__.TID_Movement_Turning_t12|})) /\ P_WC_TID_Movement_MovementAndAvoidance_t8_0_reset(id__,
						    const_RSMov_Movement_alpha)
				
				P_WC_TID_Movement_MovementAndAvoidance_t7_0(id__,
						    const_RSMov_Movement_alpha) = setWC.WC_TID_Movement_MovementAndAvoidance_t7_0_ID.true -> P_WC_TID_Movement_MovementAndAvoidance_t7_0_monitor(id__,
						    const_RSMov_Movement_alpha)
				
				P_WC_TID_Movement_t1_0(id__,
						    const_RSMov_Movement_alpha) = setWC.WC_TID_Movement_t1_0_ID.false -> P_WC_TID_Movement_t1_0_monitor(id__,
						    const_RSMov_Movement_alpha)
				
				P_WC_TID_Movement_MovementAndAvoidance_t2_0(id__,
						    const_RSMov_Movement_alpha) = setWC.WC_TID_Movement_MovementAndAvoidance_t2_0_ID.true -> P_WC_TID_Movement_MovementAndAvoidance_t2_0_monitor(id__,
						    const_RSMov_Movement_alpha)
				
				P_WC_TID_Movement_MovementAndAvoidance_t8_0(id__,
						    const_RSMov_Movement_alpha) = setWC.WC_TID_Movement_MovementAndAvoidance_t8_0_ID.false -> P_WC_TID_Movement_MovementAndAvoidance_t8_0_monitor(id__,
						    const_RSMov_Movement_alpha)
				
				-- Clocks process
				Clocks(id__,
						    const_RSMov_Movement_alpha) = || (alpha, P) : WCset(id__,
						    const_RSMov_Movement_alpha) @ [alpha] wbisim(P)
		
				-- collects all clockResets including those of operations
				ClockResets = Union({
					{|clockReset|}
							})
		
				-- With no internal events visible
				Dunopt__(id__,cycle_RSMov_Movement_Movement,
						    const_RSMov_Movement_alpha) = timed_priority(AUX(id__,cycle_RSMov_Movement_Movement,
						    const_RSMov_Movement_alpha) \ union(internal_events,ClockResets))
		
				D__(id__,cycle_RSMov_Movement_Movement,
						    const_RSMov_Movement_alpha) = timed_priority(AUX_opt(id__,cycle_RSMov_Movement_Movement,
						    const_RSMov_Movement_alpha) \ union(internal_events,ClockResets))
		
				O__(id__,cycle_RSMov_Movement_Movement,
						    const_RSMov_Movement_alpha) = D__(id__,cycle_RSMov_Movement_Movement,
						    const_RSMov_Movement_alpha)
		
				-- With enter/entered/exit/exited events visible
				FVS__(id__,cycle_RSMov_Movement_Movement,
						    const_RSMov_Movement_alpha) = timed_priority(AUX(id__,cycle_RSMov_Movement_Movement,
						    const_RSMov_Movement_alpha) \ ClockResets)
		
				-- With enterV/enteredV/exitV/exitedV events visible
				VS__(id__,cycle_RSMov_Movement_Movement,
						    const_RSMov_Movement_alpha) = ShowV(timed_priority(AUX_opt(id__,cycle_RSMov_Movement_Movement,
						    const_RSMov_Movement_alpha) \ ClockResets))
		
				-- With clock resets visible
				FVS_C__(id__,cycle_RSMov_Movement_Movement,
						    const_RSMov_Movement_alpha) = AUX(id__,cycle_RSMov_Movement_Movement,
						    const_RSMov_Movement_alpha)
				}
		endmodule
		
		--VS
		VS__(id__,cycle_RSMC_MovementC_MovementC,
				    const_RSMC_MovementC_stm_ref0_alpha) =
			(
				(
					(
						(
						wbisim(cycleController(id__,cycle_RSMC_MovementC_MovementC,
								    const_RSMC_MovementC_stm_ref0_alpha))
					 	 [| Union({{||},
					 	 		  {||},
					 	 		  {||},
					 	 		  {||}}) |]
					 	memoryComp(id__,
					 			    const_RSMC_MovementC_stm_ref0_alpha)
					 	)\{||}
						[| {| 	terminate,tock,
								stm_ref0::endexec,stm_ref0::registerRead,stm_ref0::registerWrite|} |]
						-- (Rule 9) composeMachines(...) : CSPProcess
					 	((let
					 		const_RSMov_Movement_alpha = 1
					 		cycle_RSMov_Movement_Movement = cycle_RSMC_MovementC_MovementC
					 	within
					 		(stm_ref0::VS__(id__,cycle_RSMov_Movement_Movement,
					 				    const_RSMov_Movement_alpha)
					 		\{| |})
					 		[[stm_ref0::terminate <- terminate]]
					 	)
					 	)
					) \ {|	stm_ref0::endexec,stm_ref0::registerRead,stm_ref0::registerWrite |}
				) [| {terminate} |> SKIP
			)
		
		-- (Rule 7) [[ c : Controller ]]_C : CSPProcess
		D__(id__,cycle_RSMC_MovementC_MovementC,
				    const_RSMC_MovementC_stm_ref0_alpha) =
			(
				(
					(
						(
						wbisim(cycleController(id__,cycle_RSMC_MovementC_MovementC,
								    const_RSMC_MovementC_stm_ref0_alpha))
					 	 [| Union({{||},
					 	 		  {||},
					 	 		  {||},
					 	 		  {||}}) |]
					 	memoryComp(id__,
					 			    const_RSMC_MovementC_stm_ref0_alpha)
					 	)\{||}
						[| {| 	terminate,tock,
								stm_ref0::endexec,stm_ref0::registerRead,stm_ref0::registerWrite|} |]
						-- (Rule 9) composeMachines(...) : CSPProcess
					 	((let
					 		const_RSMov_Movement_alpha = 1
					 		cycle_RSMov_Movement_Movement = cycle_RSMC_MovementC_MovementC
					 	within
					 		(stm_ref0::D__(id__,cycle_RSMov_Movement_Movement,
					 				    const_RSMov_Movement_alpha)
					 		\{| |})
					 		[[stm_ref0::terminate <- terminate]]
					 	)
					 	)
					) \ {|	stm_ref0::endexec,stm_ref0::registerRead,stm_ref0::registerWrite |}
				) [| {terminate} |> SKIP
			)
	
		O__(id__,cycle_RSMC_MovementC_MovementC,
				    const_RSMC_MovementC_stm_ref0_alpha) = D__(id__,cycle_RSMC_MovementC_MovementC,
				    const_RSMC_MovementC_stm_ref0_alpha)
	
	endmodule
	module ctrl_ref1
	exports
	
		transparent diamond
		transparent sbisim
		transparent chase
	
		-- declaring channels
		-- allInputs = inputs_evars? false
		-- allOutputs = outputs_evars? false
		
		-- inputs, evars, rvars and outputs as calculated internally
		-- outputs = {
		--	(ctrl_ref1::broadcastO,stm_ref0::broadcastO),
		--	(ctrl_ref1::robots,stm_ref0::robots),
		--	(ctrl_ref1::receiveO,stm_ref0::receiveO)
		--	 }
		-- inputs = {
		--	(ctrl_ref1::receive,stm_ref0::receive),
		--	(ctrl_ref1::broadcast,stm_ref0::broadcast)
		--	 }
		-- evars = {}
		-- dvars = {}
		
		-- declaring registerRead/Write datatypes
		datatype RegisterDataInput = i_broadcast.Bool.RSC_ID
			| i_receive.Bool.{(x0__,x1__) | x0__ <- RSC_ID,x1__ <- RSC_ID}
		
		datatype RegisterDataOutput = o_broadcastO.RSC_ID
			| o_robots.core_nat
			| o_receiveO.{(x0__,x1__) | x0__ <- RSC_ID,x1__ <- RSC_ID}
			| o_broadcast.RSC_ID
			| o_move.core_real.core_real
			| o_receive.{(x0__,x1__) | x0__ <- RSC_ID,x1__ <- RSC_ID}
		
		
		nametype RegisterOutputs = {|
		o_broadcastO,
		o_robots,
		o_receiveO|}
		
		nametype RegisterInputs = {|
		i_receive,
		i_broadcast|}
		
		channel registerRead 	: RegisterDataInput
		channel registerWrite 	: RegisterDataOutput
		
		channel endexec, terminate
		
		
		-- declaring call and ret events for undefined operations
		
		
		
		-- (Rule 8) cycleController(...) : CSPProcess
		datatype SOutputEvents = SOutput_broadcastO
			| SOutput_robots
			| SOutput_receiveO
		
		DVarsEvents = {}
		
		EVarsEvents = {}
		
		cycleController(id__,cycle_RSCC_CommunicationC_CommunicationC,
				    const_RSCC_CommunicationC_stm_ref0_id) =
		let
					
			project_stm_ref0(stm_ref0::o_broadcastO.x__) = SOutput_broadcastO
			project_stm_ref0(stm_ref0::o_robots.x__) = SOutput_robots
			project_stm_ref0(stm_ref0::o_receiveO.x__) = SOutput_receiveO
		
			connected_stm_ref0(stm_ref0::o_broadcastO.x__) = true
			connected_stm_ref0(stm_ref0::o_robots.x__) = true
			connected_stm_ref0(stm_ref0::o_receiveO.x__) = true
			connected_stm_ref0(_) = false
		
			lift_stm_ref0(stm_ref0::o_broadcastO.x__) = o_broadcastO.x__
			lift_stm_ref0(stm_ref0::o_robots.x__) = o_robots.x__
			lift_stm_ref0(stm_ref0::o_receiveO.x__) = o_receiveO.x__
			
			CycleController =
				-- read inputs from the controller and pass to state machines
				(
				((registerRead.i_broadcast?x__ ->
					((stm_ref0::registerRead.stm_ref0::i_broadcast!x__ -> SKIP)))
					|||
				(registerRead.i_receive?x__ ->
					((stm_ref0::registerRead.stm_ref0::i_receive!x__ -> SKIP))))
				-- ensure state machines read the values being communicated via evars
						);
				-- synchronize on events related to evars to erase memory
				-- collect outputs, and monitor termination of the cycle, by all controllers
				(CollectOutputs(SOutputEvents) [| {endexec} |] Monitor);
				-- wait for the cycleDef period
				(wait(cycle_RSCC_CommunicationC_CommunicationC) [] terminate -> SKIP);
				-- recurse
				CycleController
				
										
			CollectOutputs(sout) =
				(stm_ref0::registerWrite?outp:{ outp | outc <- diff(sout,union(EVarsEvents,DVarsEvents)), outp <- stm_ref0::RegisterDataOutput, connected_stm_ref0(outp), project_stm_ref0(outp) == outc}
						-> registerWrite!lift_stm_ref0(outp)
							-> CollectOutputs(diff(sout,{project_stm_ref0(outp)}))
				[]
				endexec -> SKIP
				)
		
			Monitor = 
				(	 (stm_ref0::endexec -> SKIP)); endexec -> SKIP
		within
			CycleController
		
		-- (Rule 5) memoryComp(...) : CSPProcess
		memoryComp(id__,
				    const_RSCC_CommunicationC_stm_ref0_id) = (
			STOP)
		
		
		module stm_ref0
		exports
			-- definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
			external prioritise
			transparent wbisim
			transparent sbisim
			transparent dbisim
		
			-- flow channels
			channel internal__ : TIDS
			channel enteredV, enterV, exitV, exitedV : SIDS
			channel enter, entered: SIDS.SIDS
			channel exit,exited: SIDS.SIDS
			
			-- RoboSim channels
			channel endexec
			channel endexec__ : TIDS
			channel startexec
			channel terminate
			
			-- declaring registerRead/Write datatypes
			datatype RegisterDataInput = i_broadcast.Bool.RSC_ID
				| i_receive.Bool.{(x0__,x1__) | x0__ <- RSC_ID,x1__ <- RSC_ID}
			
			
			datatype RegisterDataOutput = o_receiveO.{(x0__,x1__) | x0__ <- RSC_ID,x1__ <- RSC_ID}
				| o_broadcastO.RSC_ID
				| o_robots.core_nat
			
			
			nametype RegisterOutputs = {|
			o_receiveO,
			o_broadcastO,
			o_robots|}
			
			nametype RegisterInputs = {|
			i_broadcast,
			i_receive|}
			
			channel registerRead 	: RegisterDataInput
			channel registerWrite 	: RegisterDataOutput
			
			-- variable channels
			channel get_x, set_x: {(x0__,x1__) | x0__ <- RSC_ID,x1__ <- RSC_ID}
			channel get_y, set_y: RSC_ID
			channel get_neighs, set_neighs: Set(RSC_ID)
			channel get_broadcast : Bool.RSC_ID
			channel get_receive : Bool.{(x0__,x1__) | x0__ <- RSC_ID,x1__ <- RSC_ID}
			
			-- local variable channels for defined operations that are required by the state machine
			
			-- declaring state machine events
			
			-- declaring call and ret events for undefined operations
			
			EndExecs = {| endexec__, endexec
			 |}
			
			Transitions = {| internal__
			 |}
			
		
			-- Only the undefined operations are declared here.
			-- If the state machine is in isolation, all required operations will be undefined.
			-- If it is in the context of a controller, the required operations not provided by the
			-- controller will be declared here, and the defined operations will be defined in the
			-- context of the Controller module, and therefore within scope of the state machien module.
			
			
			-- definition of functions used to expose flow channels
			ShowEvents(P,E) = P[[ entered.x____.y____ <- enteredV.y____ | entered.x____.y____ <- E]]
							   [[ enter.x____.y____ <- enterV.y____ | enter.x____.y____ <- E]]
							   [[ exit.x____.y____ <- exitV.y____ | exit.x____.y____ <- E]]
							   [[ exited.x____.y____ <- exitedV.y____ | exited.x____.y____ <- E ]]
								 
			ShowEnteredV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS ]]
			ShowEnterV(P) = P[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
			ShowExitV(P) = P[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS ]]
			ShowExitedV(P) = P[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
			ShowV(P) = P[[ entered.x____.y____ <- enteredV.y____ | x____ <- SIDS, y____ <- SIDS]]
						[[ enter.x____.y____ <- enterV.y____ | x____ <- SIDS, y____ <- SIDS ]]
						[[ exit.x____.y____ <- exitV.y____ | x____ <- SIDS, y____ <- SIDS]]
						[[ exited.x____.y____ <- exitedV.y____ | x____ <- SIDS, y____ <- SIDS ]]
			
			-- declaring identifiers of state and final states
			datatype SIDS = SID_Communication
			              | SID_Communication_SBroadcast
			              | SID_Communication_SReceive
			              | SID_Communication_NewCycle
			
			-- declaring identifiers of transitions
			datatype TIDS = NULLTRANSITION__
			              | TID_Communication_t0
			              | TID_Communication_t1
			              | TID_Communication_t2
			              | TID_Communication_t3
			              | TID_Communication_t4
			              | TID_Communication_t5
			              | TID_Communication_t6
			              | TID_Communication_t7
			              | TID_Communication_t8
			              | TID_Communication_t9
			
			-- declaring identifiers of transitions that can interupt a state (excludes transitions from junctions)
			
			ITIDS = {
				TID_Communication_t1,	TID_Communication_t2,	TID_Communication_t7
			}
			
			int_int = {|
				internal__.TID_Communication_t1,
				internal__.TID_Communication_t2,
				internal__.TID_Communication_t7
			|}
				
			
			internal_events = {|enter,entered,exit,exited|}
			
			-- declaring all states
			CS_Communication_SBroadcast_sync = {|
				enter.y____.x____, 
				entered.y____.x____, 
				exit.y____.x____, 
				exited.y____.x____,
				enter.x____.y____, 
				entered.x____.y____, 
				exit.x____.y____, 
				exited.x____.y____ |
				x____ <- {SID_Communication_SBroadcast,SID_Communication_SReceive,SID_Communication_NewCycle},
				y____ <- {SID_Communication_SBroadcast}
			|}
			
			
			Communication_SBroadcast_triggers = {|
				internal__.TID_Communication_t1,
				internal__.TID_Communication_t8,
				internal__.TID_Communication_t6,
				internal__.TID_Communication_t9,
				internal__.TID_Communication_t4,
				internal__.TID_Communication_t5,
				internal__.TID_Communication_t2,
				internal__.TID_Communication_t7,
				internal__.TID_Communication_t3
			|}
			
			State_Communication_SBroadcast(id__,
					    const_RSC_Communication_id) = let
				T_Communication_t1(id__,
						    const_RSC_Communication_id) = internal__!TID_Communication_t1 ->  exit.SID_Communication_SBroadcast.SID_Communication_SBroadcast -> SKIP;
									SKIP;exited.SID_Communication_SBroadcast.SID_Communication_SBroadcast -> SKIP;
									DoClockReset({clockReset.CLID_RCC});true & (set_neighs!{} -> SKIP);enter!SID_Communication_SBroadcast!SID_Communication_SReceive -> entered!SID_Communication_SBroadcast!SID_Communication_SReceive ->
									State_Communication_SBroadcast(id__,
											    const_RSC_Communication_id)
				State_Communication_SBroadcast_execute(id__,o____) = registerWrite.o_broadcastO.0 -> SKIP; 
					entered!o____!SID_Communication_SBroadcast ->
					(SKIP; STOP /\ (
						T_Communication_t1(id__,
								    const_RSC_Communication_id)
						[]
						internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Communication_t1,TID_Communication_t8,TID_Communication_t6,TID_Communication_t9,TID_Communication_t4,TID_Communication_t5,TID_Communication_t2,TID_Communication_t7,TID_Communication_t3}) -> exit?y____:diff(SIDS,{SID_Communication_SBroadcast})!SID_Communication_SBroadcast -> (
								SKIP;
								exited!y____!SID_Communication_SBroadcast -> SKIP);
								State_Communication_SBroadcast(id__,
										    const_RSC_Communication_id)
					))
			within
				enter?x____:diff(SIDS,{SID_Communication_SBroadcast})!SID_Communication_SBroadcast -> (State_Communication_SBroadcast_execute(id__,x____))
			
			CS_Communication_SReceive_sync = {|
				enter.y____.x____, 
				entered.y____.x____, 
				exit.y____.x____, 
				exited.y____.x____,
				enter.x____.y____, 
				entered.x____.y____, 
				exit.x____.y____, 
				exited.x____.y____ |
				x____ <- {SID_Communication_SBroadcast,SID_Communication_SReceive,SID_Communication_NewCycle},
				y____ <- {SID_Communication_SReceive}
			|}
			
			
			Communication_SReceive_triggers = {|
				internal__.TID_Communication_t8,
				internal__.TID_Communication_t6,
				internal__.TID_Communication_t1,
				internal__.TID_Communication_t9,
				internal__.TID_Communication_t4,
				internal__.TID_Communication_t5,
				internal__.TID_Communication_t2,
				internal__.TID_Communication_t7,
				internal__.TID_Communication_t3
			|}
			
			State_Communication_SReceive(id__,
					    const_RSC_Communication_id) = let
				T_Communication_t2(id__,
						    const_RSC_Communication_id) = internal__!TID_Communication_t2 ->  exit.SID_Communication_SReceive.SID_Communication_SReceive -> SKIP;
									SKIP;exited.SID_Communication_SReceive.SID_Communication_SReceive -> SKIP;
									J_Communication_j0(id__,
											    const_RSC_Communication_id)
				J_Communication_j2(id__,
						    const_RSC_Communication_id) = (
							(internal__!TID_Communication_t9 -> enter!SID_Communication_SReceive!SID_Communication_NewCycle -> entered!SID_Communication_SReceive!SID_Communication_NewCycle ->
							State_Communication_SReceive(id__,
									    const_RSC_Communication_id)
							)
							)
				J_Communication_j1(id__,
						    const_RSC_Communication_id) = (
							(internal__!TID_Communication_t5 -> get_broadcast?b__?x__ -> set_y!x__ -> SKIP
							;J_Communication_j2(id__,
									    const_RSC_Communication_id))[]
							(internal__!TID_Communication_t6 -> get_broadcast?b__?x__ -> set_y!x__ -> SKIP
							;get_y?y -> registerWrite.o_receiveO.(y,0) -> SKIP;J_Communication_j2(id__,
									    const_RSC_Communication_id))
							)
				J_Communication_j0(id__,
						    const_RSC_Communication_id) = (
							(internal__!TID_Communication_t3 -> get_receive?b__?x__ -> set_x!x__ -> SKIP
							;get_x?x -> get_neighs?neighs -> true & (set_neighs!set_toolkit_union(neighs,{tuple2_2(x)}) -> SKIP);J_Communication_j1(id__,
									    const_RSC_Communication_id))[]
							(internal__!TID_Communication_t4 -> get_receive?b__?x__ -> set_x!x__ -> SKIP
							;J_Communication_j1(id__,
									    const_RSC_Communication_id))[]
							(internal__!TID_Communication_t8 -> registerWrite.o_robots.1 -> SKIP;enter!SID_Communication_SReceive!SID_Communication_SBroadcast -> entered!SID_Communication_SReceive!SID_Communication_SBroadcast ->
							State_Communication_SReceive(id__,
									    const_RSC_Communication_id)
							)
							)
				State_Communication_SReceive_execute(id__,o____) = SKIP; 
					entered!o____!SID_Communication_SReceive ->
					(SKIP; STOP /\ (
						T_Communication_t2(id__,
								    const_RSC_Communication_id)
						[]
						internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Communication_t8,TID_Communication_t6,TID_Communication_t1,TID_Communication_t9,TID_Communication_t4,TID_Communication_t5,TID_Communication_t2,TID_Communication_t7,TID_Communication_t3}) -> exit?y____:diff(SIDS,{SID_Communication_SReceive})!SID_Communication_SReceive -> (
								SKIP;
								exited!y____!SID_Communication_SReceive -> SKIP);
								State_Communication_SReceive(id__,
										    const_RSC_Communication_id)
					))
			within
				enter?x____:diff(SIDS,{SID_Communication_SReceive})!SID_Communication_SReceive -> (State_Communication_SReceive_execute(id__,x____))
			
			CS_Communication_NewCycle_sync = {|
				enter.y____.x____, 
				entered.y____.x____, 
				exit.y____.x____, 
				exited.y____.x____,
				enter.x____.y____, 
				entered.x____.y____, 
				exit.x____.y____, 
				exited.x____.y____ |
				x____ <- {SID_Communication_SBroadcast,SID_Communication_SReceive,SID_Communication_NewCycle},
				y____ <- {SID_Communication_NewCycle}
			|}
			
			
			Communication_NewCycle_triggers = {|
				internal__.TID_Communication_t8,
				internal__.TID_Communication_t6,
				internal__.TID_Communication_t1,
				internal__.TID_Communication_t9,
				internal__.TID_Communication_t4,
				internal__.TID_Communication_t5,
				internal__.TID_Communication_t2,
				internal__.TID_Communication_t7,
				internal__.TID_Communication_t3
			|}
			
			State_Communication_NewCycle(id__,
					    const_RSC_Communication_id) = let
				T_Communication_t7(id__,
						    const_RSC_Communication_id) = endexec__.TID_Communication_t7 -> startexec ->  (exit.SID_Communication_NewCycle.SID_Communication_NewCycle -> SKIP;
									SKIP;exited.SID_Communication_NewCycle.SID_Communication_NewCycle -> SKIP;
									J_Communication_j0(id__,
											    const_RSC_Communication_id))
				J_Communication_j2(id__,
						    const_RSC_Communication_id) = (
							(internal__!TID_Communication_t9 -> enter!SID_Communication_NewCycle!SID_Communication_NewCycle -> State_Communication_NewCycle_execute(id__,SID_Communication_NewCycle)
							)
							)
				J_Communication_j1(id__,
						    const_RSC_Communication_id) = (
							(internal__!TID_Communication_t5 -> get_broadcast?b__?x__ -> set_y!x__ -> SKIP
							;J_Communication_j2(id__,
									    const_RSC_Communication_id))[]
							(internal__!TID_Communication_t6 -> get_broadcast?b__?x__ -> set_y!x__ -> SKIP
							;get_y?y -> registerWrite.o_receiveO.(y,0) -> SKIP;J_Communication_j2(id__,
									    const_RSC_Communication_id))
							)
				J_Communication_j0(id__,
						    const_RSC_Communication_id) = (
							(internal__!TID_Communication_t3 -> get_receive?b__?x__ -> set_x!x__ -> SKIP
							;get_x?x -> get_neighs?neighs -> true & (set_neighs!set_toolkit_union(neighs,{tuple2_2(x)}) -> SKIP);J_Communication_j1(id__,
									    const_RSC_Communication_id))[]
							(internal__!TID_Communication_t4 -> get_receive?b__?x__ -> set_x!x__ -> SKIP
							;J_Communication_j1(id__,
									    const_RSC_Communication_id))[]
							(internal__!TID_Communication_t8 -> registerWrite.o_robots.1 -> SKIP;enter!SID_Communication_NewCycle!SID_Communication_SBroadcast -> entered!SID_Communication_NewCycle!SID_Communication_SBroadcast ->
							State_Communication_NewCycle(id__,
									    const_RSC_Communication_id)
							)
							)
				State_Communication_NewCycle_execute(id__,o____) = SKIP; 
					entered!o____!SID_Communication_NewCycle ->
					(SKIP; STOP /\ (
						T_Communication_t7(id__,
								    const_RSC_Communication_id)
						[]
						internal__?x____:diff(ITIDS,{NULLTRANSITION__,TID_Communication_t8,TID_Communication_t6,TID_Communication_t1,TID_Communication_t9,TID_Communication_t4,TID_Communication_t5,TID_Communication_t2,TID_Communication_t7,TID_Communication_t3}) -> exit?y____:diff(SIDS,{SID_Communication_NewCycle})!SID_Communication_NewCycle -> (
								SKIP;
								exited!y____!SID_Communication_NewCycle -> SKIP);
								State_Communication_NewCycle(id__,
										    const_RSC_Communication_id)
					))
			within
				enter?x____:diff(SIDS,{SID_Communication_NewCycle})!SID_Communication_NewCycle -> (State_Communication_NewCycle_execute(id__,x____))
			
			
			I_Communication_i0(id__,
					    const_RSC_Communication_id) = let
				T_Communication_t0(id__,
						    const_RSC_Communication_id) = internal__!TID_Communication_t0 -> enter!SID_Communication!SID_Communication_SBroadcast -> entered!SID_Communication!SID_Communication_SBroadcast ->
				SKIP
			within
				T_Communication_t0(id__,
						    const_RSC_Communication_id)
			
			
			State_Communication_SBroadcast_R(id__,
					    const_RSC_Communication_id) = 
				State_Communication_SBroadcast(id__,
						    const_RSC_Communication_id)
					[|diff(int_int,Communication_SBroadcast_triggers)|]
				SKIP
					 		
			State_Communication_SReceive_R(id__,
					    const_RSC_Communication_id) = 
				State_Communication_SReceive(id__,
						    const_RSC_Communication_id)
					[|diff(int_int,Communication_SReceive_triggers)|]
				SKIP
					 		
			State_Communication_NewCycle_R(id__,
					    const_RSC_Communication_id) = 
				State_Communication_NewCycle(id__,
						    const_RSC_Communication_id)
					[|diff(int_int,Communication_NewCycle_triggers)|]
				SKIP
					 		
				
			STM(id__,
					    const_RSC_Communication_id) = 
				let
					Ending = endexec -> (startexec -> Ending [] terminate -> SKIP)
				within
					startexec -> 
						(
							(
								(
								I_Communication_i0(id__,
										    const_RSC_Communication_id)
									[|
										{|enter.x____.y____, entered.x____.y____, exit.x____.y____, exited.x____.y____ |
											x____ <- diff(SIDS,{SID_Communication_SBroadcast,SID_Communication_SReceive,SID_Communication_NewCycle}),
											y____ <- {SID_Communication_SBroadcast,SID_Communication_SReceive,SID_Communication_NewCycle}
									|}|]
								(
									State_Communication_SBroadcast_R(id__,
											    const_RSC_Communication_id)
										[|inter(CS_Communication_SBroadcast_sync,union(CS_Communication_SReceive_sync,CS_Communication_NewCycle_sync))|]
									(
										State_Communication_SReceive_R(id__,
												    const_RSC_Communication_id)
											[|inter(CS_Communication_SReceive_sync,CS_Communication_NewCycle_sync)|]
										State_Communication_NewCycle_R(id__,
												    const_RSC_Communication_id)
									)
								)
								) [|{|terminate|}|> SKIP
							) \ {|terminate|}
						) ; Ending
			
			-- optimized memory process
			channel getV_x: {(x0__,x1__) | x0__ <- RSC_ID,x1__ <- RSC_ID}
			channel getV_y: RSC_ID
			channel getV_neighs: Set(RSC_ID)
			channel getV_broadcast: Bool.RSC_ID
			channel getV_receive: Bool.{(x0__,x1__) | x0__ <- RSC_ID,x1__ <- RSC_ID}
			
			-- individual memory processes
			
				Memory_x(x__) = ( 
					get_x!x__ -> Memory_x(x__)
					[]
					getV_x!x__ -> Memory_x(x__)
					[]
					set_x?x__ -> Memory_x(x__)
				)
			
				Memory_y(x__) = ( 
					get_y!x__ -> Memory_y(x__)
					[]
					getV_y!x__ -> Memory_y(x__)
					[]
					set_y?x__ -> Memory_y(x__)
				)
			
				Memory_neighs(x__) = ( 
					get_neighs!x__ -> Memory_neighs(x__)
					[]
					getV_neighs!x__ -> Memory_neighs(x__)
					[]
					set_neighs?x__ -> Memory_neighs(x__)
				)
			
			Memory_WC_TID_Communication_t3_0(x__) = (
				getWC.WC_TID_Communication_t3_0_ID!x__ -> Memory_WC_TID_Communication_t3_0(x__)
				[]
				setWC.WC_TID_Communication_t3_0_ID?x__ -> Memory_WC_TID_Communication_t3_0(x__)
			)
			
			Memory_WC_TID_Communication_t4_0(x__) = (
				getWC.WC_TID_Communication_t4_0_ID!x__ -> Memory_WC_TID_Communication_t4_0(x__)
				[]
				setWC.WC_TID_Communication_t4_0_ID?x__ -> Memory_WC_TID_Communication_t4_0(x__)
			)
			
				Memory_broadcast(x__) = (
					get_broadcast!x__ -> Memory_broadcast(x__)
					[]
					getV_broadcast!x__ -> Memory_broadcast(x__)
					[]
					registerRead.i_broadcast?x__ -> Memory_broadcast(x__)
				)
			
				Memory_receive(x__) = (
					get_receive!x__ -> Memory_receive(x__)
					[]
					getV_receive!x__ -> Memory_receive(x__)
					[]
					registerRead.i_receive?x__ -> Memory_receive(x__)
				)
			
			-- processes that read variables and offer transitions
					
			MemoryTransitions(id__,
				 x,
				 y,
				 neighs,
				 WC_TID_Communication_t3_0,
				 WC_TID_Communication_t4_0,
				 const_RSC_Communication_id,
				 broadcast,
				 receive) = (
				startexec -> SKIP
			
				[]	internal__!TID_Communication_t0 -> SKIP
				[]
				internal__!TID_Communication_t1 -> SKIP
				[]
				internal__!TID_Communication_t2 -> SKIP
				[]
				((member(receive,{true.x | x <- {(x0__,x1__) | x0__ <- RSC_ID,x1__ <- RSC_ID}, ((tuple2_1(x)==const_RSC_Communication_id))}) and WC_TID_Communication_t3_0))&(internal__!TID_Communication_t3 -> SKIP)
				[]
				((not ((((((member(receive,{true.x | x <- {(x0__,x1__) | x0__ <- RSC_ID,x1__ <- RSC_ID}, ((tuple2_1(x)==const_RSC_Communication_id))})) and (WC_TID_Communication_t3_0))) or (WC_TID_Communication_t4_0))))))&(internal__!TID_Communication_t4 -> SKIP)
				[]
				((not ((((member(broadcast,{true.y | y <- RSC_ID})) and (WC_TID_Communication_t3_0))))))&(internal__!TID_Communication_t5 -> SKIP)
				[]
				((member(broadcast,{true.y | y <- RSC_ID}) and WC_TID_Communication_t3_0))&(internal__!TID_Communication_t6 -> SKIP)
				[]
				endexec__!TID_Communication_t7 -> SKIP
				[]
				(WC_TID_Communication_t4_0)&(internal__!TID_Communication_t8 -> SKIP)
				[]
				internal__!TID_Communication_t9 -> SKIP
			
			 	[]
			 	 	set_x?x__ -> SKIP
			 	[]
			 	set_y?x__ -> SKIP
			 	[]
			 	set_neighs?x__ -> SKIP
			
			 	[]
			 	 	setWC.WC_TID_Communication_t3_0_ID?x__ -> SKIP
			 	[]
			 	setWC.WC_TID_Communication_t4_0_ID?x__ -> SKIP
			 			 			 	
			 	)
			MemoryTransitions_Communication(id__,
				 const_RSC_Communication_id) =
				(
				getV_x?x ->	
				getV_y?y ->	
				getV_neighs?neighs ->	
				getWC.WC_TID_Communication_t3_0_ID?WC_TID_Communication_t3_0 ->	
				getWC.WC_TID_Communication_t4_0_ID?WC_TID_Communication_t4_0 ->	
				getV_broadcast?broadcast ->	
				getV_receive?receive ->
				 MemoryTransitions(id__,
				 	 x,
				 	 y,
				 	 neighs,
				 	 WC_TID_Communication_t3_0,
				 	 WC_TID_Communication_t4_0,
				 	 const_RSC_Communication_id,
				 	 broadcast,
				 	 receive);
				 MemoryTransitions_Communication(id__,
				 	 const_RSC_Communication_id)
				)
			
			-- synchronisation, hiding and process sets 
			MemoryVariablesProcesses_Communication = Union(
				{
					{
						Memory_x((0,0)),
						Memory_y(0),
						Memory_neighs({}),
						Memory_WC_TID_Communication_t3_0(false),
						Memory_WC_TID_Communication_t4_0(false),
						Memory_broadcast(false.0),
						Memory_receive(false.(0,0))
					}
				}
			)
			
			MemoryVariablesSyncSet = Union({
				{|
					getV_broadcast,
					setWC.WC_TID_Communication_t4_0_ID,
					setWC,
					getWC.WC_TID_Communication_t3_0_ID,
					getV_receive,
					getV_x,
					getV_y,
					getWC.WC_TID_Communication_t4_0_ID,
					getV_neighs,
					set_neighs,
					set_y,
					setWC.WC_TID_Communication_t3_0_ID,
					set_x
				|}	
			})
			
			MemoryVariablesHideSet = Union({
				{|
					getV_x,
					getV_broadcast,
					getV_y,
					getV_neighs,
					getWC,
					getV_receive
				|}
			})
			
			-- combined individual memory processes
			MemoryVariables = ||| P : MemoryVariablesProcesses_Communication @ P
			
			-- complete memory process
			MemoryN(id__,
				 const_RSC_Communication_id) = 
				(MemoryVariables 
				 [| MemoryVariablesSyncSet |] 
				 (	startexec -> wbisim(MemoryTransitions_Communication(id__,
				 	 const_RSC_Communication_id))
				 	[| union({|startexec|},union(Transitions,diff(EndExecs,{endexec}))) |]
				 	-- The following process is an equivalent way to specify that between endexec
				 	-- and startexec no events in the set Transitions are available, thus preventing
				 	-- the state machine from performing transitions in between. Note that there is
				 	-- no synchronisation on the single 'endexec' event itself, because this only
				 	-- arises from an action, and the memory does not interfere with events in
				 	-- actions.
				 	(let
				 		TransitionController = startexec -> (RUN(Transitions) 
				 											 /\ ([] e : EndExecs @ e -> TransitionController))
				 	within 
				 		TransitionController)
				 	
				 	-- It isn't part of MemoryTransitions_ itself, because such a process would need
				 	-- to permit updates to setWC events, emanating from processes controlling clocks.
				 	-- Currently the MemoryTransitions_ process of a software operation called 
				 	-- within this state machine is copied into this process. So to incorporate the
				 	-- control below in such a process would require either:
				 	--
				 	-- (1) knowing about the clocks of every state machine that could call it, which
				 	-- 	   is not compositional;
				 	-- (2) not copying the process, but generating the transition choices explicitly.
				 	--
				 )
				) \ MemoryVariablesHideSet
			
			-- optimised memory
			-- Sets of named elements identified according to transition conditions:
			-- {}
			-- {WC_TID_Communication_t3_0,broadcast}
			-- {x,WC_TID_Communication_t3_0,id,WC_TID_Communication_t4_0,receive}
			-- Summary of all identified named elements:
			-- {
			-- x
			-- WC_TID_Communication_t3_0
			-- y
			-- neighs
			-- id
			-- WC_TID_Communication_t4_0
			-- receive
			-- broadcast
			-- }
			
			-- Allocation plan:
			-- 0:{}
			--	=> {
			--		TID_Communication_t7,
			--		TID_Communication_t1,
			--		TID_Communication_t9,
			--		TID_Communication_t2,
			--		TID_Communication_t0}
			-- 1:{WC_TID_Communication_t3_0,broadcast}
			--	=> {
			--		TID_Communication_t6,
			--		TID_Communication_t5}
			-- 2:{x,WC_TID_Communication_t3_0,id,WC_TID_Communication_t4_0,receive}
			--	=> {
			--		TID_Communication_t8,
			--		TID_Communication_t3,
			--		TID_Communication_t4}
			
			-- Memory transition processes
			MemoryTransitions_opt_0(id__) =
			(
				let
					Update = Current(id__)
					Current(id__)
					 	   = 
					 	   endexec__!TID_Communication_t7 -> Update
					 	   []
					 	   internal__!TID_Communication_t1 -> Update
					 	   []
					 	   internal__!TID_Communication_t9 -> Update
					 	   []
					 	   internal__!TID_Communication_t2 -> Update
					 	   []
					 	   internal__!TID_Communication_t0 -> Update
					 	   	 []
					 	   	 startexec -> Update
				within
					Update
			)
			MemoryTransitions_opt_1(id__) =
			(
				let
					Update = 
					getWC.WC_TID_Communication_t3_0_ID?WC_TID_Communication_t3_0 ->
					get_broadcast?broadcast ->
					Current(id__,
						 WC_TID_Communication_t3_0,
						 broadcast)
					Current(id__,
						 WC_TID_Communication_t3_0,
						 broadcast)
					 	   = 
					 	   ((member(broadcast,{true.y | y <- RSC_ID}) and WC_TID_Communication_t3_0))&(internal__!TID_Communication_t6 -> Update)
					 	   []
					 	   ((not ((((member(broadcast,{true.y | y <- RSC_ID})) and (WC_TID_Communication_t3_0))))))&(internal__!TID_Communication_t5 -> Update)
					 	   	 []
					 	   	 startexec -> Update
					 	   	 
					 	   	 []
					 	   	 setWC.WC_TID_Communication_t3_0_ID?x__ -> Update
				within
					Update
			)
			MemoryTransitions_opt_2(id__,
				 const_RSC_Communication_id) =
			(
				let
					Update = 
					get_x?x ->
					getWC.WC_TID_Communication_t3_0_ID?WC_TID_Communication_t3_0 ->
					getWC.WC_TID_Communication_t4_0_ID?WC_TID_Communication_t4_0 ->
					get_receive?receive ->
					Current(id__,
						 x,
						 WC_TID_Communication_t3_0,
						 WC_TID_Communication_t4_0,
						 receive)
					Current(id__,
						 x,
						 WC_TID_Communication_t3_0,
						 WC_TID_Communication_t4_0,
						 receive)
					 	   = 
					 	   (WC_TID_Communication_t4_0)&(internal__!TID_Communication_t8 -> Update)
					 	   []
					 	   ((member(receive,{true.x | x <- {(x0__,x1__) | x0__ <- RSC_ID,x1__ <- RSC_ID}, ((tuple2_1(x)==const_RSC_Communication_id))}) and WC_TID_Communication_t3_0))&(internal__!TID_Communication_t3 -> Update)
					 	   []
					 	   ((not ((((((member(receive,{true.x | x <- {(x0__,x1__) | x0__ <- RSC_ID,x1__ <- RSC_ID}, ((tuple2_1(x)==const_RSC_Communication_id))})) and (WC_TID_Communication_t3_0))) or (WC_TID_Communication_t4_0))))))&(internal__!TID_Communication_t4 -> Update)
					 	   	 []
					 	   	 startexec -> Update
					 	   	 
					 	   	 []
					 	   	 set_x?x__ -> Update
					 	   	 []
					 	   	 
					 	   	 setWC.WC_TID_Communication_t3_0_ID?x__ -> Update
					 	   	 []
					 	   	 
					 	   	 setWC.WC_TID_Communication_t4_0_ID?x__ -> Update
				within
					Update
			)
			
			-- Memory cell processes
			Memory_opt_x(x__) = ( 
				get_x!x__ -> Memory_opt_x(x__)
				[]
				set_x?x__ -> Memory_opt_x(x__)
			)
			Memory_opt_WC_TID_Communication_t3_0(x__) = ( 
				getWC.WC_TID_Communication_t3_0_ID!x__ -> Memory_opt_WC_TID_Communication_t3_0(x__)
				[]
				setWC.WC_TID_Communication_t3_0_ID?x__ -> Memory_opt_WC_TID_Communication_t3_0(x__)
			)
			Memory_opt_y(x__) = ( 
				get_y!x__ -> Memory_opt_y(x__)
				[]
				set_y?x__ -> Memory_opt_y(x__)
			)
			Memory_opt_neighs(x__) = ( 
				get_neighs!x__ -> Memory_opt_neighs(x__)
				[]
				set_neighs?x__ -> Memory_opt_neighs(x__)
			)
			Memory_opt_WC_TID_Communication_t4_0(x__) = ( 
				getWC.WC_TID_Communication_t4_0_ID!x__ -> Memory_opt_WC_TID_Communication_t4_0(x__)
				[]
				setWC.WC_TID_Communication_t4_0_ID?x__ -> Memory_opt_WC_TID_Communication_t4_0(x__)
			)
			Memory_opt_receive(x__) = (
				get_receive!x__ -> Memory_opt_receive(x__)
				[]
				registerRead.i_receive?x__ -> Memory_opt_receive(x__)
			)
			Memory_opt_broadcast(x__) = (
				get_broadcast!x__ -> Memory_opt_broadcast(x__)
				[]
				registerRead.i_broadcast?x__ -> Memory_opt_broadcast(x__)
			)
			
			-- Composition of memory, StateMachine and Memory transition processes
			
			MemorySTM_opt(id__,cycle_RSC_Communication_Communication,
					    const_RSC_Communication_id) =
				dbisim(
				  sbisim(Memory_opt_WC_TID_Communication_t3_0(false)
				      	[| {|getWC.WC_TID_Communication_t3_0_ID,setWC.WC_TID_Communication_t3_0_ID|} |] 
				      	dbisim(
				      	  sbisim(Memory_opt_broadcast(false.0)
				      	      	[| {|registerRead.i_broadcast,get_broadcast|} |] 
				      	      	sbisim(	
				      	      	  dbisim(
				      	      	    sbisim(dbisim(
				      	      	      sbisim(Memory_opt_x((0,0))
				      	      	          	[| {|get_x,set_x|} |] 
				      	      	          	dbisim(
				      	      	          	  sbisim(Memory_opt_WC_TID_Communication_t4_0(false)
				      	      	          	      	[| {|getWC.WC_TID_Communication_t4_0_ID,setWC.WC_TID_Communication_t4_0_ID|} |] 
				      	      	          	      	dbisim(
				      	      	          	      	  sbisim(Memory_opt_receive(false.(0,0))
				      	      	          	      	      	[| {|registerRead.i_receive,get_receive|} |] 
				      	      	          	      	      	sbisim(	
				      	      	          	      	      	  dbisim(
				      	      	          	      	      	    sbisim(sbisim(	
				      	      	          	      	      	      dbisim(
				      	      	          	      	      	        sbisim(dbisim(sbisim(Memory_opt_y(0)
				      	      	          	      	      	              	[| {|set_y,get_y|} |] 
				      	      	          	      	      	              	dbisim(sbisim(Memory_opt_neighs({})
				      	      	          	      	      	              	      	[| {|get_neighs,set_neighs|} |] 
				      	      	          	      	      	              	      	STM_core(id__,cycle_RSC_Communication_Communication,
				      	      	          	      	      	              	      			    const_RSC_Communication_id)
				      	      	          	      	      	              	      	)\ {|get_neighs,set_neighs|}
				      	      	          	      	      	              	      )
				      	      	          	      	      	              	)\ {|set_y,get_y|}
				      	      	          	      	      	              )
				      	      	          	      	      	          	  [| union({|startexec|},{|internal__.TID_Communication_t2,internal__.TID_Communication_t9,internal__.TID_Communication_t1,internal__.TID_Communication_t0,endexec__.TID_Communication_t7|}) |]
				      	      	          	      	      	          	  MemoryTransitions_opt_0(id__)
				      	      	          	      	      	          	  )\{|internal__.TID_Communication_t2,internal__.TID_Communication_t9,internal__.TID_Communication_t1,internal__.TID_Communication_t0|})
				      	      	          	      	      	          	  [[ endexec__.TID_Communication_t7 <- endexec ]]
				      	      	          	      	      	          )
				      	      	          	      	      	      	  [| union({|startexec|},{|internal__.TID_Communication_t4,internal__.TID_Communication_t3,setWC.WC_TID_Communication_t4_0_ID,internal__.TID_Communication_t8,setWC.WC_TID_Communication_t3_0_ID,set_x|}) |]
				      	      	          	      	      	      	  MemoryTransitions_opt_2(id__,
				      	      	          	      	      	      	  	 const_RSC_Communication_id)
				      	      	          	      	      	      	  )\{|internal__.TID_Communication_t4,internal__.TID_Communication_t3,internal__.TID_Communication_t8|})
				      	      	          	      	      	      )
				      	      	          	      	      	) \ {|get_receive|}
				      	      	          	      	      )
				      	      	          	      	) \ {|getWC.WC_TID_Communication_t4_0_ID,setWC.WC_TID_Communication_t4_0_ID|}
				      	      	          	      )
				      	      	          	) \ {|get_x,set_x|}
				      	      	          )
				      	      	      	  [| union({|startexec|},{|internal__.TID_Communication_t5,internal__.TID_Communication_t6,setWC.WC_TID_Communication_t3_0_ID|}) |]
				      	      	      	  MemoryTransitions_opt_1(id__)
				      	      	      	  )\{|internal__.TID_Communication_t5,internal__.TID_Communication_t6|})
				      	      	      )
				      	      	) \ {|get_broadcast|}
				      	      )
				      	) \ {|getWC.WC_TID_Communication_t3_0_ID,setWC.WC_TID_Communication_t3_0_ID|}
				      )
			
			-- main process
			MachineMemorySyncSet = Union({
				union(
					union(
						{|get_x,set_x,
						get_y,set_y,
						get_neighs,set_neighs|},
						union({|get_broadcast,
						get_receive|},
							  {||}
							 )
					)
						
					,
					{|internal__.TID_Communication_t0,
					internal__.TID_Communication_t1,
					internal__.TID_Communication_t2,
					internal__.TID_Communication_t3,
					internal__.TID_Communication_t4,
					internal__.TID_Communication_t5,
					internal__.TID_Communication_t6,
					endexec__.TID_Communication_t7,
					internal__.TID_Communication_t8,
					internal__.TID_Communication_t9|}
				),
				{|deadline|},
				WCresets
			})
			
			MachineMemoryHidingSet = Union({
				union(
					{|get_x,set_x,
					get_y,set_y,
					get_neighs,set_neighs|},
					union({|get_broadcast,
					get_receive|},
						  {||})
				)
				,
				{|deadline|}
			})
			
			MachineInternalEvents = {|
				internal__
			|}
		
			STM_core(id__,cycle_RSC_Communication_Communication,
					    const_RSC_Communication_id) =
				sbisim(	
					dbisim(
					(wbisim(STM(id__,
							    const_RSC_Communication_id))
					[| union(WCsync,WCresets) |]
					Clocks(id__,
							    const_RSC_Communication_id))\WCresets
					)
					[| union({|startexec|},union(Transitions,EndExecs)) |]
					(let
						TransitionController = startexec -> (RUN(Transitions) 
							 /\ ([] e : EndExecs @ e -> TransitionController))
					within 
					TransitionController))
				[| {| endexec,endexec__
					,registerWrite,startexec,terminate,tock |} |]
				cycle(cycle_RSC_Communication_Communication)
			
			
			-- optimized main process
			AUX_opt(id__,cycle_RSC_Communication_Communication,
					    const_RSC_Communication_id) =
				prioritise(
				  dbisim(
					(MemorySTM_opt(id__,cycle_RSC_Communication_Communication,
							    const_RSC_Communication_id))
					\union(union(MachineMemoryHidingSet,MachineInternalEvents),{|startexec|}))
					[|{|terminate|}|>SKIP
				,<{},{tock}>)
			
			-- main process
			AUX(id__,cycle_RSC_Communication_Communication,
					    const_RSC_Communication_id) =
				prioritise(
					(
				 		(
				 			cycle(cycle_RSC_Communication_Communication)
				 			[| {| endexec,endexec__
				 					,registerRead
				 					,registerWrite,startexec,tock |} |]
				 			(MemoryN(id__,
				 					    const_RSC_Communication_id) 
				 	 		[| union(WCsets,WCsync) |] 
				 	 		Clocks(id__,
				 	 				    const_RSC_Communication_id)
				 			)\WCsets
				 		)
				 		[| union(MachineMemorySyncSet,{| startexec,endexec,endexec__
				 										 ,terminate |}) |]
				 		wbisim(STM(id__,
				 				    const_RSC_Communication_id))
					)[[ endexec__.x____ <- endexec | x____ <- TIDS ]]
				\union(union(MachineMemoryHidingSet,MachineInternalEvents),{|startexec|})
				[|{|terminate|}|>SKIP
				,<{},{tock}>)
			
			internal_(id__,cycle_RSC_Communication_Communication,
					    const_RSC_Communication_id) =
				prioritise(
							(
						 		(
						 			cycle(cycle_RSC_Communication_Communication)
						 			[| {| endexec,endexec__
						 					,registerRead
						 					,registerWrite,startexec,terminate,tock |} |]
						 			(MemoryN(id__,
						 					    const_RSC_Communication_id) 
						 	 		[| union(WCsets,WCsync) |] 
						 	 		Clocks(id__,
						 	 				    const_RSC_Communication_id)
						 			)\WCsets
						 		)
						 		[| union(MachineMemorySyncSet,{| startexec,endexec,endexec__
						 										  |}) |]
						 		wbisim(STM(id__,
						 				    const_RSC_Communication_id))
							)[[ endexec__.x____ <- endexec | x____ <- TIDS ]]
						\union(MachineMemoryHidingSet,{|startexec|})
						[|{|terminate|}|>SKIP
						,<Union({internal_events, ClockResets, {|internal__,terminate|}}),{tock}>)
			
			
		
			datatype SOutputEvents = SOutput_receiveO
				| SOutput_broadcastO
				| SOutput_robots
			
			cycle(cycle_RSC_Communication_Communication) =
				let
					project(o_receiveO.x__) = SOutput_receiveO
					project(o_broadcastO.x__) = SOutput_broadcastO
					project(o_robots.x__) = SOutput_robots
			
					Cycle =
						(registerRead.i_broadcast?x__ -> SKIP
							||| registerRead.i_receive?x__ -> SKIP);
						startexec -> CollectOutputs(SOutputEvents);
						(wait(cycle_RSC_Communication_Communication) [] terminate -> SKIP);
						Cycle
					
					CollectOutputs(sout) =
						(registerWrite?outp:{ outp | outc <- inter(sout,SOutputEvents), outp <- RegisterDataOutput,project(outp) == outc} -> CollectOutputs(diff(sout,{project(outp)}))
						[]
						endexec -> SKIP
						[]
						endexec__?x__ -> SKIP
			)
				within
					Cycle
					
			cycle_opt(cycle_RSC_Communication_Communication) =
				let
					project(o_receiveO.x__) = SOutput_receiveO
					project(o_broadcastO.x__) = SOutput_broadcastO
					project(o_robots.x__) = SOutput_robots
			
					Cycle =
						(registerRead.i_broadcast?x__ -> SKIP
							||| registerRead.i_receive?x__ -> SKIP);
						startexec -> CollectOutputs(SOutputEvents);
						(wait(cycle_RSC_Communication_Communication) [] terminate -> SKIP);
						Cycle
					
					CollectOutputs(sout) =
						(registerWrite?outp:{ outp | outc <- inter(sout,SOutputEvents), outp <- RegisterDataOutput,project(outp) == outc} -> CollectOutputs(diff(sout,{project(outp)}))
						[]
						endexec -> SKIP
						)
				within
					Cycle
		
			Timed(OneStep) {
				-- declare clocks
				datatype ClockSet = dummyC | CLID_RCC
				channel clockReset : ClockSet
		
				
				-- declare trigger deadlines channel
				channel deadline : TIDS.Signal
		
				-- compile clocks process
				
				-- set of strings that uniquely identify the waiting conditions, each of which is 
				-- used to synchronise with the Memory process to set the correspoding variable in
				-- the memory process.
				datatype setWC_identifierSet = dummyWC
				                             | WC_TID_Communication_t3_0_ID
				                             | WC_TID_Communication_t4_0_ID
				
				-- declaring getWC and setWC channel for updating memory variables related to clocks
				channel setWC : setWC_identifierSet.Bool
				channel getWC : setWC_identifierSet.Bool
				
				-- Set of pairs capturing waiting condition processes and their alphabet.
				-- It includes the corresponding set of the defined operations.
				WCset(id__,
						    const_RSC_Communication_id) = Union({
					{
					({|internal__.TID_Communication_t5,internal__.TID_Communication_t4,internal__.TID_Communication_t3,clockReset.CLID_RCC,internal__.TID_Communication_t6,setWC.WC_TID_Communication_t3_0_ID | x <- SIDS|},P_WC_TID_Communication_t3_0(id__,
							    const_RSC_Communication_id)),
					
					({|internal__.TID_Communication_t4,clockReset.CLID_RCC,internal__.TID_Communication_t8,setWC.WC_TID_Communication_t4_0_ID | x <- SIDS|},P_WC_TID_Communication_t4_0(id__,
							    const_RSC_Communication_id))
					}
					})
				
				-- Auxiliary function to rename the channel set for required clocks.
				
				-- Set of transition events for which synchronisation is required between Clocks and the Memory process.
				-- It includes the corresponding set of the defined operations.
				WCsync = Union({
					{|internal__.TID_Communication_t5,
					internal__.TID_Communication_t4,
					internal__.TID_Communication_t3,
					internal__.TID_Communication_t8,
					internal__.TID_Communication_t6|}
					})
				-- Set of all clock resets, including 'clockReset.C' events and 'entered.x.y' events where x is drawn
				-- from the set of all state machine state identifiers. It includes the corresponding set of the defined operations.
				WCresets = Union({
					{|clockReset.CLID_RCC | x <- SIDS |}
					})
				-- Set of all waiting condition set events. It includes the corresponding set of the defined operations.
				WCsets = Union({
					{|setWC|}
					})
				
				P_WC_TID_Communication_t3_0_reset(id__,
						    const_RSC_Communication_id) = clockReset.CLID_RCC -> setWC.WC_TID_Communication_t3_0_ID.true -> P_WC_TID_Communication_t3_0_monitor(id__,
						    const_RSC_Communication_id)
				
				P_WC_TID_Communication_t3_0_monitor(id__,
						    const_RSC_Communication_id) = (TimedInterrupt(RUN({|internal__.TID_Communication_t5,internal__.TID_Communication_t4,internal__.TID_Communication_t3,tock,internal__.TID_Communication_t6|}),2) ; setWC.WC_TID_Communication_t3_0_ID.false -> RUN({|internal__.TID_Communication_t5,internal__.TID_Communication_t4,internal__.TID_Communication_t3,tock,internal__.TID_Communication_t6|})) /\ P_WC_TID_Communication_t3_0_reset(id__,
						    const_RSC_Communication_id)
				
				P_WC_TID_Communication_t4_0_reset(id__,
						    const_RSC_Communication_id) = clockReset.CLID_RCC -> setWC.WC_TID_Communication_t4_0_ID.false -> P_WC_TID_Communication_t4_0_monitor(id__,
						    const_RSC_Communication_id)
				
				P_WC_TID_Communication_t4_0_monitor(id__,
						    const_RSC_Communication_id) = (TimedInterrupt(RUN({|internal__.TID_Communication_t4,internal__.TID_Communication_t8,tock|}),2) ; setWC.WC_TID_Communication_t4_0_ID.true -> RUN({|internal__.TID_Communication_t4,internal__.TID_Communication_t8,tock|})) /\ P_WC_TID_Communication_t4_0_reset(id__,
						    const_RSC_Communication_id)
				
				P_WC_TID_Communication_t3_0(id__,
						    const_RSC_Communication_id) = setWC.WC_TID_Communication_t3_0_ID.true -> P_WC_TID_Communication_t3_0_monitor(id__,
						    const_RSC_Communication_id)
				
				P_WC_TID_Communication_t4_0(id__,
						    const_RSC_Communication_id) = setWC.WC_TID_Communication_t4_0_ID.false -> P_WC_TID_Communication_t4_0_monitor(id__,
						    const_RSC_Communication_id)
				
				-- Clocks process
				Clocks(id__,
						    const_RSC_Communication_id) = || (alpha, P) : WCset(id__,
						    const_RSC_Communication_id) @ [alpha] wbisim(P)
		
				-- collects all clockResets including those of operations
				ClockResets = Union({
					{|clockReset|}
							})
		
				-- With no internal events visible
				Dunopt__(id__,cycle_RSC_Communication_Communication,
						    const_RSC_Communication_id) = timed_priority(AUX(id__,cycle_RSC_Communication_Communication,
						    const_RSC_Communication_id) \ union(internal_events,ClockResets))
		
				D__(id__,cycle_RSC_Communication_Communication,
						    const_RSC_Communication_id) = timed_priority(AUX_opt(id__,cycle_RSC_Communication_Communication,
						    const_RSC_Communication_id) \ union(internal_events,ClockResets))
		
				O__(id__,cycle_RSC_Communication_Communication,
						    const_RSC_Communication_id) = D__(id__,cycle_RSC_Communication_Communication,
						    const_RSC_Communication_id)
		
				-- With enter/entered/exit/exited events visible
				FVS__(id__,cycle_RSC_Communication_Communication,
						    const_RSC_Communication_id) = timed_priority(AUX(id__,cycle_RSC_Communication_Communication,
						    const_RSC_Communication_id) \ ClockResets)
		
				-- With enterV/enteredV/exitV/exitedV events visible
				VS__(id__,cycle_RSC_Communication_Communication,
						    const_RSC_Communication_id) = ShowV(timed_priority(AUX_opt(id__,cycle_RSC_Communication_Communication,
						    const_RSC_Communication_id) \ ClockResets))
		
				-- With clock resets visible
				FVS_C__(id__,cycle_RSC_Communication_Communication,
						    const_RSC_Communication_id) = AUX(id__,cycle_RSC_Communication_Communication,
						    const_RSC_Communication_id)
				}
		endmodule
		
		
		--VS
		VS__(id__,cycle_RSCC_CommunicationC_CommunicationC,
				    const_RSCC_CommunicationC_stm_ref0_id) =
			(
				(
					(
						(
						wbisim(cycleController(id__,cycle_RSCC_CommunicationC_CommunicationC,
								    const_RSCC_CommunicationC_stm_ref0_id))
					 	 [| Union({{||},
					 	 		  {||},
					 	 		  {||},
					 	 		  {||}}) |]
					 	memoryComp(id__,
					 			    const_RSCC_CommunicationC_stm_ref0_id)
					 	)\{||}
						[| {| 	terminate,tock,
								stm_ref0::endexec,stm_ref0::registerRead,stm_ref0::registerWrite|} |]
						-- (Rule 9) composeMachines(...) : CSPProcess
					 	((let
					 		cycle_RSC_Communication_Communication = cycle_RSCC_CommunicationC_CommunicationC
					 	within
					 		(stm_ref0::VS__(id__,cycle_RSC_Communication_Communication,
					 				    const_RSC_Communication_id)
					 		\{| |})
					 		[[stm_ref0::terminate <- terminate]]
					 	)
					 	)
					) \ {|	stm_ref0::endexec,stm_ref0::registerRead,stm_ref0::registerWrite |}
				) [| {terminate} |> SKIP
			)
		
		-- (Rule 7) [[ c : Controller ]]_C : CSPProcess
		D__(id__,cycle_RSCC_CommunicationC_CommunicationC,
				    const_RSCC_CommunicationC_stm_ref0_id) =
			(
				(
					(
						(
						wbisim(cycleController(id__,cycle_RSCC_CommunicationC_CommunicationC,
								    const_RSCC_CommunicationC_stm_ref0_id))
					 	 [| Union({{||},
					 	 		  {||},
					 	 		  {||},
					 	 		  {||}}) |]
					 	memoryComp(id__,
					 			    const_RSCC_CommunicationC_stm_ref0_id)
					 	)\{||}
						[| {| 	terminate,tock,
								stm_ref0::endexec,stm_ref0::registerRead,stm_ref0::registerWrite|} |]
						-- (Rule 9) composeMachines(...) : CSPProcess
					 	((let
					 		cycle_RSC_Communication_Communication = cycle_RSCC_CommunicationC_CommunicationC
					 	within
					 		(stm_ref0::D__(id__,cycle_RSC_Communication_Communication,
					 				    const_RSC_Communication_id)
					 		\{| |})
					 		[[stm_ref0::terminate <- terminate]]
					 	)
					 	)
					) \ {|	stm_ref0::endexec,stm_ref0::registerRead,stm_ref0::registerWrite |}
				) [| {terminate} |> SKIP
			)
	
		O__(id__,cycle_RSCC_CommunicationC_CommunicationC,
				    const_RSCC_CommunicationC_stm_ref0_id) = D__(id__,cycle_RSCC_CommunicationC_CommunicationC,
				    const_RSCC_CommunicationC_stm_ref0_id)
	
	endmodule
	
	-- declaring inputs and outputs of the module
	
	-- (Rule 3) cycleModule(...) : CSPProcess
	
	datatype COutputEvents = COutput_move
		| COutput_broadcastO
		| COutput_receiveO
		| COutput_robots
	
	nametype EVarsEvents = {|COutput_robots|}	
	
	
	cycleModule(id__,cycle_AgSwR_AggregationSoftware_AggregationSoftware) =
	let 
					
		project_ctrl_ref0(ctrl_ref0::o_move.x__) = COutput_move
		project_ctrl_ref1(ctrl_ref1::o_broadcastO.x__) = COutput_broadcastO
		project_ctrl_ref1(ctrl_ref1::o_receiveO.x__) = COutput_receiveO
		project_ctrl_ref1(ctrl_ref1::o_robots.x__) = COutput_robots
		
								
		connected_ctrl_ref0(ctrl_ref0::o_move.x__) = true
		connected_ctrl_ref0(_) = false
		connected_ctrl_ref1(ctrl_ref1::o_broadcastO.x__) = true
		connected_ctrl_ref1(ctrl_ref1::o_receiveO.x__) = true
		connected_ctrl_ref1(ctrl_ref1::o_robots.x__) = true
		connected_ctrl_ref1(_) = false
	
		lift_ctrl_ref0(ctrl_ref0::o_move.x__) = o_move.x__
		lift_ctrl_ref1(ctrl_ref1::o_broadcastO.x__) = o_broadcastO.x__
		lift_ctrl_ref1(ctrl_ref1::o_receiveO.x__) = o_receiveO.x__
	
		CycleModule =
			-- read inputs from the platform and pass to controllers
			(
			((registerRead.i_receive?x__ ->
				ctrl_ref1::registerRead.ctrl_ref1::i_receive!x__ -> SKIP)
				|||
			(registerRead.i_broadcast?x__ ->
				ctrl_ref1::registerRead.ctrl_ref1::i_broadcast!x__ -> SKIP)
				|||
			(registerRead.i_obstacle?x__ ->
				ctrl_ref0::registerRead.ctrl_ref0::i_obstacle!x__ -> SKIP))
			||| ((ctrl_ref0::registerRead.ctrl_ref0::i_neighbours?x__ -> SKIP)
	)		);
			-- synchronize on events related to evars
			((registerWriteE.e_neighbours -> SKIP));
			-- collect outputs, and monitor termination of the cycle, by all controllers
			(CollectOutputs(COutputEvents) [| {endexec} |] Monitor);
			-- wait for the cycleDef period
			(wait(cycle_AgSwR_AggregationSoftware_AggregationSoftware) [] terminate -> SKIP);
			-- recurse
			CycleModule
								
		CollectOutputs(sout) =
			(
			ctrl_ref0::registerWrite?outp:{ outp | outc <- diff(sout,EVarsEvents), outp <- ctrl_ref0::RegisterDataOutput, connected_ctrl_ref0(outp), project_ctrl_ref0(outp) == outc}
			 	-> registerWrite!lift_ctrl_ref0(outp)
			 		-> CollectOutputs(diff(sout,{project_ctrl_ref0(outp)}))
			[]
			ctrl_ref1::registerWrite?outp:{ outp | outc <- diff(sout,EVarsEvents), outp <- ctrl_ref1::RegisterDataOutput, connected_ctrl_ref1(outp), project_ctrl_ref1(outp) == outc}
			 	-> registerWrite!lift_ctrl_ref1(outp)
			 		-> CollectOutputs(diff(sout,{project_ctrl_ref1(outp)}))
			[]
			ctrl_ref1::registerWrite?outp:{ outp | outc <- inter(sout,EVarsEvents), outp <- ctrl_ref1::RegisterDataOutput, connected_ctrl_ref1(outp), project_ctrl_ref1(outp) == outc}
				-> CollectOutputs(diff(sout,{project_ctrl_ref1(outp)}))
			[]
			endexec -> SKIP
			)
			
		Monitor = 
			(	 (ctrl_ref0::endexec -> SKIP)
			|||	 (ctrl_ref1::endexec -> SKIP)); endexec -> SKIP
		
	within
		CycleModule 
	
	-- (Rule 5) memoryComp(...) : CSPProcess
	memoryComp(id__) = (
		Memory_neighbours(false.0)
		)
	
	Memory_neighbours(x__) = (
		registerWriteE.e_neighbours -> Memory_neighbours(false.0)
		[]
		ctrl_ref1::registerWrite.ctrl_ref1::o_robots?x__ -> Memory_neighbours(true.x__)
		[]
		ctrl_ref0::registerRead.ctrl_ref0::i_neighbours!x__ -> Memory_neighbours(x__)
	)
	
	--VS
	VS__(id__,cycle_AgSwR_AggregationSoftware_AggregationSoftware,
			    const_RSMC_MovementC_stm_ref0_alpha,
			    const_RSCC_CommunicationC_stm_ref0_id) =
	(
		(
			(
				(
					wbisim(cycleModule(id__,cycle_AgSwR_AggregationSoftware_AggregationSoftware))
	 	 			[| Union({{||},
	 	 					  {|registerWriteE|},
	 	 					  {|ctrl_ref0::registerRead.ctrl_ref0::i_neighbours|},
	 	 					  {|ctrl_ref1::registerWrite.ctrl_ref1::o_robots|}}) |]
	 	 		 	memoryComp(id__)
	 			)\{|registerWriteE|}
				[| {| 	terminate,tock,
						ctrl_ref0::endexec,ctrl_ref0::registerRead,ctrl_ref0::registerWrite,
						ctrl_ref1::endexec,ctrl_ref1::registerRead,ctrl_ref1::registerWrite	|} |]
				-- (Rule 6) composeControllers(...) : CSPProcess
	 			((
	 				(let
	 					cycle_RSMC_MovementC_MovementC = cycle_AgSwR_AggregationSoftware_AggregationSoftware
	 				within
	 					(ctrl_ref0::VS__(id__,cycle_RSMC_MovementC_MovementC,
	 							    const_RSMC_MovementC_stm_ref0_alpha)
	 					\{| |})
	 					[[ctrl_ref0::terminate <- terminate]]
	 				)
	 				[|{tock,terminate}|]
	 				(let
	 					cycle_RSCC_CommunicationC_CommunicationC = cycle_AgSwR_AggregationSoftware_AggregationSoftware
	 				within
	 					(ctrl_ref1::VS__(id__,cycle_RSCC_CommunicationC_CommunicationC,
	 							    const_RSCC_CommunicationC_stm_ref0_id)
	 					\{| |})
	 					[[ctrl_ref1::terminate <- terminate]]
	 				)
	 			)
	 			)
			) \ {|	endexec,
					ctrl_ref0::endexec,ctrl_ref0::registerRead,ctrl_ref0::registerWrite,
					ctrl_ref1::endexec,ctrl_ref1::registerRead,ctrl_ref1::registerWrite |}
		) [| {terminate} |> SKIP
	) \ {terminate}
	
	-- (Rule 1) [[ M : SimModule ]]_M : CSPProcess
	D__(id__,cycle_AgSwR_AggregationSoftware_AggregationSoftware,
			    const_RSMC_MovementC_stm_ref0_alpha,
			    const_RSCC_CommunicationC_stm_ref0_id) =
	(
		(
			(
				(
					wbisim(cycleModule(id__,cycle_AgSwR_AggregationSoftware_AggregationSoftware))
	 	 			[| Union({{||},
	 	 					  {|registerWriteE|},
	 	 					  {|ctrl_ref0::registerRead.ctrl_ref0::i_neighbours|},
	 	 					  {|ctrl_ref1::registerWrite.ctrl_ref1::o_robots|}}) |]
	 	 		 	memoryComp(id__)
	 			)\{|registerWriteE|}
				[| {| 	terminate,tock,
						ctrl_ref0::endexec,ctrl_ref0::registerRead,ctrl_ref0::registerWrite,
						ctrl_ref1::endexec,ctrl_ref1::registerRead,ctrl_ref1::registerWrite	|} |]
				-- (Rule 6) composeControllers(...) : CSPProcess
	 			((
	 				(let
	 					cycle_RSMC_MovementC_MovementC = cycle_AgSwR_AggregationSoftware_AggregationSoftware
	 				within
	 					(ctrl_ref0::D__(id__,cycle_RSMC_MovementC_MovementC,
	 							    const_RSMC_MovementC_stm_ref0_alpha)
	 					\{| |})
	 					[[ctrl_ref0::terminate <- terminate]]
	 				)
	 				[|{tock,terminate}|]
	 				(let
	 					cycle_RSCC_CommunicationC_CommunicationC = cycle_AgSwR_AggregationSoftware_AggregationSoftware
	 				within
	 					(ctrl_ref1::D__(id__,cycle_RSCC_CommunicationC_CommunicationC,
	 							    const_RSCC_CommunicationC_stm_ref0_id)
	 					\{| |})
	 					[[ctrl_ref1::terminate <- terminate]]
	 				)
	 			)
	 			)
			) \ {|	endexec,
					ctrl_ref0::endexec,ctrl_ref0::registerRead,ctrl_ref0::registerWrite,
					ctrl_ref1::endexec,ctrl_ref1::registerRead,ctrl_ref1::registerWrite |}
		) [| {terminate} |> SKIP
	) \ {terminate}
	
	O__(id__,cycle_AgSwR_AggregationSoftware_AggregationSoftware,
			    const_RSMC_MovementC_stm_ref0_alpha,
			    const_RSCC_CommunicationC_stm_ref0_id) = D__(id__,cycle_AgSwR_AggregationSoftware_AggregationSoftware,
			    const_RSMC_MovementC_stm_ref0_alpha,
			    const_RSCC_CommunicationC_stm_ref0_id)
	
endmodule




endmodule
