transparent diamond
transparent sbisim

const_RSMC_MovementC_stm_ref0_waitt3 = 1

const_RSMC_MovementC_stm_ref0_cTurn180 = 1

const_RSMC_MovementC_stm_ref0_cRandom = 1

const_RCMovC_MovementC_stm_ref0_av = 1

const_RCMovC_MovementC_stm_ref0_MB = 3

const_RSMC_MovementC_stm_ref0_MB = 3

const_RSMC_MovementC_stm_ref0_av = 1

cycle_AgSw_AggregationSoftware_AggregationSoftware = 1

include "AgSwR.csp"

--------------------------------------------------------------------------------------------------------------
--No more than RC continuous time units are spent in the state Receive of the state-machine Communication.
--------------------------------------------------------------------------------------------------------------

Communication_RC = 2


AnyOther(E) = CHAOS(Events) [|E|> SKIP

ADeadline(E,d) = (CHAOS(Events) [| {tock} |] WAIT(d)) [|E|> SKIP

WAIT(n) = if (n == 0) then SKIP else tock -> WAIT(n-1)

Timed{

CommunicationStateSpent(t,x) =
let
	Main = AnyOther({|AgSwR::AggregationSoftware::ctrl_ref1::stm_ref0::enterV.x |}) ; ADeadline({|AgSwR::AggregationSoftware::ctrl_ref1::stm_ref0::exitV.x|},t) ; Main
within
	timed_priority(Main)


assert 	CommunicationStateSpent(Communication_RC,AgSwR::AggregationSoftware::ctrl_ref1::stm_ref0::SID_Communication_SReceive)
		[FD=
                AgSwR::AggregationSoftware::VS__(1,1,4,1,1)
                
                
                --AgSwRS::AggregationSoftware::VS__(1,1,1,1,4,1,1,1,1,1,2)
		
}
