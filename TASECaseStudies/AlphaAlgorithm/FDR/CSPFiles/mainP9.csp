transparent diamond
transparent sbisim

include "AgSwR.csp"

--------------------------------------------------------------------------------------------------------------
--The robot should start moving, and after every obstacle, move at least once.
--------------------------------------------------------------------------------------------------------------

AgSw_Position = {RSMov_Position_left,RSMov_Position_right}

Spec2 = let
    Start2 = (AgSwR::AggregationSoftware::ctrl_ref0::stm_ref0::registerRead.AgSwR::AggregationSoftware::ctrl_ref0::stm_ref0::i_obstacle.true.RSMov_Position_left -> SKIP)
            |~| 
            (AgSwR::AggregationSoftware::ctrl_ref0::stm_ref0::registerWrite.AgSwR::AggregationSoftware::ctrl_ref0::stm_ref0::o_move.1.0 -> SKIP)
            
    Start = (|~|x:AgSw_Position @ AgSwR::AggregationSoftware::ctrl_ref0::stm_ref0::registerRead.AgSwR::AggregationSoftware::ctrl_ref0::stm_ref0::i_obstacle.true.x -> SKIP)
            |~| 
            (|~|x:AgSw_Position @ AgSwR::AggregationSoftware::ctrl_ref0::stm_ref0::registerRead.AgSwR::AggregationSoftware::ctrl_ref0::stm_ref0::i_obstacle.false.x -> SKIP )
            ; AgSwR::AggregationSoftware::ctrl_ref0::stm_ref0::registerWrite.AgSwR::AggregationSoftware::ctrl_ref0::stm_ref0::o_move.1.0 -> SKIP
 {- ok
    Moves =   AgSwR::AggregationSoftware::ctrl_ref0::stm_ref0::registerRead.AgSwR::AggregationSoftware::ctrl_ref0::stm_ref0::i_obstacle.true.RSMov_Position_left ->
              AgSwR::AggregationSoftware::ctrl_ref0::stm_ref0::registerWrite.AgSwR::AggregationSoftware::ctrl_ref0::stm_ref0::o_move.0.0 -> (Moves  |~| SKIP)
              -}
  Moves =   (AgSwR::AggregationSoftware::ctrl_ref0::stm_ref0::registerRead.AgSwR::AggregationSoftware::ctrl_ref0::stm_ref0::i_obstacle.true.RSMov_Position_left ->
              AgSwR::AggregationSoftware::ctrl_ref0::stm_ref0::registerWrite.AgSwR::AggregationSoftware::ctrl_ref0::stm_ref0::o_move.0.0 -> (Moves  |~| Start |~| SKIP))            
            |~|
            (|~| x:AgSw_Position @  AgSwR::AggregationSoftware::ctrl_ref0::stm_ref0::registerRead.AgSwR::AggregationSoftware::ctrl_ref0::stm_ref0::i_obstacle.false.x -> Moves )
         
within
    Moves  

assert Spec2 [F= AgSwR::AggregationSoftware::D__(1,1,1,1)\diff(Events,{|
AgSwR::AggregationSoftware::ctrl_ref0::stm_ref0::registerWrite.AgSwR::AggregationSoftware::ctrl_ref0::stm_ref0::o_move.0.0,
AgSwR::AggregationSoftware::ctrl_ref0::stm_ref0::registerRead.AgSwR::AggregationSoftware::ctrl_ref0::stm_ref0::i_obstacle.true.RSMov_Position_left,
AgSwR::AggregationSoftware::ctrl_ref0::stm_ref0::registerRead.AgSwR::AggregationSoftware::ctrl_ref0::stm_ref0::i_obstacle.false|})
