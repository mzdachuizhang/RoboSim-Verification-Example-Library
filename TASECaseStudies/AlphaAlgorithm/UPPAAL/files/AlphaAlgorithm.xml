<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>const int N = 2; //number of robots

urgent chan ASAP;

clock GlobalTime;
clock cycle;

int end_S_num = 0;
const int S_num = 2;

broadcast chan wait_p;
broadcast chan end;

broadcast chan registerRead;
broadcast chan registerWrite;

broadcast chan registerRead_M_C;
broadcast chan registerWrite_C_M;

broadcast chan registerRead_MovementC_S;
broadcast chan registerWrite_S_MovementC;

broadcast chan registerWrite_Movement;
broadcast chan startexec_Movement;
broadcast chan endexec_Movement;

struct{
    bool b;
    int l;
    int a;
} move_ePuck, move_Aggregation, move_MovementC, move_Movement;
bool move_Movement_MovementC, move_MovementC_Aggregation, move_Aggregation_ePuck;
int move_Aggregation_n, move_MovementC_n, move_Movement_n;

struct{
    bool b;
    bool left;
    bool right;
} obstacle_ePuck, obstacle_Aggregation, obstacle_MovementC, obstacle_Movement;  // This is not an output 

struct{
    bool b;
    int n;
} neighbours_ePuck, neighbours_Aggregation, neighbours_MovementC, neighbours_Movement;

//Communication
typedef int ID;

broadcast chan registerRead_CommunicationC_S;
broadcast chan registerWrite_S_CommunicationC;

broadcast chan registerWrite_Communication;
broadcast chan startexec_Communication;
broadcast chan endexec_Communication;

struct{
    bool b;
    int n;
} robots_Aggregation, robots_CommunicationC, robots_Communication;
bool robots_Communication_CommunicationC, robots_CommunicationC_Aggregation, robots_Aggregation_ePuck;
int robots_Aggregation_n, robots_CommunicationC_n, robots_Communication_n;

struct{
    bool b;
    ID id;
} broadcast_ePuck, broadcast_Aggregation, broadcast_CommunicationC, broadcast_Communication;
bool broadcast_Communication_CommunicationC, broadcast_CommunicationC_Aggregation, broadcast_Aggregation_ePuck;
int broadcast_Aggregation_n, broadcast_CommunicationC_n, broadcast_Communication_n;

struct{
    bool b;
    ID id[2];
} receive_ePuck, receive_Aggregation, receive_CommunicationC, receive_Communication;
bool receive_Communication_CommunicationC, receive_CommunicationC_Aggregation, receive_Aggregation_ePuck;
int receive_Aggregation_n, receive_CommunicationC_n, receive_Communication_n;
</declaration>
	<template>
		<name>AggregationSoftware_cycle</name>
		<declaration>const int period = 1;

void Init(){    //every cycle, the number of each output from controller to module resets to 0
    move_Aggregation_n = 0;
    broadcast_Aggregation_n = 0;
    receive_Aggregation_n = 0;
    robots_Aggregation_n = 0;
}

bool ifConflict(){  // for all variables from controller to module, need to be judge if its number â‰¥ 1
    return move_Aggregation_n&gt;1 || broadcast_Aggregation_n&gt;1 || receive_Aggregation_n&gt;1 ||
           robots_Aggregation_n&gt;1;
}

void TakeInput(int i, int j, int k){
//Movement
    if      (i==1)    {obstacle_ePuck.b = false;}
    else if (i==2)    {obstacle_ePuck.b = true; obstacle_ePuck.left = true; obstacle_ePuck.right = false;}
    else if (i==3)    {obstacle_ePuck.b = true; obstacle_ePuck.left = false; obstacle_ePuck.right = true;}
    obstacle_Aggregation = obstacle_ePuck;
//Communication
    if      (j==1)    {broadcast_ePuck.b = false;}
    else if (j==2)    {broadcast_ePuck.b = true; broadcast_ePuck.id = 0;}
    else if (j==3)    {broadcast_ePuck.b = true; broadcast_ePuck.id = 1;}
    if      (k==1)    {receive_ePuck.b = false;}
    else if (k==2)    {receive_ePuck.b = true; receive_ePuck.id[0] = 0; receive_ePuck.id[1] = 0;}
    else if (k==3)    {receive_ePuck.b = true; receive_ePuck.id[0] = 0; receive_ePuck.id[1] = 1;}
    else if (k==4)    {receive_ePuck.b = true; receive_ePuck.id[0] = 1; receive_ePuck.id[1] = 0;}
    else if (k==5)    {receive_ePuck.b = true; receive_ePuck.id[0] = 1; receive_ePuck.id[1] = 1;}
    broadcast_Aggregation = broadcast_ePuck;
    receive_Aggregation = receive_ePuck;
//Communication to Movement
    neighbours_Aggregation = robots_Aggregation;
}

//void Reset(){
//    obstacle_ePuck.b = false;
//    broadcast_ePuck.b = false;
//    receive_ePuck.b = false;
//}

void GiveOutput(){
    if(move_Aggregation_ePuck==true){
        move_ePuck = move_Aggregation;
        move_Aggregation_ePuck=false;
     //   move_Aggregation.b=false;
    }
    if(broadcast_Aggregation_ePuck==true){
        broadcast_ePuck = broadcast_Aggregation;
        broadcast_Aggregation_ePuck=false;
     //   broadcast_Aggregation.b=false;
    }
    if(receive_Aggregation_ePuck==true){
        receive_ePuck = receive_Aggregation;
        receive_Aggregation_ePuck=false;
     //   receive_Aggregation.b=false;
    }
}</declaration>
		<location id="id0" x="-323" y="51">
			<name x="-340" y="17">m0</name>
			<committed/>
		</location>
		<location id="id1" x="-170" y="51">
			<name x="-180" y="17">m1</name>
			<committed/>
		</location>
		<location id="id2" x="17" y="51">
			<name x="9" y="17">m2</name>
			<label kind="invariant" x="-85" y="59">cycle&lt;=period</label>
		</location>
		<location id="id3" x="17" y="-51">
			<name x="34" y="-59">m3</name>
			<committed/>
		</location>
		<location id="id4" x="204" y="51">
			<name x="195" y="68">End</name>
		</location>
		<location id="id5" x="17" y="-110">
			<name x="34" y="-119">Output_Conflict</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="guard" x="51" y="85">end_S_num+1&lt;S_num</label>
			<label kind="synchronisation" x="51" y="102">end?</label>
			<label kind="assignment" x="51" y="119">end_S_num+=1</label>
			<nail x="34" y="136"/>
			<nail x="51" y="76"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id5"/>
			<label kind="guard" x="25" y="-85">ifConflict()==true</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="35" y="17">end_S_num+1&gt;=S_num</label>
			<label kind="synchronisation" x="60" y="34">end?</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="guard" x="-110" y="85">cycle==period</label>
			<label kind="synchronisation" x="-110" y="102">wait_p!</label>
			<label kind="assignment" x="-110" y="119">cycle=0</label>
			<nail x="17" y="136"/>
			<nail x="-323" y="136"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="42" y="-34">ifConflict()==false</label>
			<label kind="synchronisation" x="51" y="-17">registerWrite!</label>
			<label kind="assignment" x="51" y="0">GiveOutput()</label>
			<nail x="51" y="0"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-144" y="-34">registerWrite_C_M?</label>
			<nail x="-17" y="0"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-136" y="34">registerRead_M_C!</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="select" x="-306" y="-34">i: int[1,3],
j: int[1,3],
k: int[1,5]</label>
			<label kind="assignment" x="-306" y="17">Init(),
TakeInput(i,j,k)</label>
		</transition>
	</template>
	<template>
		<name>MovementC_cycle</name>
		<declaration>void Init(){   
    move_MovementC_n = 0;
}

bool ifConflict(){  
    return move_MovementC_n&gt;1;
}

void TakeInput(){
    obstacle_MovementC = obstacle_Aggregation;
    neighbours_MovementC = neighbours_Aggregation;
}

//void Reset(){
//    obstacle_Aggregation.b = false;
//    neighbours_Aggregation.b = false;
//}

void GiveOutput(){
    if(move_MovementC_Aggregation==true){
        move_Aggregation = move_MovementC;
        move_Aggregation_n += 1;
        move_Aggregation_ePuck=true;
        move_MovementC_Aggregation=false;
    //    move_MovementC.b=false;
    }
}</declaration>
		<location id="id6" x="0" y="195">
			<name x="-9" y="161">c0</name>
		</location>
		<location id="id7" x="416" y="195">
			<name x="407" y="161">c2</name>
		</location>
		<location id="id8" x="178" y="195">
			<name x="168" y="161">c1</name>
			<committed/>
		</location>
		<location id="id9" x="416" y="93">
			<name x="433" y="93">c3</name>
			<committed/>
		</location>
		<location id="id10" x="612" y="195">
			<name x="603" y="204">End</name>
		</location>
		<location id="id11" x="416" y="34">
			<name x="433" y="25">Output_Conflict</name>
		</location>
		<init ref="id6"/>
		<transition>
			<source ref="id7"/>
			<target ref="id7"/>
			<label kind="guard" x="442" y="212">end_S_num+1&lt;S_num</label>
			<label kind="synchronisation" x="442" y="229">end?</label>
			<nail x="425" y="246"/>
			<nail x="442" y="212"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id11"/>
			<label kind="guard" x="424" y="59">ifConflict()==true</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id10"/>
			<label kind="guard" x="433" y="170">end_S_num+1&gt;=S_num</label>
			<label kind="synchronisation" x="450" y="187">end?</label>
			<nail x="433" y="195"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="357" y="221">wait_p?</label>
			<nail x="416" y="246"/>
			<nail x="0" y="246"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id7"/>
			<label kind="guard" x="441" y="119">ifConflict()==false</label>
			<label kind="synchronisation" x="441" y="135">registerWrite_C_M!</label>
			<label kind="assignment" x="441" y="152">GiveOutput()</label>
			<nail x="441" y="144"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="195" y="110">registerWrite_S_MovementC?</label>
			<nail x="390" y="144"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="195" y="178">registerRead_MovementC_S!</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="25" y="144">registerRead_M_C?</label>
			<label kind="assignment" x="25" y="161">Init(),
TakeInput()</label>
		</transition>
	</template>
	<template>
		<name>Movement_cycle</name>
		<declaration>void Init(){   
    move_Movement_n = 0;
}

bool ifConflict(){  
    return move_Movement_n&gt;1;
}

void TakeInput(){
    obstacle_Movement = obstacle_MovementC;
    neighbours_Movement = neighbours_MovementC;

}

//void Reset(){
//    obstacle_MovementC.b = false;
//    neighbours_MovementC.b = false;
//}

void GiveOutput(){
    if(move_Movement_MovementC==true){
        move_MovementC = move_Movement;
        move_MovementC_n += 1;
        move_MovementC_Aggregation=true;
        move_Movement_MovementC=false;
 //       move_Movement.b = false;   //every time when output is finished, member b will return to false
    }
}</declaration>
		<location id="id12" x="-238" y="34">
			<name x="-229" y="51">s0</name>
		</location>
		<location id="id13" x="-102" y="34">
			<name x="-110" y="51">s1</name>
			<committed/>
		</location>
		<location id="id14" x="119" y="34">
			<name x="127" y="42">s2</name>
		</location>
		<location id="id15" x="119" y="136">
			<name x="93" y="110">s4</name>
		</location>
		<location id="id16" x="119" y="-68">
			<name x="110" y="-51">s3</name>
			<committed/>
		</location>
		<location id="id17" x="324" y="136">
			<name x="314" y="102">End</name>
		</location>
		<location id="id18" x="119" y="-127">
			<name x="136" y="-135">Output_Conflict</name>
		</location>
		<init ref="id12"/>
		<transition>
			<source ref="id15"/>
			<target ref="id15"/>
			<label kind="guard" x="136" y="153">end_S_num+1&gt;=S_num</label>
			<label kind="synchronisation" x="144" y="170">end?</label>
			<nail x="102" y="187"/>
			<nail x="136" y="187"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id18"/>
			<label kind="guard" x="127" y="-102">ifConflict()==true</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id17"/>
			<label kind="guard" x="137" y="102">end_S_num+1&gt;=S_num</label>
			<label kind="synchronisation" x="170" y="119">end?</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="25" y="119">wait_p?</label>
			<nail x="-238" y="136"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id14"/>
			<label kind="guard" x="153" y="-34">ifConflict()==false</label>
			<label kind="synchronisation" x="153" y="-17">registerWrite_S_MovementC!</label>
			<label kind="assignment" x="153" y="0">GiveOutput()</label>
			<nail x="153" y="-17"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-85" y="-51">registerWrite_Movement?</label>
			<nail x="85" y="-17"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="127" y="68">endexec_Movement?</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-59" y="17">startexec_Movement!</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-263" y="0">registerRead_MovementC_S?</label>
			<label kind="assignment" x="-212" y="17">Init(),
TakeInput()</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Movement</name>
		<declaration>const int lv = 0;    //linear speed
const int av = 180;    //angular speed
int a;
const int MB = 4; 
//const int MB = 1;
const int alpha = 1;

const int cWait=2;
const int cTurn180=1;
const int cRandom=1;

int wait;

int n;

typedef struct{
    bool left;
    bool right;
} Position;
Position p;

bool turned;
//int wait;

clock MBC;

//void move(int l, int a){
//    move_Movement.b=true;
//    move_Movement.l=l;
//    move_Movement.a=a;
//    move_Movement_n += 1;
//    move_Movement_MovementC=true;
//}

</declaration>
		<location id="id19" x="-484" y="-1249">
			<name x="-467" y="-1258">Init</name>
		</location>
		<location id="id20" x="-484" y="-1156">
			<name x="-467" y="-1164">mi0</name>
			<committed/>
		</location>
		<location id="id21" x="-484" y="-1045">
			<name x="-510" y="-1028">entering_SMove</name>
			<label kind="comments" x="-127" y="-1054">sub-state machine : MovementAndAvoidance</label>
			<urgent/>
		</location>
		<location id="id22" x="-195" y="-1139">
			<name x="-237" y="-1131">entered_SMove</name>
			<urgent/>
		</location>
		<location id="id23" x="60" y="-1139">
			<name x="18" y="-1130">exited_DMove</name>
			<urgent/>
		</location>
		<location id="id24" x="238" y="-1139">
			<name x="221" y="-1130">exec1</name>
		</location>
		<location id="id25" x="425" y="-1139">
			<name x="399" y="-1130">mj0</name>
			<committed/>
		</location>
		<location id="id26" x="620" y="-943">
			<name x="637" y="-935">entering_Avoid</name>
			<urgent/>
		</location>
		<location id="id27" x="255" y="-943">
			<name x="170" y="-935">entered_Avoid</name>
			<urgent/>
		</location>
		<location id="id28" x="8" y="-943">
			<name x="-51" y="-917">entered_Wait_Move</name>
			<urgent/>
		</location>
		<location id="id29" x="-272" y="-943">
			<name x="-289" y="-934">exec2</name>
		</location>
		<location id="id30" x="-484" y="-943">
			<name x="-492" y="-934">mj1</name>
			<committed/>
		</location>
		<location id="id31" x="518" y="-816">
			<name x="457" y="-791">entered_InfoNeighbours</name>
			<urgent/>
		</location>
		<location id="id32" x="289" y="-816">
			<name x="272" y="-807">exec3</name>
		</location>
		<location id="id33" x="102" y="-816">
			<name x="110" y="-807">j0</name>
			<committed/>
		</location>
		<location id="id34" x="-161" y="-816">
			<name x="-222" y="-808">entering_Turning</name>
			<label kind="comments" x="-238" y="-867">sub-state machine : Turning</label>
			<urgent/>
		</location>
		<location id="id35" x="-289" y="-816">
			<name x="-289" y="-850">ti0</name>
			<committed/>
		</location>
		<location id="id36" x="-340" y="-816">
			<name x="-383" y="-807">entered_Init</name>
			<urgent/>
		</location>
		<location id="id37" x="-476" y="-748">
			<name x="-501" y="-731">entering_RandomTurn</name>
			<urgent/>
		</location>
		<location id="id38" x="-493" y="-680">
			<name x="-501" y="-663">entering_Turn180</name>
			<urgent/>
		</location>
		<location id="id39" x="637" y="-714">
			<name x="602" y="-690">Turning_f</name>
			<urgent/>
		</location>
		<location id="id40" x="256" y="-713">
			<name x="239" y="-697">exec4</name>
		</location>
		<location id="id41" x="442" y="-713">
			<name x="357" y="-697">entered_Wait_Turn</name>
			<urgent/>
		</location>
		<location id="id42" x="-433" y="-816">
			<name x="-450" y="-850">tj0</name>
			<committed/>
		</location>
		<location id="id43" x="-102" y="-748">
			<name x="-212" y="-739">entered_RandomTurn</name>
			<urgent/>
		</location>
		<location id="id44" x="-102" y="-680">
			<name x="-187" y="-671">entered_Turn180</name>
			<urgent/>
		</location>
		<location id="id45" x="68" y="-714">
			<name x="76" y="-697">tj1</name>
			<committed/>
		</location>
		<location id="id46" x="-484" y="-1198">
			<name x="-467" y="-1206">i0</name>
			<urgent/>
		</location>
		<location id="id47" x="-93" y="-1139">
			<name x="-127" y="-1131">exited_SMove</name>
			<urgent/>
		</location>
		<location id="id48" x="-42" y="-1139">
			<name x="-84" y="-1114">entered_DMove</name>
			<urgent/>
		</location>
		<location id="id49" x="663" y="-816">
			<name x="535" y="-807">exited_MovementAndAvoidance</name>
			<urgent/>
		</location>
		<location id="id50" x="153" y="-943">
			<name x="76" y="-935">exited_Avoid</name>
			<urgent/>
		</location>
		<location id="id51" x="-93" y="-943">
			<name x="-161" y="-934">exited_Wait_Move</name>
			<urgent/>
		</location>
		<location id="id52" x="467" y="-816">
			<name x="338" y="-808">exited_InfoNeighbours</name>
			<urgent/>
		</location>
		<location id="id53" x="637" y="-612">
			<name x="654" y="-620">exited_Turning</name>
			<urgent/>
		</location>
		<location id="id54" x="-391" y="-816">
			<name x="-425" y="-850">exited_Init</name>
			<urgent/>
		</location>
		<location id="id55" x="-59" y="-748">
			<name x="-110" y="-722">exited_RandomTurn</name>
			<urgent/>
		</location>
		<location id="id56" x="-51" y="-680">
			<name x="-59" y="-671">exited_Turn180</name>
			<urgent/>
		</location>
		<location id="id57" x="502" y="-713">
			<name x="451" y="-680">exited_Wait_Turn</name>
			<urgent/>
		</location>
		<init ref="id19"/>
		<transition>
			<source ref="id41"/>
			<target ref="id53"/>
			<label kind="guard" x="340" y="-680">turned==true</label>
			<nail x="442" y="-646"/>
		</transition>
		<transition>
			<source ref="id44"/>
			<target ref="id53"/>
			<label kind="guard" x="-93" y="-654">turned==true</label>
			<nail x="-102" y="-655"/>
			<nail x="-102" y="-637"/>
		</transition>
		<transition>
			<source ref="id43"/>
			<target ref="id53"/>
			<label kind="guard" x="-102" y="-790">turned==true</label>
			<nail x="-102" y="-773"/>
			<nail x="688" y="-773"/>
			<nail x="688" y="-638"/>
		</transition>
		<transition>
			<source ref="id36"/>
			<target ref="id53"/>
			<label kind="guard" x="-433" y="-884">turned==true</label>
			<nail x="-340" y="-867"/>
			<nail x="-510" y="-867"/>
			<nail x="-510" y="-629"/>
		</transition>
		<transition>
			<source ref="id39"/>
			<target ref="id53"/>
			<label kind="guard" x="569" y="-663">turned==true</label>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id49"/>
			<label kind="guard" x="25" y="-884">MBC&gt;=MB</label>
			<nail x="25" y="-867"/>
			<nail x="629" y="-867"/>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id49"/>
			<label kind="guard" x="263" y="-892">MBC&gt;=MB</label>
			<nail x="255" y="-875"/>
			<nail x="647" y="-875"/>
		</transition>
		<transition>
			<source ref="id48"/>
			<target ref="id49"/>
			<label kind="guard" x="-33" y="-1216">MBC&gt;=MB</label>
			<nail x="-42" y="-1199"/>
			<nail x="672" y="-1199"/>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id49"/>
			<label kind="guard" x="-169" y="-1241">MBC&gt;=MB</label>
			<nail x="-195" y="-1224"/>
			<nail x="689" y="-1224"/>
		</transition>
		<transition>
			<source ref="id41"/>
			<target ref="id57"/>
		</transition>
		<transition>
			<source ref="id44"/>
			<target ref="id56"/>
		</transition>
		<transition>
			<source ref="id43"/>
			<target ref="id55"/>
		</transition>
		<transition>
			<source ref="id36"/>
			<target ref="id54"/>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id52"/>
		</transition>
		<transition>
			<source ref="id49"/>
			<target ref="id31"/>
			<label kind="assignment" x="553" y="-832">MBC=0</label>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id51"/>
			<label kind="guard" x="-68" y="-960">MBC&lt;MB</label>
		</transition>
		<transition>
			<source ref="id50"/>
			<target ref="id28"/>
			<label kind="select" x="34" y="-977">i : int[1,1]</label>
			<label kind="assignment" x="34" y="-960">wait=i*360/av</label>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id27"/>
			<label kind="guard" x="510" y="-994">p.left!=true</label>
			<label kind="synchronisation" x="425" y="-977">registerWrite_Movement!</label>
			<label kind="assignment" x="280" y="-960">move_Movement.b=true, move_Movement.l=0,
move_Movement.a=-av,move_Movement_n+=1,
move_Movement_MovementC=true</label>
			<nail x="306" y="-943"/>
		</transition>
		<transition>
			<source ref="id47"/>
			<target ref="id48"/>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id47"/>
			<label kind="guard" x="-178" y="-1156">MBC&lt;MB</label>
		</transition>
		<transition>
			<source ref="id46"/>
			<target ref="id20"/>
		</transition>
		<transition>
			<source ref="id57"/>
			<target ref="id45"/>
			<label kind="guard" x="426" y="-756">MBC&lt;wait</label>
			<nail x="502" y="-739"/>
			<nail x="69" y="-739"/>
		</transition>
		<transition>
			<source ref="id38"/>
			<target ref="id44"/>
			<label kind="assignment" x="-459" y="-714">move_Movement.b=true,move_Movement.l=0,
move_Movement.a=av,move_Movement_n+=1,
move_Movement_MovementC=true</label>
		</transition>
		<transition>
			<source ref="id37"/>
			<target ref="id43"/>
			<label kind="assignment" x="-450" y="-782">move_Movement.b=true,move_Movement.l=0,
move_Movement.a=av,move_Movement_n+=1,
move_Movement_MovementC=true</label>
		</transition>
		<transition>
			<source ref="id54"/>
			<target ref="id42"/>
		</transition>
		<transition>
			<source ref="id57"/>
			<target ref="id39"/>
			<label kind="guard" x="519" y="-730">MBC&gt;=wait</label>
			<label kind="assignment" x="519" y="-713">turned=true</label>
		</transition>
		<transition>
			<source ref="id40"/>
			<target ref="id41"/>
			<label kind="synchronisation" x="272" y="-731">startexec_Movement?</label>
		</transition>
		<transition>
			<source ref="id45"/>
			<target ref="id40"/>
			<label kind="synchronisation" x="85" y="-731">endexec_Movement!</label>
		</transition>
		<transition>
			<source ref="id53"/>
			<target ref="id20"/>
			<nail x="-518" y="-612"/>
			<nail x="-518" y="-1156"/>
		</transition>
		<transition>
			<source ref="id56"/>
			<target ref="id45"/>
			<label kind="assignment" x="-34" y="-697">wait=180/av</label>
			<nail x="59" y="-680"/>
		</transition>
		<transition>
			<source ref="id55"/>
			<target ref="id45"/>
			<label kind="select" x="-34" y="-765">i : int[1,1]</label>
			<label kind="assignment" x="-42" y="-748">wait=i*360/av</label>
			<nail x="51" y="-748"/>
		</transition>
		<transition>
			<source ref="id42"/>
			<target ref="id38"/>
			<label kind="guard" x="-501" y="-833">n&gt;alpha</label>
			<nail x="-493" y="-816"/>
		</transition>
		<transition>
			<source ref="id42"/>
			<target ref="id37"/>
			<label kind="guard" x="-484" y="-807">n&lt;=alpha</label>
		</transition>
		<transition>
			<source ref="id35"/>
			<target ref="id36"/>
		</transition>
		<transition>
			<source ref="id34"/>
			<target ref="id35"/>
			<label kind="assignment" x="-263" y="-833">turned=false</label>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id34"/>
			<label kind="guard" x="-136" y="-833">neighbours_Movement.b==true</label>
			<label kind="assignment" x="-76" y="-816">n=neighbours_ePuck.n</label>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id31"/>
			<label kind="guard" x="110" y="-859">neighbours_Movement.b!=true</label>
			<nail x="102" y="-842"/>
			<nail x="518" y="-842"/>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id33"/>
			<label kind="synchronisation" x="128" y="-833">startexec_Movement?</label>
		</transition>
		<transition>
			<source ref="id52"/>
			<target ref="id32"/>
			<label kind="synchronisation" x="315" y="-833">endexec_Movement!</label>
		</transition>
		<transition>
			<source ref="id30"/>
			<target ref="id21"/>
			<label kind="guard" x="-484" y="-994">MBC&gt;=wait</label>
		</transition>
		<transition>
			<source ref="id30"/>
			<target ref="id28"/>
			<label kind="guard" x="-340" y="-994">MBC&lt;wait</label>
			<nail x="-348" y="-977"/>
			<nail x="8" y="-977"/>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id30"/>
			<label kind="synchronisation" x="-433" y="-960">startexec_Movement?</label>
		</transition>
		<transition>
			<source ref="id51"/>
			<target ref="id29"/>
			<label kind="synchronisation" x="-246" y="-960">endexec_Movement!</label>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id50"/>
			<label kind="guard" x="178" y="-960">MBC&lt;MB</label>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id27"/>
			<label kind="guard" x="518" y="-1088">p.left==true</label>
			<label kind="synchronisation" x="433" y="-1071">registerWrite_Movement!</label>
			<label kind="assignment" x="289" y="-1054">move_Movement.b=true, move_Movement.l=0,
move_Movement.a=av, move_Movement_n += 1,
move_Movement_MovementC=true</label>
			<nail x="603" y="-1003"/>
			<nail x="272" y="-1003"/>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id26"/>
			<label kind="guard" x="442" y="-1173">(obstacle_Movement.b==true &amp;&amp;
MBC&lt;(MB-360/av))</label>
			<label kind="assignment" x="442" y="-1139">p.left=obstacle_Movement.left,
p.right=obstacle_Movement.right</label>
			<nail x="654" y="-1139"/>
			<nail x="654" y="-943"/>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id48"/>
			<label kind="guard" x="69" y="-1190">obstacle_Movement.b!=true || MBC&gt;=(MB-360/av)</label>
			<nail x="425" y="-1173"/>
			<nail x="-8" y="-1173"/>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id25"/>
			<label kind="synchronisation" x="255" y="-1156">startexec_Movement?</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id24"/>
			<label kind="synchronisation" x="77" y="-1156">endexec_Movement!</label>
		</transition>
		<transition>
			<source ref="id48"/>
			<target ref="id23"/>
			<label kind="guard" x="-25" y="-1156">MBC&lt;MB</label>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="-467" y="-1147">registerWrite_Movement!</label>
			<label kind="assignment" x="-467" y="-1113">move_Movement.b=true,
move_Movement.l=lv,
move_Movement.a=0,
move_Movement_n += 1,
move_Movement_MovementC=true</label>
			<nail x="-195" y="-1045"/>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id21"/>
			<label kind="assignment" x="-467" y="-1130">MBC=0</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id46"/>
			<label kind="synchronisation" x="-476" y="-1232">startexec_Movement?</label>
		</transition>
	</template>
	<template>
		<name>CommunicationC_cycle</name>
		<declaration>void Init(){   
    broadcast_CommunicationC_n = 0;
    receive_CommunicationC_n = 0;
    robots_CommunicationC_n = 0;
}

bool ifConflict(){
    return broadcast_CommunicationC_n&gt;1 || receive_CommunicationC_n&gt;1 || robots_CommunicationC_n&gt;1;
}

void TakeInput(){
    broadcast_CommunicationC = broadcast_Aggregation;
    receive_CommunicationC = receive_Aggregation;
}

//void Reset(){
//    broadcast_Aggregation.b = false;
//    receive_Aggregation.b = false;
//}

void GiveOutput(){
    if(broadcast_CommunicationC_Aggregation==true){
        broadcast_Aggregation = broadcast_CommunicationC;
        broadcast_Aggregation_n += 1;
        broadcast_CommunicationC_Aggregation=false;
        broadcast_Aggregation_ePuck=true;
  //      broadcast_CommunicationC.b=false;
    }
    if(receive_CommunicationC_Aggregation==true){
        receive_Aggregation = receive_CommunicationC;
        receive_Aggregation_n += 1;
        receive_CommunicationC_Aggregation=false;
        receive_Aggregation_ePuck=true;
  //    receive_CommunicationC.b=false;
    }
    if(robots_CommunicationC_Aggregation==true){
        robots_Aggregation = robots_CommunicationC;
        robots_Aggregation_n += 1;
        robots_CommunicationC_Aggregation=false;
  //      robots_CommunicationC.b=false;
    }
}</declaration>
		<location id="id58" x="8" y="187">
			<name x="-1" y="153">c0</name>
		</location>
		<location id="id59" x="459" y="187">
			<name x="450" y="153">c2</name>
		</location>
		<location id="id60" x="187" y="187">
			<name x="177" y="153">c1</name>
			<committed/>
		</location>
		<location id="id61" x="459" y="84">
			<name x="450" y="101">c3</name>
			<committed/>
		</location>
		<location id="id62" x="680" y="187">
			<name x="670" y="153">End</name>
		</location>
		<location id="id63" x="459" y="25">
			<name x="476" y="16">Output_Conflict</name>
		</location>
		<init ref="id58"/>
		<transition>
			<source ref="id59"/>
			<target ref="id59"/>
			<label kind="guard" x="493" y="204">end_S_num+1&lt;S_num</label>
			<label kind="synchronisation" x="493" y="221">end?</label>
			<nail x="476" y="238"/>
			<nail x="493" y="204"/>
		</transition>
		<transition>
			<source ref="id61"/>
			<target ref="id63"/>
			<label kind="guard" x="467" y="50">ifConflict()==true</label>
		</transition>
		<transition>
			<source ref="id59"/>
			<target ref="id62"/>
			<label kind="guard" x="476" y="161">end_S_num+1&gt;=S_num</label>
			<label kind="synchronisation" x="501" y="178">end?</label>
		</transition>
		<transition>
			<source ref="id59"/>
			<target ref="id58"/>
			<label kind="synchronisation" x="399" y="212">wait_p?</label>
			<nail x="459" y="237"/>
			<nail x="9" y="237"/>
		</transition>
		<transition>
			<source ref="id61"/>
			<target ref="id59"/>
			<label kind="guard" x="484" y="110">ifConflict()==false</label>
			<label kind="synchronisation" x="484" y="126">registerWrite_C_M!</label>
			<label kind="assignment" x="484" y="143">GiveOutput()</label>
			<nail x="484" y="135"/>
		</transition>
		<transition>
			<source ref="id59"/>
			<target ref="id61"/>
			<label kind="synchronisation" x="195" y="101">registerWrite_S_CommunicationC?</label>
			<nail x="433" y="135"/>
		</transition>
		<transition>
			<source ref="id60"/>
			<target ref="id59"/>
			<label kind="synchronisation" x="204" y="169">registerRead_CommunicationC_S!</label>
		</transition>
		<transition>
			<source ref="id58"/>
			<target ref="id60"/>
			<label kind="synchronisation" x="34" y="152">registerRead_M_C?</label>
			<label kind="assignment" x="51" y="169">Init(),
TakeInput()</label>
		</transition>
	</template>
	<template>
		<name>Communication_cycle</name>
		<declaration>void Init(){   
    broadcast_Communication_n = 0;
    receive_Communication_n = 0;
    robots_Communication_n = 0;
}

bool ifConflict(){
    return broadcast_Communication_n&gt;1 || receive_Communication_n&gt;1 || robots_Communication_n&gt;1;
}

void TakeInput(){
    broadcast_Communication = broadcast_CommunicationC;
    receive_Communication = receive_CommunicationC;
}

//void Reset(){
//    broadcast_CommunicationC.b = false;
//    receive_CommunicationC.b = false;
//}

void GiveOutput(){
    if(broadcast_Communication_CommunicationC==true){
        broadcast_CommunicationC = broadcast_Communication;
        broadcast_CommunicationC_n += 1;
        broadcast_Communication_CommunicationC=false;
        broadcast_CommunicationC_Aggregation=true;
  //      broadcast_Communication.b=false;
    }
    if(receive_Communication_CommunicationC==true){
        receive_CommunicationC = receive_Communication;
        receive_CommunicationC_n += 1;
        receive_Communication_CommunicationC=false;
        receive_CommunicationC_Aggregation=true; 
    //    receive_Communication.b=false;
    }
    if(robots_Communication_CommunicationC==true){
        robots_CommunicationC = robots_Communication;
        robots_CommunicationC_n += 1;
        robots_Communication_CommunicationC=false;
        robots_CommunicationC_Aggregation=true; 
      //  robots_Communication.b=false;
    }
}</declaration>
		<location id="id64" x="-238" y="34">
			<name x="-229" y="51">s0</name>
		</location>
		<location id="id65" x="-102" y="34">
			<name x="-110" y="51">s1</name>
			<committed/>
		</location>
		<location id="id66" x="119" y="34">
			<name x="127" y="42">s2</name>
		</location>
		<location id="id67" x="119" y="136">
			<name x="93" y="110">s4</name>
		</location>
		<location id="id68" x="119" y="-68">
			<name x="110" y="-51">s3</name>
			<committed/>
		</location>
		<location id="id69" x="331" y="136">
			<name x="321" y="102">End</name>
		</location>
		<location id="id70" x="119" y="-127">
			<name x="136" y="-136">Output_Conflict</name>
		</location>
		<init ref="id64"/>
		<transition>
			<source ref="id67"/>
			<target ref="id67"/>
			<label kind="guard" x="136" y="144">end_S_num+1&lt;S_num</label>
			<label kind="synchronisation" x="136" y="161">end?</label>
			<nail x="102" y="178"/>
			<nail x="136" y="178"/>
		</transition>
		<transition>
			<source ref="id68"/>
			<target ref="id70"/>
			<label kind="guard" x="127" y="-102">ifConflict()==true</label>
		</transition>
		<transition>
			<source ref="id67"/>
			<target ref="id69"/>
			<label kind="guard" x="137" y="102">end_S_num+1&gt;=S_num</label>
			<label kind="synchronisation" x="170" y="119">end?</label>
		</transition>
		<transition>
			<source ref="id67"/>
			<target ref="id64"/>
			<label kind="synchronisation" x="25" y="119">wait_p?</label>
			<nail x="-238" y="136"/>
		</transition>
		<transition>
			<source ref="id68"/>
			<target ref="id66"/>
			<label kind="guard" x="153" y="-34">ifConflict()==false</label>
			<label kind="synchronisation" x="153" y="-17">registerWrite_S_CommunicationC!</label>
			<label kind="assignment" x="153" y="0">GiveOutput()</label>
			<nail x="153" y="-17"/>
		</transition>
		<transition>
			<source ref="id66"/>
			<target ref="id68"/>
			<label kind="synchronisation" x="-127" y="-42">registerWrite_Communication?</label>
			<nail x="85" y="-17"/>
		</transition>
		<transition>
			<source ref="id66"/>
			<target ref="id67"/>
			<label kind="synchronisation" x="127" y="68">endexec_Communication?</label>
		</transition>
		<transition>
			<source ref="id65"/>
			<target ref="id66"/>
			<label kind="synchronisation" x="-85" y="17">startexec_Communication!</label>
		</transition>
		<transition>
			<source ref="id64"/>
			<target ref="id65"/>
			<label kind="synchronisation" x="-289" y="0">registerRead_CommunicationC_S?</label>
			<label kind="assignment" x="-212" y="17">Init(),
TakeInput()</label>
		</transition>
	</template>
	<template>
		<name>Communication</name>
		<declaration>const ID id=0;

ID x[N];
//ID y;

int neighs;   //number of neighbours

clock RCC;
const int RC = 4;

void ev_broadcast(ID id){
    broadcast_Communication.b=true;
    broadcast_Communication.id=id;
    broadcast_Communication_CommunicationC=true;
    broadcast_Communication_n += 1;
}

void ev_robots(int neighs){
    robots_Communication.b=true;
    robots_Communication.n=neighs;
    robots_Communication_CommunicationC=true;
    robots_Communication_n += 1;
}

void ev_receive(int y, int id){
    receive_Communication.b=true;
    receive_Communication.id[0]=y;
    receive_Communication.id[1]=id;
    receive_Communication_CommunicationC=true;
    receive_Communication_n += 1;
}

void union(int other_id){
    if (x[other_id] == 0){
        neighs += 1;
        x[other_id] = 1;
    }
}

int i = 0;
void reset(){
    RCC=0;
    neighs=0;
    for(i=0; i&lt;N; i++)
        x[i]=0;
}

</declaration>
		<location id="id71" x="-221" y="-442">
			<name x="-204" y="-450">i0</name>
			<urgent/>
		</location>
		<location id="id72" x="-221" y="-391">
			<name x="-374" y="-399">entering_Broadcast</name>
			<urgent/>
		</location>
		<location id="id73" x="-221" y="-306">
			<name x="-365" y="-323">entered_Broadcast</name>
			<urgent/>
		</location>
		<location id="id74" x="-221" y="-161">
			<name x="-340" y="-170">exited_Receive</name>
			<urgent/>
		</location>
		<location id="id75" x="-170" y="-161">
			<name x="-196" y="-153">j0</name>
			<committed/>
		</location>
		<location id="id76" x="161" y="-161">
			<name x="144" y="-153">j1</name>
			<committed/>
		</location>
		<location id="id77" x="187" y="-76">
			<name x="153" y="-59">exited_NewCycle</name>
			<urgent/>
		</location>
		<location id="id78" x="-34" y="-76">
			<name x="-59" y="-67">c5</name>
		</location>
		<location id="id79" x="518" y="-161">
			<name x="501" y="-153">j2</name>
			<committed/>
		</location>
		<location id="id80" x="-221" y="-493">
			<name x="-204" y="-502">Init</name>
		</location>
		<location id="id81" x="-221" y="-263">
			<name x="-357" y="-271">exited_Broadcast</name>
			<urgent/>
		</location>
		<location id="id82" x="-221" y="-212">
			<name x="-348" y="-221">entered_Receive</name>
			<urgent/>
		</location>
		<location id="id83" x="382" y="-76">
			<name x="323" y="-59">entered_NewCycle</name>
			<urgent/>
		</location>
		<init ref="id80"/>
		<transition>
			<source ref="id83"/>
			<target ref="id77"/>
		</transition>
		<transition>
			<source ref="id82"/>
			<target ref="id74"/>
		</transition>
		<transition>
			<source ref="id81"/>
			<target ref="id82"/>
			<label kind="assignment" x="-272" y="-246">reset()</label>
		</transition>
		<transition>
			<source ref="id80"/>
			<target ref="id71"/>
			<label kind="synchronisation" x="-212" y="-476">startexec_Communication?</label>
			<nail x="-221" y="-467"/>
			<nail x="-221" y="-467"/>
		</transition>
		<transition>
			<source ref="id79"/>
			<target ref="id83"/>
			<nail x="518" y="-76"/>
		</transition>
		<transition>
			<source ref="id78"/>
			<target ref="id75"/>
			<label kind="synchronisation" x="-238" y="-93">startexec_Communication?</label>
			<nail x="-170" y="-76"/>
		</transition>
		<transition>
			<source ref="id77"/>
			<target ref="id78"/>
			<label kind="synchronisation" x="-8" y="-93">endexec_Communication!</label>
		</transition>
		<transition>
			<source ref="id76"/>
			<target ref="id79"/>
			<label kind="guard" x="204" y="-212">broadcast_Communication.b==false ||
broadcast_Communication.id==id</label>
			<nail x="348" y="-178"/>
		</transition>
		<transition>
			<source ref="id76"/>
			<target ref="id79"/>
			<label kind="guard" x="195" y="-144">broadcast_Communication.b==true &amp;&amp;
broadcast_Communication.id!=id</label>
			<label kind="synchronisation" x="195" y="-161">registerWrite_Communication!</label>
			<label kind="assignment" x="204" y="-110">ev_receive(broadcast_Communication.id,id)</label>
			<nail x="348" y="-136"/>
		</transition>
		<transition>
			<source ref="id75"/>
			<target ref="id76"/>
			<label kind="guard" x="-127" y="-161">(receive_Communication.b==false ||
receive_Communication.id[0]!=id) &amp;&amp;
RCC&lt;RC</label>
			<nail x="-9" y="-144"/>
		</transition>
		<transition>
			<source ref="id75"/>
			<target ref="id76"/>
			<label kind="guard" x="-127" y="-255">receive_Communication.b==true &amp;&amp;
receive_Communication.id[0]==id &amp;&amp;
RCC&lt;RC</label>
			<label kind="assignment" x="-127" y="-204">union(receive_Communication.id[1])</label>
			<nail x="-8" y="-178"/>
		</transition>
		<transition>
			<source ref="id75"/>
			<target ref="id72"/>
			<label kind="guard" x="-162" y="-391">RCC&gt;=RC</label>
			<label kind="synchronisation" x="-161" y="-374">registerWrite_Communication!</label>
			<label kind="assignment" x="-162" y="-357">ev_robots(neighs)</label>
			<nail x="-170" y="-391"/>
		</transition>
		<transition>
			<source ref="id74"/>
			<target ref="id75"/>
		</transition>
		<transition>
			<source ref="id73"/>
			<target ref="id81"/>
		</transition>
		<transition>
			<source ref="id72"/>
			<target ref="id73"/>
			<label kind="synchronisation" x="-433" y="-365">registerWrite_Communication!</label>
			<label kind="assignment" x="-340" y="-348">ev_broadcast(id)</label>
		</transition>
		<transition>
			<source ref="id71"/>
			<target ref="id72"/>
		</transition>
	</template>
	<system>system AggregationSoftware_cycle,
       MovementC_cycle, Movement_cycle, Movement,
       CommunicationC_cycle, Communication_cycle, Communication;</system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment>(B) Basic Requirements B1</comment>
		</query>
		<query>
			<formula>A[] not (AggregationSoftware_cycle.Output_Conflict or MovementC_cycle.Output_Conflict or Movement_cycle.Output_Conflict or CommunicationC_cycle.Output_Conflict or Communication_cycle.Output_Conflict)</formula>
			<comment>B2.1</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Movement.entered_SMove</formula>
			<comment>B3.1</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Movement.entered_DMove</formula>
			<comment>B3.2</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Movement.entered_Avoid</formula>
			<comment>B3.3</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Movement.entered_Wait_Move</formula>
			<comment>B3.4</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Movement.entered_InfoNeighbours</formula>
			<comment>B3.5</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Movement.entered_Init</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Movement.entered_RandomTurn</formula>
			<comment>B3.6</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Movement.entered_Turn180</formula>
			<comment>B3.8
This properties will not satisfy</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Movement.entered_Wait_Turn</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Communication.entered_Broadcast</formula>
			<comment>B3.10</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Communication.entered_Receive</formula>
			<comment>B3.11</comment>
		</query>
		<query>
			<formula>E&lt;&gt; Communication.entered_NewCycle</formula>
			<comment>B3.12</comment>
		</query>
		<query>
			<formula>A&lt;&gt; (broadcast_Communication.b==true and broadcast_Communication.id!=Communication.id) imply receive_Communication_CommunicationC==true</formula>
			<comment>(UT) Model Requirements
UT1) The communication behaviour should consist of a broadcast followed by a receive event.</comment>
		</query>
		<query>
			<formula>obstacle_ePuck.b==true --&gt; move_ePuck.b==true</formula>
			<comment>UT2) The robot should start moving, and, after every obstacle, move at least once.</comment>
		</query>
		<query>
			<formula>A[] Communication.j0 imply Communication.RCC&lt;=Communication.RC</formula>
			<comment>(T) Timed Model Requirements
T1) No more than RC continuous time units are spent in the state Receive of the state-machine Communication.
Note that c2 is the location after Receive</comment>
		</query>
		<query>
			<formula>A[] (Communication.entered_Broadcast and Communication.RCC&gt;0) imply Communication.RCC==Communication.RC</formula>
			<comment>T2) The state machine Communication starts to enter the state Receive exactly every RC units.</comment>
		</query>
		<query>
			<formula>(Communication.entered_Broadcast and Communication.RCC&gt;0) --&gt; (broadcast_Communication_CommunicationC==true or receive_Communication_CommunicationC==true)</formula>
			<comment>T3) Initially, and then after exactly RC time units, 
when a broadcast.Communication_id happens,
then the events broadcast and receive are offered before RC time units elapse.
(Not sure if it is true)</comment>
		</query>
		<query>
			<formula>A[] Movement.tj1 imply Movement.MBC &lt;= 360/Movement.av</formula>
			<comment>T4) No more than 360/av time units are spent in the state Turning of state-machine Movement. (No need to verify)</comment>
		</query>
	</queries>
</nta>
