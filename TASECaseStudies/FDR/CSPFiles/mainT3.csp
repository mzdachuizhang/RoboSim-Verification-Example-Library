transparent diamond
transparent sbisim

const_RSMC_MovementC_stm_ref0_waitt3 = 1

const_RSMC_MovementC_stm_ref0_cTurn180 = 1

const_RSMC_MovementC_stm_ref0_cRandom = 1

const_RCMovC_MovementC_stm_ref0_av = 1

const_RCMovC_MovementC_stm_ref0_MB = 3

const_RSMC_MovementC_stm_ref0_MB = 3

const_RSMC_MovementC_stm_ref0_av = 1

cycle_AgSw_AggregationSoftware_AggregationSoftware = 1

include "main_assertionsV2.csp"

--------------------------------------------------------------------------------------------------------------
--Initially, and then after exactly RC time units, when a broadcast.Communication_id happens, then the events broadcast and receive are offered before RC time units elapse.
--------------------------------------------------------------------------------------------------------------

Communication_RC = 2
Communication_id = 1
ID = {0,1}

SomeHappened(t) = t < Communication_RC & (AnyOther({tock}) ; SomeHappened(t+1))
		[]
		t == Communication_RC & NoEvent

--Timed{

AnyOther(E) = CHAOS(Events) [|E|> SKIP

NoEvent = AnyOther({|AgSwRS::AggregationSoftware::registerWrite.AgSwRS::AggregationSoftware::o_broadcast.Communication_id|}) ; BroadcastHappened(0)

BroadcastHappened(t) = (t < Communication_RC & (AgSwRS::AggregationSoftware::registerRead.AgSwRS::AggregationSoftware::i_broadcast.true ?x-> SomeHappened(t) 
				[] 
				AgSwRS::AggregationSoftware::registerRead.AgSwRS::AggregationSoftware::i_receive.true?x:{x|x <- {(Communication_id,x0) | x0 <- ID}} -> SomeHappened(t) 
				[] 
				tock -> BroadcastHappened(t+1)))
			[]
			t == Communication_RC & NoEvent



assert CHAOS({|AgSwRS::AggregationSoftware::registerWrite.AgSwRS::AggregationSoftware::o_move,
AgSwRS::AggregationSoftware::registerRead.AgSwRS::AggregationSoftware::i_obstacle,tock|}) [| {tock} |] NoEvent [FD= 
--AgSwRS::AggregationSoftware::ctrl_ref1::stm_ref0::Dunopt__(1,1,1,2)
AgSwRS::AggregationSoftware::D__(1,1,1,1,2,1,1,1,1,1,2)

--} 

{-

NoEvent = AnyOther({|broadcast.Communication_id|}) ; BroadcastHappened(0)

BroadcastHappened(t) = (t < Communication_RC & (broadcast ?x-> SomeHappened(t) 
				[] 
				receive?x:{x|x <- {(Communication_id,x0) | x0 <- ID}} -> SomeHappened(t) 
				[] 
				tock -> BroadcastHappened(t+1)))
			[]
			t == Communication_RC & NoEvent

SomeHappened(t) = t < Communication_RC & (AnyOther({tock}) ; SomeHappened(t+1))
		[]
		t == Communication_RC & NoEvent


-- Requirement TB.4
assert CHAOS({|moveCall,moveRet,obstacle,tock|}) [| {tock} |] NoEvent [FD= T_AggregationSoftware


-}
