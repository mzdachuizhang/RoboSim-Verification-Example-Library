transparent diamond
transparent sbisim

const_RSMC_MovementC_stm_ref0_waitt3 = 1

const_RSMC_MovementC_stm_ref0_cTurn180 = 1

const_RSMC_MovementC_stm_ref0_cRandom = 1

const_RCMovC_MovementC_stm_ref0_av = 1

const_RCMovC_MovementC_stm_ref0_MB = 3

const_RSMC_MovementC_stm_ref0_MB = 3

const_RSMC_MovementC_stm_ref0_av = 1

cycle_AgSw_AggregationSoftware_AggregationSoftware = 1

include "main_assertionsV2.csp"

------------------------------------------------------------------------------------
--The robot should start moving, and, after every obstacle, move at least once.
------------------------------------------------------------------------------------

Spec2 = let
Moves = AgSwRS::AggregationSoftware::ctrl_ref0::stm_ref0::registerWrite.AgSwRS::AggregationSoftware::ctrl_ref0::stm_ref0::o_move.1.1 -> (Moves |~| SKIP)
Run = |~|x:AgSw_Position @ AgSwRS::AggregationSoftware::ctrl_ref0::stm_ref0::registerRead.AgSwRS::AggregationSoftware::ctrl_ref0::stm_ref0::i_obstacle.true.x -> 
         Moves; Run
within
Moves; Run
assert Spec2 [F= AgSwRS::AggregationSoftware::ctrl_ref0::stm_ref0::D__(1,1,1,1,2,1,1,1,1)\diff(Events,{|AgSwRS::AggregationSoftware::ctrl_ref0::stm_ref0::registerWrite.AgSwRS::AggregationSoftware::ctrl_ref0::stm_ref0::o_move,
AgSwRS::AggregationSoftware::ctrl_ref0::stm_ref0::registerRead.AgSwRS::AggregationSoftware::ctrl_ref0::stm_ref0::i_obstacle.false|})

{-

Dunopt__(id__,cycle_RSMov_Movement_Movement,
						    const_RSMov_Movement_lv,
						    const_RSMov_Movement_av,
						    const_RSMov_Movement_MB,
						    const_RSMov_Movement_alpha,
						    const_RSMov_Movement_cWait,
						    const_RSMov_Movement_cTurn180,
						    const_RSMov_Movement_cRandom)
Spec2 = let
Moves = AgSwRS::AggregationSoftware::registerWrite.AgSwRS::AggregationSoftware::o_move.1.1 -> (Moves |~| SKIP)
Run = |~|x:AgSw_Position @ AgSwRS::AggregationSoftware::registerRead.AgSwRS::AggregationSoftware::i_obstacle.true.x -> 
         Moves; Run
within
Moves; Run
assert Spec2 [F= sbisim(diamond(AgSwRS::AggregationSoftware::D__(1,1,1,1,2,1,1,1,1,1,2)\diff(Events,{|AgSwRS::AggregationSoftware::registerWrite.AgSwRS::AggregationSoftware::o_move,
AgSwRS::AggregationSoftware::registerRead.AgSwRS::AggregationSoftware::i_obstacle.false|})))




Spec2 = let
Moves = moveCall -> moveRet -> (Moves |~| SKIP)
Run = |~|x:Position @ obstacle.x -> Moves; Run
within
Moves; Run

assert Spec2 [F= AggregationSoftware_O\diff(Events,{|moveCall,moveRet,obstacle|})

-}

