transparent diamond
transparent sbisim

const_RSMC_MovementC_stm_ref0_waitt3 = 1

const_RSMC_MovementC_stm_ref0_cTurn180 = 1

const_RSMC_MovementC_stm_ref0_cRandom = 1

const_RCMovC_MovementC_stm_ref0_av = 1

const_RCMovC_MovementC_stm_ref0_MB = 3

const_RSMC_MovementC_stm_ref0_MB = 3

const_RSMC_MovementC_stm_ref0_av = 1

cycle_AgSw_AggregationSoftware_AggregationSoftware = 1

include "main_assertionsV2.csp"

--------------------------------------------------------------------------------------------------------------
--No more than 360/av time units are spent in the state Turning of state-machine Movement
--------------------------------------------------------------------------------------------------------------

Communication_RC = 2
Communication_id = 1
Movement_av = 180
ID = {0,1}

Timed{

AnyOther(E) = CHAOS(Events) [|E|> SKIP

ADeadline(E,d) = (CHAOS(Events) [| {tock} |] WAIT(d)) [|E|> SKIP

WAIT(n) = if (n == 0) then SKIP else tock -> WAIT(n-1)

MovementStateSpent(t,x) =
let
Main = AnyOther({|AgSwRS::AggregationSoftware::ctrl_ref0::stm_ref0::enterV.x|}) ; ADeadline({|AgSwRS::AggregationSoftware::ctrl_ref0::stm_ref0::exitV.x|},t) ; Main
within
timed_priority(Main)

assert MovementStateSpent(360/Movement_av,AgSwRS::AggregationSoftware::ctrl_ref0::stm_ref0::SID_Movement_Turning) 
[FD= 
AgSwRS::AggregationSoftware::VS__(1,1,1,1,4,1,1,1,1,1,2)


} 

{-
AgSwRS::AggregationSoftware::ctrl_ref0::stm_ref0::VS__(1,1,1,1,4,1,1,1,1)
MovementStateSpent(t,x) =
let
Main = AnyOther({|Movement_enterV.x|}) ; ADeadline({|Movement_exitV.x|},t) ; Main
within
timed_priority(Main)

assert MovementStateSpent(360/Movement_av,"Movement_Turning") [FD= T_AggregationSoftware_VS
AgSwRS::AggregationSoftware::ctrl_ref0::stm_ref0::enteredV.AgSwRS::AggregationSoftware::ctrl_ref0::stm_ref0::SID_Movement_Turning


-}
